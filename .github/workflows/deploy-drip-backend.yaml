name: Build and Deploy Drip Backend

on:
  workflow_call:
    inputs:
      DRIP_PROGRAM_ID:
        required: true
        type: string
      PORT:
        required: true
        type: string
      ENV:
        required: true
        type: string
      NETWORK:
        required: true
        type: string
      PSQL_USER:
        required: true
        type: string
      PSQL_PORT:
        required: true
        type: string
      PSQL_DBNAME:
        required: true
        type: string
      PSQL_HOST:
        required: true
        type: string
      REGISTRY:
        required: true
        type: string
      IMAGE_TAG:
        required: true
        type: string
    secrets:
      DISCORD_ACCESS_TOKEN:
        required: true
      DISCORD_WEBHOOK_ID:
        required: true
      DRIP_BACKEND_WALLET:
        required: true
      PSQL_PASS:
        required: true
      GOOGLE_CLIENT_ID:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 # More information on this action can be found below in the 'AWS Credentials' section
        with:
#          role-to-assume: arn:aws:iam::123456789012:role/deploy-drip-backend
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Tag Image
        run: | 
          docker build \
          --platform linux/amd64 \
          --build-arg DISCORD_ACCESS_TOKEN=${{ secrets.DISCORD_ACCESS_TOKEN }} \
          --build-arg DISCORD_WEBHOOK_ID=${{ secrets.DISCORD_WEBHOOK_ID }} \
          --build-arg DRIP_BACKEND_WALLET=${{ secrets.DRIP_BACKEND_WALLET }} \
          --build-arg DRIP_PROGRAM_ID=${{ inputs.DRIP_PROGRAM_ID }} \
          --build-arg PORT=${{ inputs.PORT }} \
          --build-arg ENV=${{ inputs.ENV }} \
          --build-arg NETWORK=${{ inputs.NETWORK }} \
          --build-arg PSQL_USER=${{ inputs.PSQL_USER }} \
          --build-arg PSQL_PASS=${{ secrets.PSQL_PASS }} \
          --build-arg PSQL_DBNAME=${{ inputs.PSQL_DBNAME }} \
          --build-arg PSQL_PORT=${{ inputs.PSQL_PORT }} \
          --build-arg PSQL_HOST=${{ secrets.PSQL_HOST }} \
          --build-arg GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
          -t ${{ inputs.REGISTRY }}:${{ inputs.IMAGE_TAG }} . \
          -f build/api-event-server.dockerfile .
#      - name: Push to Amazon ECR
#        env:
#          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          REPOSITORY: my-cr-repo
#          IMAGE_TAG: ${{ github.sha }}
#        run: docker push ${{ inputs.REGISTRY }}/${{ inputs.REGISTRY }}:${{ inputs.IMAGE_TAG }}
