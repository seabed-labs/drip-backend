name: CI

on:
  pull_request:
  push:
    branches:
      - 'main'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.1

      - name: Cache go packages
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build API Server
        run: go build main.go

      - name: Build Event Server
        run: go build cmd/consumer/main.go

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.1

      - name: Lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          only-new-issues: true
          skip-go-installation: true

  test:
    env:
      SOLANARPCURL: https://palpable-warmhearted-hexagon.solana-mainnet.discover.quiknode.pro/5793cf44e6e16325347e62d571454890f16e0388/
      SOLANAWSURL: wss://palpable-warmhearted-hexagon.solana-mainnet.discover.quiknode.pro/5793cf44e6e16325347e62d571454890f16e0388/
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Cache go packages
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Code Coverage
        if: ${{ github.event_name != 'pull_request' }}
        uses: amancevice/setup-code-climate@v0
        with:
          cc_test_reporter_id: ${{ secrets.CC_TEST_REPORTER_ID }}

      - name: Code Coverage Before Build
        if: ${{ github.event_name != 'pull_request' }}
        run: cc-test-reporter before-build

      - name: Run unit tests
        env:
          PSQL_DBNAME: drip
          PSQL_USER: drip
          PSQL_PASS: drip
          PSQL_PORT: 5432
          PSQL_HOST: postgres
          ENV: STAGING
          NETWORK: DEVNET
          DRIP_PROGRAM_ID: F1NyoZsUhJzcpGyoEqpDNbUMKVvCnSXcCki1nN3ycAeo
          DRIP_BACKEND_WALLET: ${{ secrets.DRIP_BACKEND_WALLET }}
        run: go test -v -coverpkg ./... ./... -coverprofile ./c.out $(go list ./...) || exit $?

      - name: Generate Code Coverage HTMl Report
        run: go tool cover -html=c.out -o=c.html

      - name: Upload Code Coverage HTML Report to Github
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: c.html

      - name: Format Code Coverage File
        if: ${{ github.event_name != 'pull_request' }}
        run: cc-test-reporter format-coverage -t gocov --prefix github.com/dcaf-labs/drip c.out

      - name: Code Coverage After Build
        if: ${{ github.event_name != 'pull_request' }}
        run: cc-test-reporter after-build --prefix github.com/dcaf-labs/drip --exit-code $?
