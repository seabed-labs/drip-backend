// Code generated by MockGen. DO NOT EDIT.
// Source: drip.go

// Package mock_drip is a generated GoMock package.
package drip

import (
	context "context"
	reflect "reflect"

	model "github.com/dcaf-protocol/drip/internal/pkg/repository/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDrip is a mock of Drip interface.
type MockDrip struct {
	ctrl     *gomock.Controller
	recorder *MockDripMockRecorder
}

// MockDripMockRecorder is the mock recorder for MockDrip.
type MockDripMockRecorder struct {
	mock *MockDrip
}

// NewMockDrip creates a new mock instance.
func NewMockDrip(ctrl *gomock.Controller) *MockDrip {
	mock := &MockDrip{ctrl: ctrl}
	mock.recorder = &MockDripMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrip) EXPECT() *MockDripMockRecorder {
	return m.recorder
}

// GetVaults mocks base method.
func (m *MockDrip) GetVaults(arg0 context.Context, arg1, arg2, arg3 *string) ([]*model.Vault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaults", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.Vault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaults indicates an expected call of GetVaults.
func (mr *MockDripMockRecorder) GetVaults(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaults", reflect.TypeOf((*MockDrip)(nil).GetVaults), arg0, arg1, arg2, arg3)
}

// UpsertVaultByAddress mocks base method.
func (m *MockDrip) UpsertVaultByAddress(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertVaultByAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVaultByAddress indicates an expected call of UpsertVaultByAddress.
func (mr *MockDripMockRecorder) UpsertVaultByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVaultByAddress", reflect.TypeOf((*MockDrip)(nil).UpsertVaultByAddress), arg0, arg1)
}

// UpsertVaults mocks base method.
func (m *MockDrip) UpsertVaults(arg0 context.Context, arg1 ...*model.Vault) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertVaults", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVaults indicates an expected call of UpsertVaults.
func (mr *MockDripMockRecorder) UpsertVaults(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVaults", reflect.TypeOf((*MockDrip)(nil).UpsertVaults), varargs...)
}
