// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPositions(t *testing.T) {
	t.Parallel()

	query := Positions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPositionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Positions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPositionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Positions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Positions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPositionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PositionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Positions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPositionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PositionExists(ctx, tx, o.Pubkey)
	if err != nil {
		t.Errorf("Unable to check if Position exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PositionExists to return true, but got false.")
	}
}

func testPositionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	positionFound, err := FindPosition(ctx, tx, o.Pubkey)
	if err != nil {
		t.Error(err)
	}

	if positionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPositionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Positions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPositionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Positions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPositionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	positionOne := &Position{}
	positionTwo := &Position{}
	if err = randomize.Struct(seed, positionOne, positionDBTypes, false, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}
	if err = randomize.Struct(seed, positionTwo, positionDBTypes, false, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = positionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = positionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Positions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPositionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	positionOne := &Position{}
	positionTwo := &Position{}
	if err = randomize.Struct(seed, positionOne, positionDBTypes, false, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}
	if err = randomize.Struct(seed, positionTwo, positionDBTypes, false, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = positionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = positionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Positions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func positionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Position) error {
	*o = Position{}
	return nil
}

func positionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Position) error {
	*o = Position{}
	return nil
}

func positionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Position) error {
	*o = Position{}
	return nil
}

func positionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Position) error {
	*o = Position{}
	return nil
}

func positionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Position) error {
	*o = Position{}
	return nil
}

func positionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Position) error {
	*o = Position{}
	return nil
}

func positionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Position) error {
	*o = Position{}
	return nil
}

func positionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Position) error {
	*o = Position{}
	return nil
}

func positionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Position) error {
	*o = Position{}
	return nil
}

func testPositionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Position{}
	o := &Position{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, positionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Position object: %s", err)
	}

	AddPositionHook(boil.BeforeInsertHook, positionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	positionBeforeInsertHooks = []PositionHook{}

	AddPositionHook(boil.AfterInsertHook, positionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	positionAfterInsertHooks = []PositionHook{}

	AddPositionHook(boil.AfterSelectHook, positionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	positionAfterSelectHooks = []PositionHook{}

	AddPositionHook(boil.BeforeUpdateHook, positionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	positionBeforeUpdateHooks = []PositionHook{}

	AddPositionHook(boil.AfterUpdateHook, positionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	positionAfterUpdateHooks = []PositionHook{}

	AddPositionHook(boil.BeforeDeleteHook, positionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	positionBeforeDeleteHooks = []PositionHook{}

	AddPositionHook(boil.AfterDeleteHook, positionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	positionAfterDeleteHooks = []PositionHook{}

	AddPositionHook(boil.BeforeUpsertHook, positionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	positionBeforeUpsertHooks = []PositionHook{}

	AddPositionHook(boil.AfterUpsertHook, positionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	positionAfterUpsertHooks = []PositionHook{}
}

func testPositionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Positions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPositionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(positionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Positions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPositionToOneVaultUsingPositionVault(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Position
	var foreign Vault

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, positionDBTypes, false, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, vaultDBTypes, false, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Vault = foreign.Pubkey
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PositionVault().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Pubkey != foreign.Pubkey {
		t.Errorf("want: %v, got %v", foreign.Pubkey, check.Pubkey)
	}

	slice := PositionSlice{&local}
	if err = local.L.LoadPositionVault(ctx, tx, false, (*[]*Position)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PositionVault == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PositionVault = nil
	if err = local.L.LoadPositionVault(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PositionVault == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPositionToOneSetOpVaultUsingPositionVault(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Position
	var b, c Vault

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, positionDBTypes, false, strmangle.SetComplement(positionPrimaryKeyColumns, positionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, vaultDBTypes, false, strmangle.SetComplement(vaultPrimaryKeyColumns, vaultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, vaultDBTypes, false, strmangle.SetComplement(vaultPrimaryKeyColumns, vaultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Vault{&b, &c} {
		err = a.SetPositionVault(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PositionVault != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Positions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Vault != x.Pubkey {
			t.Error("foreign key was wrong value", a.Vault)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Vault))
		reflect.Indirect(reflect.ValueOf(&a.Vault)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Vault != x.Pubkey {
			t.Error("foreign key was wrong value", a.Vault, x.Pubkey)
		}
	}
}

func testPositionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPositionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PositionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPositionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Positions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	positionDBTypes = map[string]string{`Pubkey`: `character varying`, `Vault`: `character varying`, `Authority`: `character varying`, `DepositedTokenAAmount`: `numeric`, `WithdrawnTokenBAmount`: `numeric`, `DepositTimestamp`: `timestamp without time zone`, `DcaPeriodIDBeforeDeposit`: `numeric`, `NumberOfSwaps`: `numeric`, `PeriodicDripAmount`: `numeric`, `IsClosed`: `boolean`}
	_               = bytes.MinRead
)

func testPositionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(positionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(positionAllColumns) == len(positionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Positions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, positionDBTypes, true, positionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPositionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(positionAllColumns) == len(positionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Position{}
	if err = randomize.Struct(seed, o, positionDBTypes, true, positionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Positions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, positionDBTypes, true, positionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(positionAllColumns, positionPrimaryKeyColumns) {
		fields = positionAllColumns
	} else {
		fields = strmangle.SetComplement(
			positionAllColumns,
			positionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PositionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPositionsUpsert(t *testing.T) {
	t.Parallel()

	if len(positionAllColumns) == len(positionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Position{}
	if err = randomize.Struct(seed, &o, positionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Position: %s", err)
	}

	count, err := Positions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, positionDBTypes, false, positionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Position struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Position: %s", err)
	}

	count, err = Positions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
