// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Token is an object representing the database table.
type Token struct {
	Pubkey   string      `boil:"pubkey" json:"pubkey" toml:"pubkey" yaml:"pubkey"`
	Symbol   null.String `boil:"symbol" json:"symbol,omitempty" toml:"symbol" yaml:"symbol,omitempty"`
	Decimals int16       `boil:"decimals" json:"decimals" toml:"decimals" yaml:"decimals"`
	IconURL  null.String `boil:"icon_url" json:"icon_url,omitempty" toml:"icon_url" yaml:"icon_url,omitempty"`

	R *tokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TokenColumns = struct {
	Pubkey   string
	Symbol   string
	Decimals string
	IconURL  string
}{
	Pubkey:   "pubkey",
	Symbol:   "symbol",
	Decimals: "decimals",
	IconURL:  "icon_url",
}

var TokenTableColumns = struct {
	Pubkey   string
	Symbol   string
	Decimals string
	IconURL  string
}{
	Pubkey:   "token.pubkey",
	Symbol:   "token.symbol",
	Decimals: "token.decimals",
	IconURL:  "token.icon_url",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TokenWhere = struct {
	Pubkey   whereHelperstring
	Symbol   whereHelpernull_String
	Decimals whereHelperint16
	IconURL  whereHelpernull_String
}{
	Pubkey:   whereHelperstring{field: "\"token\".\"pubkey\""},
	Symbol:   whereHelpernull_String{field: "\"token\".\"symbol\""},
	Decimals: whereHelperint16{field: "\"token\".\"decimals\""},
	IconURL:  whereHelpernull_String{field: "\"token\".\"icon_url\""},
}

// TokenRels is where relationship names are stored.
var TokenRels = struct {
	TokenATokenPairs string
	TokenBTokenPairs string
	BaseTokenPrices  string
	QuoteTokenPrices string
}{
	TokenATokenPairs: "TokenATokenPairs",
	TokenBTokenPairs: "TokenBTokenPairs",
	BaseTokenPrices:  "BaseTokenPrices",
	QuoteTokenPrices: "QuoteTokenPrices",
}

// tokenR is where relationships are stored.
type tokenR struct {
	TokenATokenPairs TokenPairSlice  `boil:"TokenATokenPairs" json:"TokenATokenPairs" toml:"TokenATokenPairs" yaml:"TokenATokenPairs"`
	TokenBTokenPairs TokenPairSlice  `boil:"TokenBTokenPairs" json:"TokenBTokenPairs" toml:"TokenBTokenPairs" yaml:"TokenBTokenPairs"`
	BaseTokenPrices  TokenPriceSlice `boil:"BaseTokenPrices" json:"BaseTokenPrices" toml:"BaseTokenPrices" yaml:"BaseTokenPrices"`
	QuoteTokenPrices TokenPriceSlice `boil:"QuoteTokenPrices" json:"QuoteTokenPrices" toml:"QuoteTokenPrices" yaml:"QuoteTokenPrices"`
}

// NewStruct creates a new relationship struct
func (*tokenR) NewStruct() *tokenR {
	return &tokenR{}
}

func (r *tokenR) GetTokenATokenPairs() TokenPairSlice {
	if r == nil {
		return nil
	}
	return r.TokenATokenPairs
}

func (r *tokenR) GetTokenBTokenPairs() TokenPairSlice {
	if r == nil {
		return nil
	}
	return r.TokenBTokenPairs
}

func (r *tokenR) GetBaseTokenPrices() TokenPriceSlice {
	if r == nil {
		return nil
	}
	return r.BaseTokenPrices
}

func (r *tokenR) GetQuoteTokenPrices() TokenPriceSlice {
	if r == nil {
		return nil
	}
	return r.QuoteTokenPrices
}

// tokenL is where Load methods for each relationship are stored.
type tokenL struct{}

var (
	tokenAllColumns            = []string{"pubkey", "symbol", "decimals", "icon_url"}
	tokenColumnsWithoutDefault = []string{"pubkey", "decimals"}
	tokenColumnsWithDefault    = []string{"symbol", "icon_url"}
	tokenPrimaryKeyColumns     = []string{"pubkey"}
	tokenGeneratedColumns      = []string{}
)

type (
	// TokenSlice is an alias for a slice of pointers to Token.
	// This should almost always be used instead of []Token.
	TokenSlice []*Token
	// TokenHook is the signature for custom Token hook methods
	TokenHook func(context.Context, boil.ContextExecutor, *Token) error

	tokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tokenType                 = reflect.TypeOf(&Token{})
	tokenMapping              = queries.MakeStructMapping(tokenType)
	tokenPrimaryKeyMapping, _ = queries.BindMapping(tokenType, tokenMapping, tokenPrimaryKeyColumns)
	tokenInsertCacheMut       sync.RWMutex
	tokenInsertCache          = make(map[string]insertCache)
	tokenUpdateCacheMut       sync.RWMutex
	tokenUpdateCache          = make(map[string]updateCache)
	tokenUpsertCacheMut       sync.RWMutex
	tokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tokenAfterSelectHooks []TokenHook

var tokenBeforeInsertHooks []TokenHook
var tokenAfterInsertHooks []TokenHook

var tokenBeforeUpdateHooks []TokenHook
var tokenAfterUpdateHooks []TokenHook

var tokenBeforeDeleteHooks []TokenHook
var tokenAfterDeleteHooks []TokenHook

var tokenBeforeUpsertHooks []TokenHook
var tokenAfterUpsertHooks []TokenHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Token) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Token) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Token) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Token) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Token) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Token) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Token) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Token) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Token) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTokenHook registers your hook function for all future operations.
func AddTokenHook(hookPoint boil.HookPoint, tokenHook TokenHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tokenAfterSelectHooks = append(tokenAfterSelectHooks, tokenHook)
	case boil.BeforeInsertHook:
		tokenBeforeInsertHooks = append(tokenBeforeInsertHooks, tokenHook)
	case boil.AfterInsertHook:
		tokenAfterInsertHooks = append(tokenAfterInsertHooks, tokenHook)
	case boil.BeforeUpdateHook:
		tokenBeforeUpdateHooks = append(tokenBeforeUpdateHooks, tokenHook)
	case boil.AfterUpdateHook:
		tokenAfterUpdateHooks = append(tokenAfterUpdateHooks, tokenHook)
	case boil.BeforeDeleteHook:
		tokenBeforeDeleteHooks = append(tokenBeforeDeleteHooks, tokenHook)
	case boil.AfterDeleteHook:
		tokenAfterDeleteHooks = append(tokenAfterDeleteHooks, tokenHook)
	case boil.BeforeUpsertHook:
		tokenBeforeUpsertHooks = append(tokenBeforeUpsertHooks, tokenHook)
	case boil.AfterUpsertHook:
		tokenAfterUpsertHooks = append(tokenAfterUpsertHooks, tokenHook)
	}
}

// One returns a single token record from the query.
func (q tokenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Token, error) {
	o := &Token{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for token")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Token records from the query.
func (q tokenQuery) All(ctx context.Context, exec boil.ContextExecutor) (TokenSlice, error) {
	var o []*Token

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Token slice")
	}

	if len(tokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Token records in the query.
func (q tokenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count token rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tokenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if token exists")
	}

	return count > 0, nil
}

// TokenATokenPairs retrieves all the token_pair's TokenPairs with an executor via token_a column.
func (o *Token) TokenATokenPairs(mods ...qm.QueryMod) tokenPairQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"token_pair\".\"token_a\"=?", o.Pubkey),
	)

	return TokenPairs(queryMods...)
}

// TokenBTokenPairs retrieves all the token_pair's TokenPairs with an executor via token_b column.
func (o *Token) TokenBTokenPairs(mods ...qm.QueryMod) tokenPairQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"token_pair\".\"token_b\"=?", o.Pubkey),
	)

	return TokenPairs(queryMods...)
}

// BaseTokenPrices retrieves all the token_price's TokenPrices with an executor via base column.
func (o *Token) BaseTokenPrices(mods ...qm.QueryMod) tokenPriceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"token_price\".\"base\"=?", o.Pubkey),
	)

	return TokenPrices(queryMods...)
}

// QuoteTokenPrices retrieves all the token_price's TokenPrices with an executor via quote column.
func (o *Token) QuoteTokenPrices(mods ...qm.QueryMod) tokenPriceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"token_price\".\"quote\"=?", o.Pubkey),
	)

	return TokenPrices(queryMods...)
}

// LoadTokenATokenPairs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tokenL) LoadTokenATokenPairs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeToken interface{}, mods queries.Applicator) error {
	var slice []*Token
	var object *Token

	if singular {
		object = maybeToken.(*Token)
	} else {
		slice = *maybeToken.(*[]*Token)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tokenR{}
		}
		args = append(args, object.Pubkey)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenR{}
			}

			for _, a := range args {
				if a == obj.Pubkey {
					continue Outer
				}
			}

			args = append(args, obj.Pubkey)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`token_pair`),
		qm.WhereIn(`token_pair.token_a in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load token_pair")
	}

	var resultSlice []*TokenPair
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice token_pair")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on token_pair")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token_pair")
	}

	if len(tokenPairAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TokenATokenPairs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tokenPairR{}
			}
			foreign.R.TokenAToken = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Pubkey == foreign.TokenA {
				local.R.TokenATokenPairs = append(local.R.TokenATokenPairs, foreign)
				if foreign.R == nil {
					foreign.R = &tokenPairR{}
				}
				foreign.R.TokenAToken = local
				break
			}
		}
	}

	return nil
}

// LoadTokenBTokenPairs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tokenL) LoadTokenBTokenPairs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeToken interface{}, mods queries.Applicator) error {
	var slice []*Token
	var object *Token

	if singular {
		object = maybeToken.(*Token)
	} else {
		slice = *maybeToken.(*[]*Token)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tokenR{}
		}
		args = append(args, object.Pubkey)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenR{}
			}

			for _, a := range args {
				if a == obj.Pubkey {
					continue Outer
				}
			}

			args = append(args, obj.Pubkey)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`token_pair`),
		qm.WhereIn(`token_pair.token_b in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load token_pair")
	}

	var resultSlice []*TokenPair
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice token_pair")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on token_pair")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token_pair")
	}

	if len(tokenPairAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TokenBTokenPairs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tokenPairR{}
			}
			foreign.R.TokenBToken = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Pubkey == foreign.TokenB {
				local.R.TokenBTokenPairs = append(local.R.TokenBTokenPairs, foreign)
				if foreign.R == nil {
					foreign.R = &tokenPairR{}
				}
				foreign.R.TokenBToken = local
				break
			}
		}
	}

	return nil
}

// LoadBaseTokenPrices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tokenL) LoadBaseTokenPrices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeToken interface{}, mods queries.Applicator) error {
	var slice []*Token
	var object *Token

	if singular {
		object = maybeToken.(*Token)
	} else {
		slice = *maybeToken.(*[]*Token)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tokenR{}
		}
		args = append(args, object.Pubkey)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Pubkey) {
					continue Outer
				}
			}

			args = append(args, obj.Pubkey)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`token_price`),
		qm.WhereIn(`token_price.base in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load token_price")
	}

	var resultSlice []*TokenPrice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice token_price")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on token_price")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token_price")
	}

	if len(tokenPriceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BaseTokenPrices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tokenPriceR{}
			}
			foreign.R.BaseToken = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Pubkey, foreign.Base) {
				local.R.BaseTokenPrices = append(local.R.BaseTokenPrices, foreign)
				if foreign.R == nil {
					foreign.R = &tokenPriceR{}
				}
				foreign.R.BaseToken = local
				break
			}
		}
	}

	return nil
}

// LoadQuoteTokenPrices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tokenL) LoadQuoteTokenPrices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeToken interface{}, mods queries.Applicator) error {
	var slice []*Token
	var object *Token

	if singular {
		object = maybeToken.(*Token)
	} else {
		slice = *maybeToken.(*[]*Token)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tokenR{}
		}
		args = append(args, object.Pubkey)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Pubkey) {
					continue Outer
				}
			}

			args = append(args, obj.Pubkey)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`token_price`),
		qm.WhereIn(`token_price.quote in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load token_price")
	}

	var resultSlice []*TokenPrice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice token_price")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on token_price")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token_price")
	}

	if len(tokenPriceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QuoteTokenPrices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tokenPriceR{}
			}
			foreign.R.QuoteToken = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Pubkey, foreign.Quote) {
				local.R.QuoteTokenPrices = append(local.R.QuoteTokenPrices, foreign)
				if foreign.R == nil {
					foreign.R = &tokenPriceR{}
				}
				foreign.R.QuoteToken = local
				break
			}
		}
	}

	return nil
}

// AddTokenATokenPairs adds the given related objects to the existing relationships
// of the token, optionally inserting them as new records.
// Appends related to o.R.TokenATokenPairs.
// Sets related.R.TokenAToken appropriately.
func (o *Token) AddTokenATokenPairs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TokenPair) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TokenA = o.Pubkey
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"token_pair\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"token_a"}),
				strmangle.WhereClause("\"", "\"", 2, tokenPairPrimaryKeyColumns),
			)
			values := []interface{}{o.Pubkey, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TokenA = o.Pubkey
		}
	}

	if o.R == nil {
		o.R = &tokenR{
			TokenATokenPairs: related,
		}
	} else {
		o.R.TokenATokenPairs = append(o.R.TokenATokenPairs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tokenPairR{
				TokenAToken: o,
			}
		} else {
			rel.R.TokenAToken = o
		}
	}
	return nil
}

// AddTokenBTokenPairs adds the given related objects to the existing relationships
// of the token, optionally inserting them as new records.
// Appends related to o.R.TokenBTokenPairs.
// Sets related.R.TokenBToken appropriately.
func (o *Token) AddTokenBTokenPairs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TokenPair) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TokenB = o.Pubkey
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"token_pair\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"token_b"}),
				strmangle.WhereClause("\"", "\"", 2, tokenPairPrimaryKeyColumns),
			)
			values := []interface{}{o.Pubkey, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TokenB = o.Pubkey
		}
	}

	if o.R == nil {
		o.R = &tokenR{
			TokenBTokenPairs: related,
		}
	} else {
		o.R.TokenBTokenPairs = append(o.R.TokenBTokenPairs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tokenPairR{
				TokenBToken: o,
			}
		} else {
			rel.R.TokenBToken = o
		}
	}
	return nil
}

// AddBaseTokenPrices adds the given related objects to the existing relationships
// of the token, optionally inserting them as new records.
// Appends related to o.R.BaseTokenPrices.
// Sets related.R.BaseToken appropriately.
func (o *Token) AddBaseTokenPrices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TokenPrice) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Base, o.Pubkey)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"token_price\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"base"}),
				strmangle.WhereClause("\"", "\"", 2, tokenPricePrimaryKeyColumns),
			)
			values := []interface{}{o.Pubkey, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Base, o.Pubkey)
		}
	}

	if o.R == nil {
		o.R = &tokenR{
			BaseTokenPrices: related,
		}
	} else {
		o.R.BaseTokenPrices = append(o.R.BaseTokenPrices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tokenPriceR{
				BaseToken: o,
			}
		} else {
			rel.R.BaseToken = o
		}
	}
	return nil
}

// SetBaseTokenPrices removes all previously related items of the
// token replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BaseToken's BaseTokenPrices accordingly.
// Replaces o.R.BaseTokenPrices with related.
// Sets related.R.BaseToken's BaseTokenPrices accordingly.
func (o *Token) SetBaseTokenPrices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TokenPrice) error {
	query := "update \"token_price\" set \"base\" = null where \"base\" = $1"
	values := []interface{}{o.Pubkey}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BaseTokenPrices {
			queries.SetScanner(&rel.Base, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BaseToken = nil
		}
		o.R.BaseTokenPrices = nil
	}

	return o.AddBaseTokenPrices(ctx, exec, insert, related...)
}

// RemoveBaseTokenPrices relationships from objects passed in.
// Removes related items from R.BaseTokenPrices (uses pointer comparison, removal does not keep order)
// Sets related.R.BaseToken.
func (o *Token) RemoveBaseTokenPrices(ctx context.Context, exec boil.ContextExecutor, related ...*TokenPrice) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Base, nil)
		if rel.R != nil {
			rel.R.BaseToken = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("base")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BaseTokenPrices {
			if rel != ri {
				continue
			}

			ln := len(o.R.BaseTokenPrices)
			if ln > 1 && i < ln-1 {
				o.R.BaseTokenPrices[i] = o.R.BaseTokenPrices[ln-1]
			}
			o.R.BaseTokenPrices = o.R.BaseTokenPrices[:ln-1]
			break
		}
	}

	return nil
}

// AddQuoteTokenPrices adds the given related objects to the existing relationships
// of the token, optionally inserting them as new records.
// Appends related to o.R.QuoteTokenPrices.
// Sets related.R.QuoteToken appropriately.
func (o *Token) AddQuoteTokenPrices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TokenPrice) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Quote, o.Pubkey)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"token_price\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"quote"}),
				strmangle.WhereClause("\"", "\"", 2, tokenPricePrimaryKeyColumns),
			)
			values := []interface{}{o.Pubkey, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Quote, o.Pubkey)
		}
	}

	if o.R == nil {
		o.R = &tokenR{
			QuoteTokenPrices: related,
		}
	} else {
		o.R.QuoteTokenPrices = append(o.R.QuoteTokenPrices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tokenPriceR{
				QuoteToken: o,
			}
		} else {
			rel.R.QuoteToken = o
		}
	}
	return nil
}

// SetQuoteTokenPrices removes all previously related items of the
// token replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.QuoteToken's QuoteTokenPrices accordingly.
// Replaces o.R.QuoteTokenPrices with related.
// Sets related.R.QuoteToken's QuoteTokenPrices accordingly.
func (o *Token) SetQuoteTokenPrices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TokenPrice) error {
	query := "update \"token_price\" set \"quote\" = null where \"quote\" = $1"
	values := []interface{}{o.Pubkey}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.QuoteTokenPrices {
			queries.SetScanner(&rel.Quote, nil)
			if rel.R == nil {
				continue
			}

			rel.R.QuoteToken = nil
		}
		o.R.QuoteTokenPrices = nil
	}

	return o.AddQuoteTokenPrices(ctx, exec, insert, related...)
}

// RemoveQuoteTokenPrices relationships from objects passed in.
// Removes related items from R.QuoteTokenPrices (uses pointer comparison, removal does not keep order)
// Sets related.R.QuoteToken.
func (o *Token) RemoveQuoteTokenPrices(ctx context.Context, exec boil.ContextExecutor, related ...*TokenPrice) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Quote, nil)
		if rel.R != nil {
			rel.R.QuoteToken = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("quote")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.QuoteTokenPrices {
			if rel != ri {
				continue
			}

			ln := len(o.R.QuoteTokenPrices)
			if ln > 1 && i < ln-1 {
				o.R.QuoteTokenPrices[i] = o.R.QuoteTokenPrices[ln-1]
			}
			o.R.QuoteTokenPrices = o.R.QuoteTokenPrices[:ln-1]
			break
		}
	}

	return nil
}

// Tokens retrieves all the records using an executor.
func Tokens(mods ...qm.QueryMod) tokenQuery {
	mods = append(mods, qm.From("\"token\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"token\".*"})
	}

	return tokenQuery{q}
}

// FindToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindToken(ctx context.Context, exec boil.ContextExecutor, pubkey string, selectCols ...string) (*Token, error) {
	tokenObj := &Token{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"token\" where \"pubkey\"=$1", sel,
	)

	q := queries.Raw(query, pubkey)

	err := q.Bind(ctx, exec, tokenObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from token")
	}

	if err = tokenObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tokenObj, err
	}

	return tokenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Token) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tokenInsertCacheMut.RLock()
	cache, cached := tokenInsertCache[key]
	tokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tokenAllColumns,
			tokenColumnsWithDefault,
			tokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tokenType, tokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tokenType, tokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"token\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"token\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into token")
	}

	if !cached {
		tokenInsertCacheMut.Lock()
		tokenInsertCache[key] = cache
		tokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Token.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Token) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tokenUpdateCacheMut.RLock()
	cache, cached := tokenUpdateCache[key]
	tokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tokenAllColumns,
			tokenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update token, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"token\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tokenType, tokenMapping, append(wl, tokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update token row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for token")
	}

	if !cached {
		tokenUpdateCacheMut.Lock()
		tokenUpdateCache[key] = cache
		tokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tokenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for token")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for token")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TokenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"token\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tokenPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in token slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all token")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Token) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tokenUpsertCacheMut.RLock()
	cache, cached := tokenUpsertCache[key]
	tokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tokenAllColumns,
			tokenColumnsWithDefault,
			tokenColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tokenAllColumns,
			tokenPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert token, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tokenPrimaryKeyColumns))
			copy(conflict, tokenPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"token\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tokenType, tokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tokenType, tokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert token")
	}

	if !cached {
		tokenUpsertCacheMut.Lock()
		tokenUpsertCache[key] = cache
		tokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Token record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Token) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Token provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tokenPrimaryKeyMapping)
	sql := "DELETE FROM \"token\" WHERE \"pubkey\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from token")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for token")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tokenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from token")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TokenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"token\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from token slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token")
	}

	if len(tokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Token) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindToken(ctx, exec, o.Pubkey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TokenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"token\".* FROM \"token\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TokenSlice")
	}

	*o = slice

	return nil
}

// TokenExists checks if the Token row exists.
func TokenExists(ctx context.Context, exec boil.ContextExecutor, pubkey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"token\" where \"pubkey\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pubkey)
	}
	row := exec.QueryRowContext(ctx, sql, pubkey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if token exists")
	}

	return exists, nil
}
