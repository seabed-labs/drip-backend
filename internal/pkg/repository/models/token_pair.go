// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TokenPair is an object representing the database table.
type TokenPair struct {
	ID     string `boil:"id" json:"id" toml:"id" yaml:"id"`
	TokenA string `boil:"token_a" json:"token_a" toml:"token_a" yaml:"token_a"`
	TokenB string `boil:"token_b" json:"token_b" toml:"token_b" yaml:"token_b"`

	R *tokenPairR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tokenPairL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TokenPairColumns = struct {
	ID     string
	TokenA string
	TokenB string
}{
	ID:     "id",
	TokenA: "token_a",
	TokenB: "token_b",
}

var TokenPairTableColumns = struct {
	ID     string
	TokenA string
	TokenB string
}{
	ID:     "token_pair.id",
	TokenA: "token_pair.token_a",
	TokenB: "token_pair.token_b",
}

// Generated where

var TokenPairWhere = struct {
	ID     whereHelperstring
	TokenA whereHelperstring
	TokenB whereHelperstring
}{
	ID:     whereHelperstring{field: "\"token_pair\".\"id\""},
	TokenA: whereHelperstring{field: "\"token_pair\".\"token_a\""},
	TokenB: whereHelperstring{field: "\"token_pair\".\"token_b\""},
}

// TokenPairRels is where relationship names are stored.
var TokenPairRels = struct {
	TokenAToken    string
	TokenBToken    string
	PairTokenSwaps string
}{
	TokenAToken:    "TokenAToken",
	TokenBToken:    "TokenBToken",
	PairTokenSwaps: "PairTokenSwaps",
}

// tokenPairR is where relationships are stored.
type tokenPairR struct {
	TokenAToken    *Token         `boil:"TokenAToken" json:"TokenAToken" toml:"TokenAToken" yaml:"TokenAToken"`
	TokenBToken    *Token         `boil:"TokenBToken" json:"TokenBToken" toml:"TokenBToken" yaml:"TokenBToken"`
	PairTokenSwaps TokenSwapSlice `boil:"PairTokenSwaps" json:"PairTokenSwaps" toml:"PairTokenSwaps" yaml:"PairTokenSwaps"`
}

// NewStruct creates a new relationship struct
func (*tokenPairR) NewStruct() *tokenPairR {
	return &tokenPairR{}
}

func (r *tokenPairR) GetTokenAToken() *Token {
	if r == nil {
		return nil
	}
	return r.TokenAToken
}

func (r *tokenPairR) GetTokenBToken() *Token {
	if r == nil {
		return nil
	}
	return r.TokenBToken
}

func (r *tokenPairR) GetPairTokenSwaps() TokenSwapSlice {
	if r == nil {
		return nil
	}
	return r.PairTokenSwaps
}

// tokenPairL is where Load methods for each relationship are stored.
type tokenPairL struct{}

var (
	tokenPairAllColumns            = []string{"id", "token_a", "token_b"}
	tokenPairColumnsWithoutDefault = []string{"id", "token_a", "token_b"}
	tokenPairColumnsWithDefault    = []string{}
	tokenPairPrimaryKeyColumns     = []string{"id"}
	tokenPairGeneratedColumns      = []string{}
)

type (
	// TokenPairSlice is an alias for a slice of pointers to TokenPair.
	// This should almost always be used instead of []TokenPair.
	TokenPairSlice []*TokenPair
	// TokenPairHook is the signature for custom TokenPair hook methods
	TokenPairHook func(context.Context, boil.ContextExecutor, *TokenPair) error

	tokenPairQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tokenPairType                 = reflect.TypeOf(&TokenPair{})
	tokenPairMapping              = queries.MakeStructMapping(tokenPairType)
	tokenPairPrimaryKeyMapping, _ = queries.BindMapping(tokenPairType, tokenPairMapping, tokenPairPrimaryKeyColumns)
	tokenPairInsertCacheMut       sync.RWMutex
	tokenPairInsertCache          = make(map[string]insertCache)
	tokenPairUpdateCacheMut       sync.RWMutex
	tokenPairUpdateCache          = make(map[string]updateCache)
	tokenPairUpsertCacheMut       sync.RWMutex
	tokenPairUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tokenPairAfterSelectHooks []TokenPairHook

var tokenPairBeforeInsertHooks []TokenPairHook
var tokenPairAfterInsertHooks []TokenPairHook

var tokenPairBeforeUpdateHooks []TokenPairHook
var tokenPairAfterUpdateHooks []TokenPairHook

var tokenPairBeforeDeleteHooks []TokenPairHook
var tokenPairAfterDeleteHooks []TokenPairHook

var tokenPairBeforeUpsertHooks []TokenPairHook
var tokenPairAfterUpsertHooks []TokenPairHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TokenPair) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPairAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TokenPair) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPairBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TokenPair) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPairAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TokenPair) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPairBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TokenPair) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPairAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TokenPair) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPairBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TokenPair) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPairAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TokenPair) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPairBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TokenPair) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPairAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTokenPairHook registers your hook function for all future operations.
func AddTokenPairHook(hookPoint boil.HookPoint, tokenPairHook TokenPairHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tokenPairAfterSelectHooks = append(tokenPairAfterSelectHooks, tokenPairHook)
	case boil.BeforeInsertHook:
		tokenPairBeforeInsertHooks = append(tokenPairBeforeInsertHooks, tokenPairHook)
	case boil.AfterInsertHook:
		tokenPairAfterInsertHooks = append(tokenPairAfterInsertHooks, tokenPairHook)
	case boil.BeforeUpdateHook:
		tokenPairBeforeUpdateHooks = append(tokenPairBeforeUpdateHooks, tokenPairHook)
	case boil.AfterUpdateHook:
		tokenPairAfterUpdateHooks = append(tokenPairAfterUpdateHooks, tokenPairHook)
	case boil.BeforeDeleteHook:
		tokenPairBeforeDeleteHooks = append(tokenPairBeforeDeleteHooks, tokenPairHook)
	case boil.AfterDeleteHook:
		tokenPairAfterDeleteHooks = append(tokenPairAfterDeleteHooks, tokenPairHook)
	case boil.BeforeUpsertHook:
		tokenPairBeforeUpsertHooks = append(tokenPairBeforeUpsertHooks, tokenPairHook)
	case boil.AfterUpsertHook:
		tokenPairAfterUpsertHooks = append(tokenPairAfterUpsertHooks, tokenPairHook)
	}
}

// One returns a single tokenPair record from the query.
func (q tokenPairQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TokenPair, error) {
	o := &TokenPair{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for token_pair")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TokenPair records from the query.
func (q tokenPairQuery) All(ctx context.Context, exec boil.ContextExecutor) (TokenPairSlice, error) {
	var o []*TokenPair

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TokenPair slice")
	}

	if len(tokenPairAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TokenPair records in the query.
func (q tokenPairQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count token_pair rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tokenPairQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if token_pair exists")
	}

	return count > 0, nil
}

// TokenAToken pointed to by the foreign key.
func (o *TokenPair) TokenAToken(mods ...qm.QueryMod) tokenQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pubkey\" = ?", o.TokenA),
	}

	queryMods = append(queryMods, mods...)

	return Tokens(queryMods...)
}

// TokenBToken pointed to by the foreign key.
func (o *TokenPair) TokenBToken(mods ...qm.QueryMod) tokenQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pubkey\" = ?", o.TokenB),
	}

	queryMods = append(queryMods, mods...)

	return Tokens(queryMods...)
}

// PairTokenSwaps retrieves all the token_swap's TokenSwaps with an executor via pair column.
func (o *TokenPair) PairTokenSwaps(mods ...qm.QueryMod) tokenSwapQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"token_swap\".\"pair\"=?", o.ID),
	)

	return TokenSwaps(queryMods...)
}

// LoadTokenAToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tokenPairL) LoadTokenAToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTokenPair interface{}, mods queries.Applicator) error {
	var slice []*TokenPair
	var object *TokenPair

	if singular {
		object = maybeTokenPair.(*TokenPair)
	} else {
		slice = *maybeTokenPair.(*[]*TokenPair)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tokenPairR{}
		}
		args = append(args, object.TokenA)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenPairR{}
			}

			for _, a := range args {
				if a == obj.TokenA {
					continue Outer
				}
			}

			args = append(args, obj.TokenA)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`token`),
		qm.WhereIn(`token.pubkey in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Token")
	}

	var resultSlice []*Token
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Token")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for token")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token")
	}

	if len(tokenPairAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TokenAToken = foreign
		if foreign.R == nil {
			foreign.R = &tokenR{}
		}
		foreign.R.TokenATokenPairs = append(foreign.R.TokenATokenPairs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TokenA == foreign.Pubkey {
				local.R.TokenAToken = foreign
				if foreign.R == nil {
					foreign.R = &tokenR{}
				}
				foreign.R.TokenATokenPairs = append(foreign.R.TokenATokenPairs, local)
				break
			}
		}
	}

	return nil
}

// LoadTokenBToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tokenPairL) LoadTokenBToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTokenPair interface{}, mods queries.Applicator) error {
	var slice []*TokenPair
	var object *TokenPair

	if singular {
		object = maybeTokenPair.(*TokenPair)
	} else {
		slice = *maybeTokenPair.(*[]*TokenPair)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tokenPairR{}
		}
		args = append(args, object.TokenB)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenPairR{}
			}

			for _, a := range args {
				if a == obj.TokenB {
					continue Outer
				}
			}

			args = append(args, obj.TokenB)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`token`),
		qm.WhereIn(`token.pubkey in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Token")
	}

	var resultSlice []*Token
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Token")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for token")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token")
	}

	if len(tokenPairAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TokenBToken = foreign
		if foreign.R == nil {
			foreign.R = &tokenR{}
		}
		foreign.R.TokenBTokenPairs = append(foreign.R.TokenBTokenPairs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TokenB == foreign.Pubkey {
				local.R.TokenBToken = foreign
				if foreign.R == nil {
					foreign.R = &tokenR{}
				}
				foreign.R.TokenBTokenPairs = append(foreign.R.TokenBTokenPairs, local)
				break
			}
		}
	}

	return nil
}

// LoadPairTokenSwaps allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tokenPairL) LoadPairTokenSwaps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTokenPair interface{}, mods queries.Applicator) error {
	var slice []*TokenPair
	var object *TokenPair

	if singular {
		object = maybeTokenPair.(*TokenPair)
	} else {
		slice = *maybeTokenPair.(*[]*TokenPair)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tokenPairR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenPairR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`token_swap`),
		qm.WhereIn(`token_swap.pair in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load token_swap")
	}

	var resultSlice []*TokenSwap
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice token_swap")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on token_swap")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token_swap")
	}

	if len(tokenSwapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PairTokenSwaps = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tokenSwapR{}
			}
			foreign.R.PairTokenPair = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Pair {
				local.R.PairTokenSwaps = append(local.R.PairTokenSwaps, foreign)
				if foreign.R == nil {
					foreign.R = &tokenSwapR{}
				}
				foreign.R.PairTokenPair = local
				break
			}
		}
	}

	return nil
}

// SetTokenAToken of the tokenPair to the related item.
// Sets o.R.TokenAToken to related.
// Adds o to related.R.TokenATokenPairs.
func (o *TokenPair) SetTokenAToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Token) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"token_pair\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"token_a"}),
		strmangle.WhereClause("\"", "\"", 2, tokenPairPrimaryKeyColumns),
	)
	values := []interface{}{related.Pubkey, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TokenA = related.Pubkey
	if o.R == nil {
		o.R = &tokenPairR{
			TokenAToken: related,
		}
	} else {
		o.R.TokenAToken = related
	}

	if related.R == nil {
		related.R = &tokenR{
			TokenATokenPairs: TokenPairSlice{o},
		}
	} else {
		related.R.TokenATokenPairs = append(related.R.TokenATokenPairs, o)
	}

	return nil
}

// SetTokenBToken of the tokenPair to the related item.
// Sets o.R.TokenBToken to related.
// Adds o to related.R.TokenBTokenPairs.
func (o *TokenPair) SetTokenBToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Token) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"token_pair\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"token_b"}),
		strmangle.WhereClause("\"", "\"", 2, tokenPairPrimaryKeyColumns),
	)
	values := []interface{}{related.Pubkey, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TokenB = related.Pubkey
	if o.R == nil {
		o.R = &tokenPairR{
			TokenBToken: related,
		}
	} else {
		o.R.TokenBToken = related
	}

	if related.R == nil {
		related.R = &tokenR{
			TokenBTokenPairs: TokenPairSlice{o},
		}
	} else {
		related.R.TokenBTokenPairs = append(related.R.TokenBTokenPairs, o)
	}

	return nil
}

// AddPairTokenSwaps adds the given related objects to the existing relationships
// of the token_pair, optionally inserting them as new records.
// Appends related to o.R.PairTokenSwaps.
// Sets related.R.PairTokenPair appropriately.
func (o *TokenPair) AddPairTokenSwaps(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TokenSwap) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Pair = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"token_swap\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pair"}),
				strmangle.WhereClause("\"", "\"", 2, tokenSwapPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Pubkey}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Pair = o.ID
		}
	}

	if o.R == nil {
		o.R = &tokenPairR{
			PairTokenSwaps: related,
		}
	} else {
		o.R.PairTokenSwaps = append(o.R.PairTokenSwaps, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tokenSwapR{
				PairTokenPair: o,
			}
		} else {
			rel.R.PairTokenPair = o
		}
	}
	return nil
}

// TokenPairs retrieves all the records using an executor.
func TokenPairs(mods ...qm.QueryMod) tokenPairQuery {
	mods = append(mods, qm.From("\"token_pair\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"token_pair\".*"})
	}

	return tokenPairQuery{q}
}

// FindTokenPair retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTokenPair(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TokenPair, error) {
	tokenPairObj := &TokenPair{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"token_pair\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tokenPairObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from token_pair")
	}

	if err = tokenPairObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tokenPairObj, err
	}

	return tokenPairObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TokenPair) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_pair provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenPairColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tokenPairInsertCacheMut.RLock()
	cache, cached := tokenPairInsertCache[key]
	tokenPairInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tokenPairAllColumns,
			tokenPairColumnsWithDefault,
			tokenPairColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tokenPairType, tokenPairMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tokenPairType, tokenPairMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"token_pair\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"token_pair\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into token_pair")
	}

	if !cached {
		tokenPairInsertCacheMut.Lock()
		tokenPairInsertCache[key] = cache
		tokenPairInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TokenPair.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TokenPair) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tokenPairUpdateCacheMut.RLock()
	cache, cached := tokenPairUpdateCache[key]
	tokenPairUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tokenPairAllColumns,
			tokenPairPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update token_pair, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"token_pair\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tokenPairPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tokenPairType, tokenPairMapping, append(wl, tokenPairPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update token_pair row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for token_pair")
	}

	if !cached {
		tokenPairUpdateCacheMut.Lock()
		tokenPairUpdateCache[key] = cache
		tokenPairUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tokenPairQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for token_pair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for token_pair")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TokenPairSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"token_pair\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tokenPairPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tokenPair slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tokenPair")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TokenPair) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_pair provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenPairColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tokenPairUpsertCacheMut.RLock()
	cache, cached := tokenPairUpsertCache[key]
	tokenPairUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tokenPairAllColumns,
			tokenPairColumnsWithDefault,
			tokenPairColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tokenPairAllColumns,
			tokenPairPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert token_pair, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tokenPairPrimaryKeyColumns))
			copy(conflict, tokenPairPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"token_pair\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tokenPairType, tokenPairMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tokenPairType, tokenPairMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert token_pair")
	}

	if !cached {
		tokenPairUpsertCacheMut.Lock()
		tokenPairUpsertCache[key] = cache
		tokenPairUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TokenPair record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TokenPair) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TokenPair provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tokenPairPrimaryKeyMapping)
	sql := "DELETE FROM \"token_pair\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from token_pair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for token_pair")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tokenPairQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tokenPairQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from token_pair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_pair")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TokenPairSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tokenPairBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"token_pair\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenPairPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tokenPair slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_pair")
	}

	if len(tokenPairAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TokenPair) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTokenPair(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TokenPairSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TokenPairSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"token_pair\".* FROM \"token_pair\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenPairPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TokenPairSlice")
	}

	*o = slice

	return nil
}

// TokenPairExists checks if the TokenPair row exists.
func TokenPairExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"token_pair\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if token_pair exists")
	}

	return exists, nil
}
