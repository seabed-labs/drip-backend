// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVaultPeriods(t *testing.T) {
	t.Parallel()

	query := VaultPeriods()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVaultPeriodsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VaultPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVaultPeriodsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VaultPeriods().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VaultPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVaultPeriodsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VaultPeriodSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VaultPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVaultPeriodsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VaultPeriodExists(ctx, tx, o.Pubkey)
	if err != nil {
		t.Errorf("Unable to check if VaultPeriod exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VaultPeriodExists to return true, but got false.")
	}
}

func testVaultPeriodsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	vaultPeriodFound, err := FindVaultPeriod(ctx, tx, o.Pubkey)
	if err != nil {
		t.Error(err)
	}

	if vaultPeriodFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVaultPeriodsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VaultPeriods().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVaultPeriodsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VaultPeriods().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVaultPeriodsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vaultPeriodOne := &VaultPeriod{}
	vaultPeriodTwo := &VaultPeriod{}
	if err = randomize.Struct(seed, vaultPeriodOne, vaultPeriodDBTypes, false, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}
	if err = randomize.Struct(seed, vaultPeriodTwo, vaultPeriodDBTypes, false, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = vaultPeriodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = vaultPeriodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VaultPeriods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVaultPeriodsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	vaultPeriodOne := &VaultPeriod{}
	vaultPeriodTwo := &VaultPeriod{}
	if err = randomize.Struct(seed, vaultPeriodOne, vaultPeriodDBTypes, false, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}
	if err = randomize.Struct(seed, vaultPeriodTwo, vaultPeriodDBTypes, false, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = vaultPeriodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = vaultPeriodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VaultPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func vaultPeriodBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *VaultPeriod) error {
	*o = VaultPeriod{}
	return nil
}

func vaultPeriodAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *VaultPeriod) error {
	*o = VaultPeriod{}
	return nil
}

func vaultPeriodAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *VaultPeriod) error {
	*o = VaultPeriod{}
	return nil
}

func vaultPeriodBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VaultPeriod) error {
	*o = VaultPeriod{}
	return nil
}

func vaultPeriodAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VaultPeriod) error {
	*o = VaultPeriod{}
	return nil
}

func vaultPeriodBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VaultPeriod) error {
	*o = VaultPeriod{}
	return nil
}

func vaultPeriodAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VaultPeriod) error {
	*o = VaultPeriod{}
	return nil
}

func vaultPeriodBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VaultPeriod) error {
	*o = VaultPeriod{}
	return nil
}

func vaultPeriodAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VaultPeriod) error {
	*o = VaultPeriod{}
	return nil
}

func testVaultPeriodsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &VaultPeriod{}
	o := &VaultPeriod{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VaultPeriod object: %s", err)
	}

	AddVaultPeriodHook(boil.BeforeInsertHook, vaultPeriodBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	vaultPeriodBeforeInsertHooks = []VaultPeriodHook{}

	AddVaultPeriodHook(boil.AfterInsertHook, vaultPeriodAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	vaultPeriodAfterInsertHooks = []VaultPeriodHook{}

	AddVaultPeriodHook(boil.AfterSelectHook, vaultPeriodAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	vaultPeriodAfterSelectHooks = []VaultPeriodHook{}

	AddVaultPeriodHook(boil.BeforeUpdateHook, vaultPeriodBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	vaultPeriodBeforeUpdateHooks = []VaultPeriodHook{}

	AddVaultPeriodHook(boil.AfterUpdateHook, vaultPeriodAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	vaultPeriodAfterUpdateHooks = []VaultPeriodHook{}

	AddVaultPeriodHook(boil.BeforeDeleteHook, vaultPeriodBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	vaultPeriodBeforeDeleteHooks = []VaultPeriodHook{}

	AddVaultPeriodHook(boil.AfterDeleteHook, vaultPeriodAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	vaultPeriodAfterDeleteHooks = []VaultPeriodHook{}

	AddVaultPeriodHook(boil.BeforeUpsertHook, vaultPeriodBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	vaultPeriodBeforeUpsertHooks = []VaultPeriodHook{}

	AddVaultPeriodHook(boil.AfterUpsertHook, vaultPeriodAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	vaultPeriodAfterUpsertHooks = []VaultPeriodHook{}
}

func testVaultPeriodsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VaultPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVaultPeriodsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(vaultPeriodColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VaultPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVaultPeriodToOneVaultUsingVaultPeriodVault(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VaultPeriod
	var foreign Vault

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, vaultPeriodDBTypes, false, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, vaultDBTypes, false, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Vault = foreign.Pubkey
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.VaultPeriodVault().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Pubkey != foreign.Pubkey {
		t.Errorf("want: %v, got %v", foreign.Pubkey, check.Pubkey)
	}

	slice := VaultPeriodSlice{&local}
	if err = local.L.LoadVaultPeriodVault(ctx, tx, false, (*[]*VaultPeriod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VaultPeriodVault == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VaultPeriodVault = nil
	if err = local.L.LoadVaultPeriodVault(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VaultPeriodVault == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVaultPeriodToOneSetOpVaultUsingVaultPeriodVault(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VaultPeriod
	var b, c Vault

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, vaultPeriodDBTypes, false, strmangle.SetComplement(vaultPeriodPrimaryKeyColumns, vaultPeriodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, vaultDBTypes, false, strmangle.SetComplement(vaultPrimaryKeyColumns, vaultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, vaultDBTypes, false, strmangle.SetComplement(vaultPrimaryKeyColumns, vaultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Vault{&b, &c} {
		err = a.SetVaultPeriodVault(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VaultPeriodVault != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VaultPeriods[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Vault != x.Pubkey {
			t.Error("foreign key was wrong value", a.Vault)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Vault))
		reflect.Indirect(reflect.ValueOf(&a.Vault)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Vault != x.Pubkey {
			t.Error("foreign key was wrong value", a.Vault, x.Pubkey)
		}
	}
}

func testVaultPeriodsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVaultPeriodsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VaultPeriodSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVaultPeriodsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VaultPeriods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	vaultPeriodDBTypes = map[string]string{`Pubkey`: `character varying`, `Vault`: `character varying`, `PeriodID`: `numeric`, `Twap`: `numeric`, `Dar`: `numeric`}
	_                  = bytes.MinRead
)

func testVaultPeriodsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(vaultPeriodPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(vaultPeriodAllColumns) == len(vaultPeriodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VaultPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVaultPeriodsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(vaultPeriodAllColumns) == len(vaultPeriodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VaultPeriod{}
	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VaultPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, vaultPeriodDBTypes, true, vaultPeriodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(vaultPeriodAllColumns, vaultPeriodPrimaryKeyColumns) {
		fields = vaultPeriodAllColumns
	} else {
		fields = strmangle.SetComplement(
			vaultPeriodAllColumns,
			vaultPeriodPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VaultPeriodSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVaultPeriodsUpsert(t *testing.T) {
	t.Parallel()

	if len(vaultPeriodAllColumns) == len(vaultPeriodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VaultPeriod{}
	if err = randomize.Struct(seed, &o, vaultPeriodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VaultPeriod: %s", err)
	}

	count, err := VaultPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, vaultPeriodDBTypes, false, vaultPeriodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VaultPeriod struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VaultPeriod: %s", err)
	}

	count, err = VaultPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
