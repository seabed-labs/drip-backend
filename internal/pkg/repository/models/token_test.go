// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTokens(t *testing.T) {
	t.Parallel()

	query := Tokens()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTokensDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokensQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tokens().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokensSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TokenSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokensExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TokenExists(ctx, tx, o.Pubkey)
	if err != nil {
		t.Errorf("Unable to check if Token exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TokenExists to return true, but got false.")
	}
}

func testTokensFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tokenFound, err := FindToken(ctx, tx, o.Pubkey)
	if err != nil {
		t.Error(err)
	}

	if tokenFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTokensBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tokens().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTokensOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tokens().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTokensAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tokenOne := &Token{}
	tokenTwo := &Token{}
	if err = randomize.Struct(seed, tokenOne, tokenDBTypes, false, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}
	if err = randomize.Struct(seed, tokenTwo, tokenDBTypes, false, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTokensCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tokenOne := &Token{}
	tokenTwo := &Token{}
	if err = randomize.Struct(seed, tokenOne, tokenDBTypes, false, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}
	if err = randomize.Struct(seed, tokenTwo, tokenDBTypes, false, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tokenBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Token) error {
	*o = Token{}
	return nil
}

func tokenAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Token) error {
	*o = Token{}
	return nil
}

func tokenAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Token) error {
	*o = Token{}
	return nil
}

func tokenBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Token) error {
	*o = Token{}
	return nil
}

func tokenAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Token) error {
	*o = Token{}
	return nil
}

func tokenBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Token) error {
	*o = Token{}
	return nil
}

func tokenAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Token) error {
	*o = Token{}
	return nil
}

func tokenBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Token) error {
	*o = Token{}
	return nil
}

func tokenAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Token) error {
	*o = Token{}
	return nil
}

func testTokensHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Token{}
	o := &Token{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Token object: %s", err)
	}

	AddTokenHook(boil.BeforeInsertHook, tokenBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tokenBeforeInsertHooks = []TokenHook{}

	AddTokenHook(boil.AfterInsertHook, tokenAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tokenAfterInsertHooks = []TokenHook{}

	AddTokenHook(boil.AfterSelectHook, tokenAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tokenAfterSelectHooks = []TokenHook{}

	AddTokenHook(boil.BeforeUpdateHook, tokenBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tokenBeforeUpdateHooks = []TokenHook{}

	AddTokenHook(boil.AfterUpdateHook, tokenAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tokenAfterUpdateHooks = []TokenHook{}

	AddTokenHook(boil.BeforeDeleteHook, tokenBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tokenBeforeDeleteHooks = []TokenHook{}

	AddTokenHook(boil.AfterDeleteHook, tokenAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tokenAfterDeleteHooks = []TokenHook{}

	AddTokenHook(boil.BeforeUpsertHook, tokenBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tokenBeforeUpsertHooks = []TokenHook{}

	AddTokenHook(boil.AfterUpsertHook, tokenAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tokenAfterUpsertHooks = []TokenHook{}
}

func testTokensInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTokensInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tokenColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Tokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTokenToManyTokenATokenPairs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c TokenPair

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tokenPairDBTypes, false, tokenPairColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tokenPairDBTypes, false, tokenPairColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TokenA = a.Pubkey
	c.TokenA = a.Pubkey

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TokenATokenPairs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TokenA == b.TokenA {
			bFound = true
		}
		if v.TokenA == c.TokenA {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TokenSlice{&a}
	if err = a.L.LoadTokenATokenPairs(ctx, tx, false, (*[]*Token)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TokenATokenPairs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TokenATokenPairs = nil
	if err = a.L.LoadTokenATokenPairs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TokenATokenPairs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTokenToManyTokenBTokenPairs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c TokenPair

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tokenPairDBTypes, false, tokenPairColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tokenPairDBTypes, false, tokenPairColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TokenB = a.Pubkey
	c.TokenB = a.Pubkey

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TokenBTokenPairs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TokenB == b.TokenB {
			bFound = true
		}
		if v.TokenB == c.TokenB {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TokenSlice{&a}
	if err = a.L.LoadTokenBTokenPairs(ctx, tx, false, (*[]*Token)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TokenBTokenPairs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TokenBTokenPairs = nil
	if err = a.L.LoadTokenBTokenPairs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TokenBTokenPairs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTokenToManyBaseTokenPrices(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c TokenPrice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tokenPriceDBTypes, false, tokenPriceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tokenPriceDBTypes, false, tokenPriceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Base, a.Pubkey)
	queries.Assign(&c.Base, a.Pubkey)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BaseTokenPrices().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Base, b.Base) {
			bFound = true
		}
		if queries.Equal(v.Base, c.Base) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TokenSlice{&a}
	if err = a.L.LoadBaseTokenPrices(ctx, tx, false, (*[]*Token)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BaseTokenPrices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BaseTokenPrices = nil
	if err = a.L.LoadBaseTokenPrices(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BaseTokenPrices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTokenToManyQuoteTokenPrices(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c TokenPrice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tokenPriceDBTypes, false, tokenPriceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tokenPriceDBTypes, false, tokenPriceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Quote, a.Pubkey)
	queries.Assign(&c.Quote, a.Pubkey)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.QuoteTokenPrices().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Quote, b.Quote) {
			bFound = true
		}
		if queries.Equal(v.Quote, c.Quote) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TokenSlice{&a}
	if err = a.L.LoadQuoteTokenPrices(ctx, tx, false, (*[]*Token)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QuoteTokenPrices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.QuoteTokenPrices = nil
	if err = a.L.LoadQuoteTokenPrices(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QuoteTokenPrices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTokenToManyAddOpTokenATokenPairs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c, d, e TokenPair

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TokenPair{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tokenPairDBTypes, false, strmangle.SetComplement(tokenPairPrimaryKeyColumns, tokenPairColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TokenPair{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTokenATokenPairs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Pubkey != first.TokenA {
			t.Error("foreign key was wrong value", a.Pubkey, first.TokenA)
		}
		if a.Pubkey != second.TokenA {
			t.Error("foreign key was wrong value", a.Pubkey, second.TokenA)
		}

		if first.R.TokenAToken != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TokenAToken != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TokenATokenPairs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TokenATokenPairs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TokenATokenPairs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTokenToManyAddOpTokenBTokenPairs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c, d, e TokenPair

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TokenPair{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tokenPairDBTypes, false, strmangle.SetComplement(tokenPairPrimaryKeyColumns, tokenPairColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TokenPair{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTokenBTokenPairs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Pubkey != first.TokenB {
			t.Error("foreign key was wrong value", a.Pubkey, first.TokenB)
		}
		if a.Pubkey != second.TokenB {
			t.Error("foreign key was wrong value", a.Pubkey, second.TokenB)
		}

		if first.R.TokenBToken != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TokenBToken != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TokenBTokenPairs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TokenBTokenPairs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TokenBTokenPairs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTokenToManyAddOpBaseTokenPrices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c, d, e TokenPrice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TokenPrice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TokenPrice{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBaseTokenPrices(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Pubkey, first.Base) {
			t.Error("foreign key was wrong value", a.Pubkey, first.Base)
		}
		if !queries.Equal(a.Pubkey, second.Base) {
			t.Error("foreign key was wrong value", a.Pubkey, second.Base)
		}

		if first.R.BaseToken != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BaseToken != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BaseTokenPrices[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BaseTokenPrices[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BaseTokenPrices().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTokenToManySetOpBaseTokenPrices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c, d, e TokenPrice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TokenPrice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetBaseTokenPrices(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.BaseTokenPrices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetBaseTokenPrices(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.BaseTokenPrices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Base) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Base) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Pubkey, d.Base) {
		t.Error("foreign key was wrong value", a.Pubkey, d.Base)
	}
	if !queries.Equal(a.Pubkey, e.Base) {
		t.Error("foreign key was wrong value", a.Pubkey, e.Base)
	}

	if b.R.BaseToken != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BaseToken != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BaseToken != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.BaseToken != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.BaseTokenPrices[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.BaseTokenPrices[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTokenToManyRemoveOpBaseTokenPrices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c, d, e TokenPrice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TokenPrice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddBaseTokenPrices(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.BaseTokenPrices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveBaseTokenPrices(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.BaseTokenPrices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Base) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Base) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.BaseToken != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BaseToken != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BaseToken != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.BaseToken != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.BaseTokenPrices) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.BaseTokenPrices[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.BaseTokenPrices[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTokenToManyAddOpQuoteTokenPrices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c, d, e TokenPrice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TokenPrice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TokenPrice{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddQuoteTokenPrices(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Pubkey, first.Quote) {
			t.Error("foreign key was wrong value", a.Pubkey, first.Quote)
		}
		if !queries.Equal(a.Pubkey, second.Quote) {
			t.Error("foreign key was wrong value", a.Pubkey, second.Quote)
		}

		if first.R.QuoteToken != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.QuoteToken != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.QuoteTokenPrices[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.QuoteTokenPrices[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.QuoteTokenPrices().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTokenToManySetOpQuoteTokenPrices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c, d, e TokenPrice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TokenPrice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetQuoteTokenPrices(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.QuoteTokenPrices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetQuoteTokenPrices(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.QuoteTokenPrices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Quote) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Quote) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Pubkey, d.Quote) {
		t.Error("foreign key was wrong value", a.Pubkey, d.Quote)
	}
	if !queries.Equal(a.Pubkey, e.Quote) {
		t.Error("foreign key was wrong value", a.Pubkey, e.Quote)
	}

	if b.R.QuoteToken != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.QuoteToken != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.QuoteToken != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.QuoteToken != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.QuoteTokenPrices[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.QuoteTokenPrices[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTokenToManyRemoveOpQuoteTokenPrices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Token
	var b, c, d, e TokenPrice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TokenPrice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddQuoteTokenPrices(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.QuoteTokenPrices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveQuoteTokenPrices(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.QuoteTokenPrices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Quote) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Quote) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.QuoteToken != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.QuoteToken != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.QuoteToken != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.QuoteToken != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.QuoteTokenPrices) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.QuoteTokenPrices[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.QuoteTokenPrices[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTokensReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTokensReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TokenSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTokensSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tokenDBTypes = map[string]string{`Pubkey`: `character varying`, `Symbol`: `character varying`, `Decimals`: `smallint`, `IconURL`: `character varying`}
	_            = bytes.MinRead
)

func testTokensUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tokenPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tokenAllColumns) == len(tokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTokensSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tokenAllColumns) == len(tokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Token{}
	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tokenDBTypes, true, tokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tokenAllColumns, tokenPrimaryKeyColumns) {
		fields = tokenAllColumns
	} else {
		fields = strmangle.SetComplement(
			tokenAllColumns,
			tokenPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TokenSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTokensUpsert(t *testing.T) {
	t.Parallel()

	if len(tokenAllColumns) == len(tokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Token{}
	if err = randomize.Struct(seed, &o, tokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Token: %s", err)
	}

	count, err := Tokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tokenDBTypes, false, tokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Token: %s", err)
	}

	count, err = Tokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
