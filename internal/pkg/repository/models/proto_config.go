// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ProtoConfig is an object representing the database table.
type ProtoConfig struct {
	Pubkey               string        `boil:"pubkey" json:"pubkey" toml:"pubkey" yaml:"pubkey"`
	Granularity          types.Decimal `boil:"granularity" json:"granularity" toml:"granularity" yaml:"granularity"`
	TriggerDcaSpread     int16         `boil:"trigger_dca_spread" json:"trigger_dca_spread" toml:"trigger_dca_spread" yaml:"trigger_dca_spread"`
	BaseWithdrawalSpread int16         `boil:"base_withdrawal_spread" json:"base_withdrawal_spread" toml:"base_withdrawal_spread" yaml:"base_withdrawal_spread"`

	R *protoConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L protoConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProtoConfigColumns = struct {
	Pubkey               string
	Granularity          string
	TriggerDcaSpread     string
	BaseWithdrawalSpread string
}{
	Pubkey:               "pubkey",
	Granularity:          "granularity",
	TriggerDcaSpread:     "trigger_dca_spread",
	BaseWithdrawalSpread: "base_withdrawal_spread",
}

var ProtoConfigTableColumns = struct {
	Pubkey               string
	Granularity          string
	TriggerDcaSpread     string
	BaseWithdrawalSpread string
}{
	Pubkey:               "proto_config.pubkey",
	Granularity:          "proto_config.granularity",
	TriggerDcaSpread:     "proto_config.trigger_dca_spread",
	BaseWithdrawalSpread: "proto_config.base_withdrawal_spread",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ProtoConfigWhere = struct {
	Pubkey               whereHelperstring
	Granularity          whereHelpertypes_Decimal
	TriggerDcaSpread     whereHelperint16
	BaseWithdrawalSpread whereHelperint16
}{
	Pubkey:               whereHelperstring{field: "\"proto_config\".\"pubkey\""},
	Granularity:          whereHelpertypes_Decimal{field: "\"proto_config\".\"granularity\""},
	TriggerDcaSpread:     whereHelperint16{field: "\"proto_config\".\"trigger_dca_spread\""},
	BaseWithdrawalSpread: whereHelperint16{field: "\"proto_config\".\"base_withdrawal_spread\""},
}

// ProtoConfigRels is where relationship names are stored.
var ProtoConfigRels = struct {
	Vaults string
}{
	Vaults: "Vaults",
}

// protoConfigR is where relationships are stored.
type protoConfigR struct {
	Vaults VaultSlice `boil:"Vaults" json:"Vaults" toml:"Vaults" yaml:"Vaults"`
}

// NewStruct creates a new relationship struct
func (*protoConfigR) NewStruct() *protoConfigR {
	return &protoConfigR{}
}

func (r *protoConfigR) GetVaults() VaultSlice {
	if r == nil {
		return nil
	}
	return r.Vaults
}

// protoConfigL is where Load methods for each relationship are stored.
type protoConfigL struct{}

var (
	protoConfigAllColumns            = []string{"pubkey", "granularity", "trigger_dca_spread", "base_withdrawal_spread"}
	protoConfigColumnsWithoutDefault = []string{"pubkey", "granularity", "trigger_dca_spread", "base_withdrawal_spread"}
	protoConfigColumnsWithDefault    = []string{}
	protoConfigPrimaryKeyColumns     = []string{"pubkey"}
	protoConfigGeneratedColumns      = []string{}
)

type (
	// ProtoConfigSlice is an alias for a slice of pointers to ProtoConfig.
	// This should almost always be used instead of []ProtoConfig.
	ProtoConfigSlice []*ProtoConfig
	// ProtoConfigHook is the signature for custom ProtoConfig hook methods
	ProtoConfigHook func(context.Context, boil.ContextExecutor, *ProtoConfig) error

	protoConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	protoConfigType                 = reflect.TypeOf(&ProtoConfig{})
	protoConfigMapping              = queries.MakeStructMapping(protoConfigType)
	protoConfigPrimaryKeyMapping, _ = queries.BindMapping(protoConfigType, protoConfigMapping, protoConfigPrimaryKeyColumns)
	protoConfigInsertCacheMut       sync.RWMutex
	protoConfigInsertCache          = make(map[string]insertCache)
	protoConfigUpdateCacheMut       sync.RWMutex
	protoConfigUpdateCache          = make(map[string]updateCache)
	protoConfigUpsertCacheMut       sync.RWMutex
	protoConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var protoConfigAfterSelectHooks []ProtoConfigHook

var protoConfigBeforeInsertHooks []ProtoConfigHook
var protoConfigAfterInsertHooks []ProtoConfigHook

var protoConfigBeforeUpdateHooks []ProtoConfigHook
var protoConfigAfterUpdateHooks []ProtoConfigHook

var protoConfigBeforeDeleteHooks []ProtoConfigHook
var protoConfigAfterDeleteHooks []ProtoConfigHook

var protoConfigBeforeUpsertHooks []ProtoConfigHook
var protoConfigAfterUpsertHooks []ProtoConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProtoConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protoConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProtoConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protoConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProtoConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protoConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProtoConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protoConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProtoConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protoConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProtoConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protoConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProtoConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protoConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProtoConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protoConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProtoConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protoConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProtoConfigHook registers your hook function for all future operations.
func AddProtoConfigHook(hookPoint boil.HookPoint, protoConfigHook ProtoConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		protoConfigAfterSelectHooks = append(protoConfigAfterSelectHooks, protoConfigHook)
	case boil.BeforeInsertHook:
		protoConfigBeforeInsertHooks = append(protoConfigBeforeInsertHooks, protoConfigHook)
	case boil.AfterInsertHook:
		protoConfigAfterInsertHooks = append(protoConfigAfterInsertHooks, protoConfigHook)
	case boil.BeforeUpdateHook:
		protoConfigBeforeUpdateHooks = append(protoConfigBeforeUpdateHooks, protoConfigHook)
	case boil.AfterUpdateHook:
		protoConfigAfterUpdateHooks = append(protoConfigAfterUpdateHooks, protoConfigHook)
	case boil.BeforeDeleteHook:
		protoConfigBeforeDeleteHooks = append(protoConfigBeforeDeleteHooks, protoConfigHook)
	case boil.AfterDeleteHook:
		protoConfigAfterDeleteHooks = append(protoConfigAfterDeleteHooks, protoConfigHook)
	case boil.BeforeUpsertHook:
		protoConfigBeforeUpsertHooks = append(protoConfigBeforeUpsertHooks, protoConfigHook)
	case boil.AfterUpsertHook:
		protoConfigAfterUpsertHooks = append(protoConfigAfterUpsertHooks, protoConfigHook)
	}
}

// One returns a single protoConfig record from the query.
func (q protoConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProtoConfig, error) {
	o := &ProtoConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for proto_config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProtoConfig records from the query.
func (q protoConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProtoConfigSlice, error) {
	var o []*ProtoConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProtoConfig slice")
	}

	if len(protoConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProtoConfig records in the query.
func (q protoConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count proto_config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q protoConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if proto_config exists")
	}

	return count > 0, nil
}

// Vaults retrieves all the vault's Vaults with an executor.
func (o *ProtoConfig) Vaults(mods ...qm.QueryMod) vaultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vault\".\"proto_config\"=?", o.Pubkey),
	)

	return Vaults(queryMods...)
}

// LoadVaults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (protoConfigL) LoadVaults(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProtoConfig interface{}, mods queries.Applicator) error {
	var slice []*ProtoConfig
	var object *ProtoConfig

	if singular {
		object = maybeProtoConfig.(*ProtoConfig)
	} else {
		slice = *maybeProtoConfig.(*[]*ProtoConfig)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &protoConfigR{}
		}
		args = append(args, object.Pubkey)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &protoConfigR{}
			}

			for _, a := range args {
				if a == obj.Pubkey {
					continue Outer
				}
			}

			args = append(args, obj.Pubkey)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vault`),
		qm.WhereIn(`vault.proto_config in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vault")
	}

	var resultSlice []*Vault
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vault")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vault")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vault")
	}

	if len(vaultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Vaults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vaultR{}
			}
			foreign.R.VaultProtoConfig = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Pubkey == foreign.ProtoConfig {
				local.R.Vaults = append(local.R.Vaults, foreign)
				if foreign.R == nil {
					foreign.R = &vaultR{}
				}
				foreign.R.VaultProtoConfig = local
				break
			}
		}
	}

	return nil
}

// AddVaults adds the given related objects to the existing relationships
// of the proto_config, optionally inserting them as new records.
// Appends related to o.R.Vaults.
// Sets related.R.VaultProtoConfig appropriately.
func (o *ProtoConfig) AddVaults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vault) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProtoConfig = o.Pubkey
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vault\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"proto_config"}),
				strmangle.WhereClause("\"", "\"", 2, vaultPrimaryKeyColumns),
			)
			values := []interface{}{o.Pubkey, rel.Pubkey}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProtoConfig = o.Pubkey
		}
	}

	if o.R == nil {
		o.R = &protoConfigR{
			Vaults: related,
		}
	} else {
		o.R.Vaults = append(o.R.Vaults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vaultR{
				VaultProtoConfig: o,
			}
		} else {
			rel.R.VaultProtoConfig = o
		}
	}
	return nil
}

// ProtoConfigs retrieves all the records using an executor.
func ProtoConfigs(mods ...qm.QueryMod) protoConfigQuery {
	mods = append(mods, qm.From("\"proto_config\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"proto_config\".*"})
	}

	return protoConfigQuery{q}
}

// FindProtoConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProtoConfig(ctx context.Context, exec boil.ContextExecutor, pubkey string, selectCols ...string) (*ProtoConfig, error) {
	protoConfigObj := &ProtoConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"proto_config\" where \"pubkey\"=$1", sel,
	)

	q := queries.Raw(query, pubkey)

	err := q.Bind(ctx, exec, protoConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from proto_config")
	}

	if err = protoConfigObj.doAfterSelectHooks(ctx, exec); err != nil {
		return protoConfigObj, err
	}

	return protoConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProtoConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no proto_config provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(protoConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	protoConfigInsertCacheMut.RLock()
	cache, cached := protoConfigInsertCache[key]
	protoConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			protoConfigAllColumns,
			protoConfigColumnsWithDefault,
			protoConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(protoConfigType, protoConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(protoConfigType, protoConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"proto_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"proto_config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into proto_config")
	}

	if !cached {
		protoConfigInsertCacheMut.Lock()
		protoConfigInsertCache[key] = cache
		protoConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProtoConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProtoConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	protoConfigUpdateCacheMut.RLock()
	cache, cached := protoConfigUpdateCache[key]
	protoConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			protoConfigAllColumns,
			protoConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update proto_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"proto_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, protoConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(protoConfigType, protoConfigMapping, append(wl, protoConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update proto_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for proto_config")
	}

	if !cached {
		protoConfigUpdateCacheMut.Lock()
		protoConfigUpdateCache[key] = cache
		protoConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q protoConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for proto_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for proto_config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProtoConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), protoConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"proto_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, protoConfigPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in protoConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all protoConfig")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProtoConfig) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no proto_config provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(protoConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	protoConfigUpsertCacheMut.RLock()
	cache, cached := protoConfigUpsertCache[key]
	protoConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			protoConfigAllColumns,
			protoConfigColumnsWithDefault,
			protoConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			protoConfigAllColumns,
			protoConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert proto_config, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(protoConfigPrimaryKeyColumns))
			copy(conflict, protoConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"proto_config\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(protoConfigType, protoConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(protoConfigType, protoConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert proto_config")
	}

	if !cached {
		protoConfigUpsertCacheMut.Lock()
		protoConfigUpsertCache[key] = cache
		protoConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProtoConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProtoConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProtoConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), protoConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"proto_config\" WHERE \"pubkey\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from proto_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for proto_config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q protoConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no protoConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from proto_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for proto_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProtoConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(protoConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), protoConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"proto_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, protoConfigPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from protoConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for proto_config")
	}

	if len(protoConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProtoConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProtoConfig(ctx, exec, o.Pubkey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProtoConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProtoConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), protoConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"proto_config\".* FROM \"proto_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, protoConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProtoConfigSlice")
	}

	*o = slice

	return nil
}

// ProtoConfigExists checks if the ProtoConfig row exists.
func ProtoConfigExists(ctx context.Context, exec boil.ContextExecutor, pubkey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"proto_config\" where \"pubkey\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pubkey)
	}
	row := exec.QueryRowContext(ctx, sql, pubkey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if proto_config exists")
	}

	return exists, nil
}
