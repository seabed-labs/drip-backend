// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Positions", testPositions)
	t.Run("ProtoConfigs", testProtoConfigs)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("SourceReferences", testSourceReferences)
	t.Run("Tokens", testTokens)
	t.Run("TokenPairs", testTokenPairs)
	t.Run("TokenPrices", testTokenPrices)
	t.Run("TokenSwaps", testTokenSwaps)
	t.Run("UserPositions", testUserPositions)
	t.Run("Vaults", testVaults)
	t.Run("VaultPeriods", testVaultPeriods)
}

func TestDelete(t *testing.T) {
	t.Run("Positions", testPositionsDelete)
	t.Run("ProtoConfigs", testProtoConfigsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("SourceReferences", testSourceReferencesDelete)
	t.Run("Tokens", testTokensDelete)
	t.Run("TokenPairs", testTokenPairsDelete)
	t.Run("TokenPrices", testTokenPricesDelete)
	t.Run("TokenSwaps", testTokenSwapsDelete)
	t.Run("UserPositions", testUserPositionsDelete)
	t.Run("Vaults", testVaultsDelete)
	t.Run("VaultPeriods", testVaultPeriodsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Positions", testPositionsQueryDeleteAll)
	t.Run("ProtoConfigs", testProtoConfigsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("SourceReferences", testSourceReferencesQueryDeleteAll)
	t.Run("Tokens", testTokensQueryDeleteAll)
	t.Run("TokenPairs", testTokenPairsQueryDeleteAll)
	t.Run("TokenPrices", testTokenPricesQueryDeleteAll)
	t.Run("TokenSwaps", testTokenSwapsQueryDeleteAll)
	t.Run("UserPositions", testUserPositionsQueryDeleteAll)
	t.Run("Vaults", testVaultsQueryDeleteAll)
	t.Run("VaultPeriods", testVaultPeriodsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Positions", testPositionsSliceDeleteAll)
	t.Run("ProtoConfigs", testProtoConfigsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("SourceReferences", testSourceReferencesSliceDeleteAll)
	t.Run("Tokens", testTokensSliceDeleteAll)
	t.Run("TokenPairs", testTokenPairsSliceDeleteAll)
	t.Run("TokenPrices", testTokenPricesSliceDeleteAll)
	t.Run("TokenSwaps", testTokenSwapsSliceDeleteAll)
	t.Run("UserPositions", testUserPositionsSliceDeleteAll)
	t.Run("Vaults", testVaultsSliceDeleteAll)
	t.Run("VaultPeriods", testVaultPeriodsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Positions", testPositionsExists)
	t.Run("ProtoConfigs", testProtoConfigsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("SourceReferences", testSourceReferencesExists)
	t.Run("Tokens", testTokensExists)
	t.Run("TokenPairs", testTokenPairsExists)
	t.Run("TokenPrices", testTokenPricesExists)
	t.Run("TokenSwaps", testTokenSwapsExists)
	t.Run("UserPositions", testUserPositionsExists)
	t.Run("Vaults", testVaultsExists)
	t.Run("VaultPeriods", testVaultPeriodsExists)
}

func TestFind(t *testing.T) {
	t.Run("Positions", testPositionsFind)
	t.Run("ProtoConfigs", testProtoConfigsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("SourceReferences", testSourceReferencesFind)
	t.Run("Tokens", testTokensFind)
	t.Run("TokenPairs", testTokenPairsFind)
	t.Run("TokenPrices", testTokenPricesFind)
	t.Run("TokenSwaps", testTokenSwapsFind)
	t.Run("UserPositions", testUserPositionsFind)
	t.Run("Vaults", testVaultsFind)
	t.Run("VaultPeriods", testVaultPeriodsFind)
}

func TestBind(t *testing.T) {
	t.Run("Positions", testPositionsBind)
	t.Run("ProtoConfigs", testProtoConfigsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("SourceReferences", testSourceReferencesBind)
	t.Run("Tokens", testTokensBind)
	t.Run("TokenPairs", testTokenPairsBind)
	t.Run("TokenPrices", testTokenPricesBind)
	t.Run("TokenSwaps", testTokenSwapsBind)
	t.Run("UserPositions", testUserPositionsBind)
	t.Run("Vaults", testVaultsBind)
	t.Run("VaultPeriods", testVaultPeriodsBind)
}

func TestOne(t *testing.T) {
	t.Run("Positions", testPositionsOne)
	t.Run("ProtoConfigs", testProtoConfigsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("SourceReferences", testSourceReferencesOne)
	t.Run("Tokens", testTokensOne)
	t.Run("TokenPairs", testTokenPairsOne)
	t.Run("TokenPrices", testTokenPricesOne)
	t.Run("TokenSwaps", testTokenSwapsOne)
	t.Run("UserPositions", testUserPositionsOne)
	t.Run("Vaults", testVaultsOne)
	t.Run("VaultPeriods", testVaultPeriodsOne)
}

func TestAll(t *testing.T) {
	t.Run("Positions", testPositionsAll)
	t.Run("ProtoConfigs", testProtoConfigsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("SourceReferences", testSourceReferencesAll)
	t.Run("Tokens", testTokensAll)
	t.Run("TokenPairs", testTokenPairsAll)
	t.Run("TokenPrices", testTokenPricesAll)
	t.Run("TokenSwaps", testTokenSwapsAll)
	t.Run("UserPositions", testUserPositionsAll)
	t.Run("Vaults", testVaultsAll)
	t.Run("VaultPeriods", testVaultPeriodsAll)
}

func TestCount(t *testing.T) {
	t.Run("Positions", testPositionsCount)
	t.Run("ProtoConfigs", testProtoConfigsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("SourceReferences", testSourceReferencesCount)
	t.Run("Tokens", testTokensCount)
	t.Run("TokenPairs", testTokenPairsCount)
	t.Run("TokenPrices", testTokenPricesCount)
	t.Run("TokenSwaps", testTokenSwapsCount)
	t.Run("UserPositions", testUserPositionsCount)
	t.Run("Vaults", testVaultsCount)
	t.Run("VaultPeriods", testVaultPeriodsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Positions", testPositionsHooks)
	t.Run("ProtoConfigs", testProtoConfigsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("SourceReferences", testSourceReferencesHooks)
	t.Run("Tokens", testTokensHooks)
	t.Run("TokenPairs", testTokenPairsHooks)
	t.Run("TokenPrices", testTokenPricesHooks)
	t.Run("TokenSwaps", testTokenSwapsHooks)
	t.Run("UserPositions", testUserPositionsHooks)
	t.Run("Vaults", testVaultsHooks)
	t.Run("VaultPeriods", testVaultPeriodsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Positions", testPositionsInsert)
	t.Run("Positions", testPositionsInsertWhitelist)
	t.Run("ProtoConfigs", testProtoConfigsInsert)
	t.Run("ProtoConfigs", testProtoConfigsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("SourceReferences", testSourceReferencesInsert)
	t.Run("SourceReferences", testSourceReferencesInsertWhitelist)
	t.Run("Tokens", testTokensInsert)
	t.Run("Tokens", testTokensInsertWhitelist)
	t.Run("TokenPairs", testTokenPairsInsert)
	t.Run("TokenPairs", testTokenPairsInsertWhitelist)
	t.Run("TokenPrices", testTokenPricesInsert)
	t.Run("TokenPrices", testTokenPricesInsertWhitelist)
	t.Run("TokenSwaps", testTokenSwapsInsert)
	t.Run("TokenSwaps", testTokenSwapsInsertWhitelist)
	t.Run("UserPositions", testUserPositionsInsert)
	t.Run("UserPositions", testUserPositionsInsertWhitelist)
	t.Run("Vaults", testVaultsInsert)
	t.Run("Vaults", testVaultsInsertWhitelist)
	t.Run("VaultPeriods", testVaultPeriodsInsert)
	t.Run("VaultPeriods", testVaultPeriodsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("PositionToVaultUsingPositionVault", testPositionToOneVaultUsingPositionVault)
	t.Run("TokenPairToTokenUsingTokenAToken", testTokenPairToOneTokenUsingTokenAToken)
	t.Run("TokenPairToTokenUsingTokenBToken", testTokenPairToOneTokenUsingTokenBToken)
	t.Run("TokenPriceToTokenUsingBaseToken", testTokenPriceToOneTokenUsingBaseToken)
	t.Run("TokenPriceToTokenUsingQuoteToken", testTokenPriceToOneTokenUsingQuoteToken)
	t.Run("TokenPriceToSourceReferenceUsingSourceSourceReference", testTokenPriceToOneSourceReferenceUsingSourceSourceReference)
	t.Run("TokenSwapToTokenPairUsingPairTokenPair", testTokenSwapToOneTokenPairUsingPairTokenPair)
	t.Run("VaultToProtoConfigUsingVaultProtoConfig", testVaultToOneProtoConfigUsingVaultProtoConfig)
	t.Run("VaultPeriodToVaultUsingVaultPeriodVault", testVaultPeriodToOneVaultUsingVaultPeriodVault)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ProtoConfigToVaults", testProtoConfigToManyVaults)
	t.Run("SourceReferenceToSourceTokenPrices", testSourceReferenceToManySourceTokenPrices)
	t.Run("TokenToTokenATokenPairs", testTokenToManyTokenATokenPairs)
	t.Run("TokenToTokenBTokenPairs", testTokenToManyTokenBTokenPairs)
	t.Run("TokenToBaseTokenPrices", testTokenToManyBaseTokenPrices)
	t.Run("TokenToQuoteTokenPrices", testTokenToManyQuoteTokenPrices)
	t.Run("TokenPairToPairTokenSwaps", testTokenPairToManyPairTokenSwaps)
	t.Run("VaultToPositions", testVaultToManyPositions)
	t.Run("VaultToVaultPeriods", testVaultToManyVaultPeriods)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("PositionToVaultUsingPositions", testPositionToOneSetOpVaultUsingPositionVault)
	t.Run("TokenPairToTokenUsingTokenATokenPairs", testTokenPairToOneSetOpTokenUsingTokenAToken)
	t.Run("TokenPairToTokenUsingTokenBTokenPairs", testTokenPairToOneSetOpTokenUsingTokenBToken)
	t.Run("TokenPriceToTokenUsingBaseTokenPrices", testTokenPriceToOneSetOpTokenUsingBaseToken)
	t.Run("TokenPriceToTokenUsingQuoteTokenPrices", testTokenPriceToOneSetOpTokenUsingQuoteToken)
	t.Run("TokenPriceToSourceReferenceUsingSourceTokenPrices", testTokenPriceToOneSetOpSourceReferenceUsingSourceSourceReference)
	t.Run("TokenSwapToTokenPairUsingPairTokenSwaps", testTokenSwapToOneSetOpTokenPairUsingPairTokenPair)
	t.Run("VaultToProtoConfigUsingVaults", testVaultToOneSetOpProtoConfigUsingVaultProtoConfig)
	t.Run("VaultPeriodToVaultUsingVaultPeriods", testVaultPeriodToOneSetOpVaultUsingVaultPeriodVault)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("TokenPriceToTokenUsingBaseTokenPrices", testTokenPriceToOneRemoveOpTokenUsingBaseToken)
	t.Run("TokenPriceToTokenUsingQuoteTokenPrices", testTokenPriceToOneRemoveOpTokenUsingQuoteToken)
	t.Run("TokenPriceToSourceReferenceUsingSourceTokenPrices", testTokenPriceToOneRemoveOpSourceReferenceUsingSourceSourceReference)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ProtoConfigToVaults", testProtoConfigToManyAddOpVaults)
	t.Run("SourceReferenceToSourceTokenPrices", testSourceReferenceToManyAddOpSourceTokenPrices)
	t.Run("TokenToTokenATokenPairs", testTokenToManyAddOpTokenATokenPairs)
	t.Run("TokenToTokenBTokenPairs", testTokenToManyAddOpTokenBTokenPairs)
	t.Run("TokenToBaseTokenPrices", testTokenToManyAddOpBaseTokenPrices)
	t.Run("TokenToQuoteTokenPrices", testTokenToManyAddOpQuoteTokenPrices)
	t.Run("TokenPairToPairTokenSwaps", testTokenPairToManyAddOpPairTokenSwaps)
	t.Run("VaultToPositions", testVaultToManyAddOpPositions)
	t.Run("VaultToVaultPeriods", testVaultToManyAddOpVaultPeriods)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("SourceReferenceToSourceTokenPrices", testSourceReferenceToManySetOpSourceTokenPrices)
	t.Run("TokenToBaseTokenPrices", testTokenToManySetOpBaseTokenPrices)
	t.Run("TokenToQuoteTokenPrices", testTokenToManySetOpQuoteTokenPrices)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("SourceReferenceToSourceTokenPrices", testSourceReferenceToManyRemoveOpSourceTokenPrices)
	t.Run("TokenToBaseTokenPrices", testTokenToManyRemoveOpBaseTokenPrices)
	t.Run("TokenToQuoteTokenPrices", testTokenToManyRemoveOpQuoteTokenPrices)
}

func TestReload(t *testing.T) {
	t.Run("Positions", testPositionsReload)
	t.Run("ProtoConfigs", testProtoConfigsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("SourceReferences", testSourceReferencesReload)
	t.Run("Tokens", testTokensReload)
	t.Run("TokenPairs", testTokenPairsReload)
	t.Run("TokenPrices", testTokenPricesReload)
	t.Run("TokenSwaps", testTokenSwapsReload)
	t.Run("UserPositions", testUserPositionsReload)
	t.Run("Vaults", testVaultsReload)
	t.Run("VaultPeriods", testVaultPeriodsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Positions", testPositionsReloadAll)
	t.Run("ProtoConfigs", testProtoConfigsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("SourceReferences", testSourceReferencesReloadAll)
	t.Run("Tokens", testTokensReloadAll)
	t.Run("TokenPairs", testTokenPairsReloadAll)
	t.Run("TokenPrices", testTokenPricesReloadAll)
	t.Run("TokenSwaps", testTokenSwapsReloadAll)
	t.Run("UserPositions", testUserPositionsReloadAll)
	t.Run("Vaults", testVaultsReloadAll)
	t.Run("VaultPeriods", testVaultPeriodsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Positions", testPositionsSelect)
	t.Run("ProtoConfigs", testProtoConfigsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("SourceReferences", testSourceReferencesSelect)
	t.Run("Tokens", testTokensSelect)
	t.Run("TokenPairs", testTokenPairsSelect)
	t.Run("TokenPrices", testTokenPricesSelect)
	t.Run("TokenSwaps", testTokenSwapsSelect)
	t.Run("UserPositions", testUserPositionsSelect)
	t.Run("Vaults", testVaultsSelect)
	t.Run("VaultPeriods", testVaultPeriodsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Positions", testPositionsUpdate)
	t.Run("ProtoConfigs", testProtoConfigsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("SourceReferences", testSourceReferencesUpdate)
	t.Run("Tokens", testTokensUpdate)
	t.Run("TokenPairs", testTokenPairsUpdate)
	t.Run("TokenPrices", testTokenPricesUpdate)
	t.Run("TokenSwaps", testTokenSwapsUpdate)
	t.Run("UserPositions", testUserPositionsUpdate)
	t.Run("Vaults", testVaultsUpdate)
	t.Run("VaultPeriods", testVaultPeriodsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Positions", testPositionsSliceUpdateAll)
	t.Run("ProtoConfigs", testProtoConfigsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("SourceReferences", testSourceReferencesSliceUpdateAll)
	t.Run("Tokens", testTokensSliceUpdateAll)
	t.Run("TokenPairs", testTokenPairsSliceUpdateAll)
	t.Run("TokenPrices", testTokenPricesSliceUpdateAll)
	t.Run("TokenSwaps", testTokenSwapsSliceUpdateAll)
	t.Run("UserPositions", testUserPositionsSliceUpdateAll)
	t.Run("Vaults", testVaultsSliceUpdateAll)
	t.Run("VaultPeriods", testVaultPeriodsSliceUpdateAll)
}
