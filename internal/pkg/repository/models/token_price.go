// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// TokenPrice is an object representing the database table.
type TokenPrice struct {
	ID     int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	Base   null.String   `boil:"base" json:"base,omitempty" toml:"base" yaml:"base,omitempty"`
	Quote  null.String   `boil:"quote" json:"quote,omitempty" toml:"quote" yaml:"quote,omitempty"`
	Close  types.Decimal `boil:"close" json:"close" toml:"close" yaml:"close"`
	Date   time.Time     `boil:"date" json:"date" toml:"date" yaml:"date"`
	Source null.String   `boil:"source" json:"source,omitempty" toml:"source" yaml:"source,omitempty"`

	R *tokenPriceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tokenPriceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TokenPriceColumns = struct {
	ID     string
	Base   string
	Quote  string
	Close  string
	Date   string
	Source string
}{
	ID:     "id",
	Base:   "base",
	Quote:  "quote",
	Close:  "close",
	Date:   "date",
	Source: "source",
}

var TokenPriceTableColumns = struct {
	ID     string
	Base   string
	Quote  string
	Close  string
	Date   string
	Source string
}{
	ID:     "token_price.id",
	Base:   "token_price.base",
	Quote:  "token_price.quote",
	Close:  "token_price.close",
	Date:   "token_price.date",
	Source: "token_price.source",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var TokenPriceWhere = struct {
	ID     whereHelperint
	Base   whereHelpernull_String
	Quote  whereHelpernull_String
	Close  whereHelpertypes_Decimal
	Date   whereHelpertime_Time
	Source whereHelpernull_String
}{
	ID:     whereHelperint{field: "\"token_price\".\"id\""},
	Base:   whereHelpernull_String{field: "\"token_price\".\"base\""},
	Quote:  whereHelpernull_String{field: "\"token_price\".\"quote\""},
	Close:  whereHelpertypes_Decimal{field: "\"token_price\".\"close\""},
	Date:   whereHelpertime_Time{field: "\"token_price\".\"date\""},
	Source: whereHelpernull_String{field: "\"token_price\".\"source\""},
}

// TokenPriceRels is where relationship names are stored.
var TokenPriceRels = struct {
	BaseToken             string
	QuoteToken            string
	SourceSourceReference string
}{
	BaseToken:             "BaseToken",
	QuoteToken:            "QuoteToken",
	SourceSourceReference: "SourceSourceReference",
}

// tokenPriceR is where relationships are stored.
type tokenPriceR struct {
	BaseToken             *Token           `boil:"BaseToken" json:"BaseToken" toml:"BaseToken" yaml:"BaseToken"`
	QuoteToken            *Token           `boil:"QuoteToken" json:"QuoteToken" toml:"QuoteToken" yaml:"QuoteToken"`
	SourceSourceReference *SourceReference `boil:"SourceSourceReference" json:"SourceSourceReference" toml:"SourceSourceReference" yaml:"SourceSourceReference"`
}

// NewStruct creates a new relationship struct
func (*tokenPriceR) NewStruct() *tokenPriceR {
	return &tokenPriceR{}
}

func (r *tokenPriceR) GetBaseToken() *Token {
	if r == nil {
		return nil
	}
	return r.BaseToken
}

func (r *tokenPriceR) GetQuoteToken() *Token {
	if r == nil {
		return nil
	}
	return r.QuoteToken
}

func (r *tokenPriceR) GetSourceSourceReference() *SourceReference {
	if r == nil {
		return nil
	}
	return r.SourceSourceReference
}

// tokenPriceL is where Load methods for each relationship are stored.
type tokenPriceL struct{}

var (
	tokenPriceAllColumns            = []string{"id", "base", "quote", "close", "date", "source"}
	tokenPriceColumnsWithoutDefault = []string{"close", "date"}
	tokenPriceColumnsWithDefault    = []string{"id", "base", "quote", "source"}
	tokenPricePrimaryKeyColumns     = []string{"id"}
	tokenPriceGeneratedColumns      = []string{}
)

type (
	// TokenPriceSlice is an alias for a slice of pointers to TokenPrice.
	// This should almost always be used instead of []TokenPrice.
	TokenPriceSlice []*TokenPrice
	// TokenPriceHook is the signature for custom TokenPrice hook methods
	TokenPriceHook func(context.Context, boil.ContextExecutor, *TokenPrice) error

	tokenPriceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tokenPriceType                 = reflect.TypeOf(&TokenPrice{})
	tokenPriceMapping              = queries.MakeStructMapping(tokenPriceType)
	tokenPricePrimaryKeyMapping, _ = queries.BindMapping(tokenPriceType, tokenPriceMapping, tokenPricePrimaryKeyColumns)
	tokenPriceInsertCacheMut       sync.RWMutex
	tokenPriceInsertCache          = make(map[string]insertCache)
	tokenPriceUpdateCacheMut       sync.RWMutex
	tokenPriceUpdateCache          = make(map[string]updateCache)
	tokenPriceUpsertCacheMut       sync.RWMutex
	tokenPriceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tokenPriceAfterSelectHooks []TokenPriceHook

var tokenPriceBeforeInsertHooks []TokenPriceHook
var tokenPriceAfterInsertHooks []TokenPriceHook

var tokenPriceBeforeUpdateHooks []TokenPriceHook
var tokenPriceAfterUpdateHooks []TokenPriceHook

var tokenPriceBeforeDeleteHooks []TokenPriceHook
var tokenPriceAfterDeleteHooks []TokenPriceHook

var tokenPriceBeforeUpsertHooks []TokenPriceHook
var tokenPriceAfterUpsertHooks []TokenPriceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TokenPrice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPriceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TokenPrice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPriceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TokenPrice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPriceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TokenPrice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPriceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TokenPrice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPriceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TokenPrice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPriceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TokenPrice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPriceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TokenPrice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPriceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TokenPrice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPriceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTokenPriceHook registers your hook function for all future operations.
func AddTokenPriceHook(hookPoint boil.HookPoint, tokenPriceHook TokenPriceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tokenPriceAfterSelectHooks = append(tokenPriceAfterSelectHooks, tokenPriceHook)
	case boil.BeforeInsertHook:
		tokenPriceBeforeInsertHooks = append(tokenPriceBeforeInsertHooks, tokenPriceHook)
	case boil.AfterInsertHook:
		tokenPriceAfterInsertHooks = append(tokenPriceAfterInsertHooks, tokenPriceHook)
	case boil.BeforeUpdateHook:
		tokenPriceBeforeUpdateHooks = append(tokenPriceBeforeUpdateHooks, tokenPriceHook)
	case boil.AfterUpdateHook:
		tokenPriceAfterUpdateHooks = append(tokenPriceAfterUpdateHooks, tokenPriceHook)
	case boil.BeforeDeleteHook:
		tokenPriceBeforeDeleteHooks = append(tokenPriceBeforeDeleteHooks, tokenPriceHook)
	case boil.AfterDeleteHook:
		tokenPriceAfterDeleteHooks = append(tokenPriceAfterDeleteHooks, tokenPriceHook)
	case boil.BeforeUpsertHook:
		tokenPriceBeforeUpsertHooks = append(tokenPriceBeforeUpsertHooks, tokenPriceHook)
	case boil.AfterUpsertHook:
		tokenPriceAfterUpsertHooks = append(tokenPriceAfterUpsertHooks, tokenPriceHook)
	}
}

// One returns a single tokenPrice record from the query.
func (q tokenPriceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TokenPrice, error) {
	o := &TokenPrice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for token_price")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TokenPrice records from the query.
func (q tokenPriceQuery) All(ctx context.Context, exec boil.ContextExecutor) (TokenPriceSlice, error) {
	var o []*TokenPrice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TokenPrice slice")
	}

	if len(tokenPriceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TokenPrice records in the query.
func (q tokenPriceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count token_price rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tokenPriceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if token_price exists")
	}

	return count > 0, nil
}

// BaseToken pointed to by the foreign key.
func (o *TokenPrice) BaseToken(mods ...qm.QueryMod) tokenQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pubkey\" = ?", o.Base),
	}

	queryMods = append(queryMods, mods...)

	return Tokens(queryMods...)
}

// QuoteToken pointed to by the foreign key.
func (o *TokenPrice) QuoteToken(mods ...qm.QueryMod) tokenQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pubkey\" = ?", o.Quote),
	}

	queryMods = append(queryMods, mods...)

	return Tokens(queryMods...)
}

// SourceSourceReference pointed to by the foreign key.
func (o *TokenPrice) SourceSourceReference(mods ...qm.QueryMod) sourceReferenceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"value\" = ?", o.Source),
	}

	queryMods = append(queryMods, mods...)

	return SourceReferences(queryMods...)
}

// LoadBaseToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tokenPriceL) LoadBaseToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTokenPrice interface{}, mods queries.Applicator) error {
	var slice []*TokenPrice
	var object *TokenPrice

	if singular {
		object = maybeTokenPrice.(*TokenPrice)
	} else {
		slice = *maybeTokenPrice.(*[]*TokenPrice)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tokenPriceR{}
		}
		if !queries.IsNil(object.Base) {
			args = append(args, object.Base)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenPriceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Base) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Base) {
				args = append(args, obj.Base)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`token`),
		qm.WhereIn(`token.pubkey in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Token")
	}

	var resultSlice []*Token
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Token")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for token")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token")
	}

	if len(tokenPriceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BaseToken = foreign
		if foreign.R == nil {
			foreign.R = &tokenR{}
		}
		foreign.R.BaseTokenPrices = append(foreign.R.BaseTokenPrices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Base, foreign.Pubkey) {
				local.R.BaseToken = foreign
				if foreign.R == nil {
					foreign.R = &tokenR{}
				}
				foreign.R.BaseTokenPrices = append(foreign.R.BaseTokenPrices, local)
				break
			}
		}
	}

	return nil
}

// LoadQuoteToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tokenPriceL) LoadQuoteToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTokenPrice interface{}, mods queries.Applicator) error {
	var slice []*TokenPrice
	var object *TokenPrice

	if singular {
		object = maybeTokenPrice.(*TokenPrice)
	} else {
		slice = *maybeTokenPrice.(*[]*TokenPrice)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tokenPriceR{}
		}
		if !queries.IsNil(object.Quote) {
			args = append(args, object.Quote)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenPriceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Quote) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Quote) {
				args = append(args, obj.Quote)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`token`),
		qm.WhereIn(`token.pubkey in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Token")
	}

	var resultSlice []*Token
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Token")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for token")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token")
	}

	if len(tokenPriceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QuoteToken = foreign
		if foreign.R == nil {
			foreign.R = &tokenR{}
		}
		foreign.R.QuoteTokenPrices = append(foreign.R.QuoteTokenPrices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Quote, foreign.Pubkey) {
				local.R.QuoteToken = foreign
				if foreign.R == nil {
					foreign.R = &tokenR{}
				}
				foreign.R.QuoteTokenPrices = append(foreign.R.QuoteTokenPrices, local)
				break
			}
		}
	}

	return nil
}

// LoadSourceSourceReference allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tokenPriceL) LoadSourceSourceReference(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTokenPrice interface{}, mods queries.Applicator) error {
	var slice []*TokenPrice
	var object *TokenPrice

	if singular {
		object = maybeTokenPrice.(*TokenPrice)
	} else {
		slice = *maybeTokenPrice.(*[]*TokenPrice)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tokenPriceR{}
		}
		if !queries.IsNil(object.Source) {
			args = append(args, object.Source)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenPriceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Source) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Source) {
				args = append(args, obj.Source)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`source_reference`),
		qm.WhereIn(`source_reference.value in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SourceReference")
	}

	var resultSlice []*SourceReference
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SourceReference")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for source_reference")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for source_reference")
	}

	if len(tokenPriceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SourceSourceReference = foreign
		if foreign.R == nil {
			foreign.R = &sourceReferenceR{}
		}
		foreign.R.SourceTokenPrices = append(foreign.R.SourceTokenPrices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Source, foreign.Value) {
				local.R.SourceSourceReference = foreign
				if foreign.R == nil {
					foreign.R = &sourceReferenceR{}
				}
				foreign.R.SourceTokenPrices = append(foreign.R.SourceTokenPrices, local)
				break
			}
		}
	}

	return nil
}

// SetBaseToken of the tokenPrice to the related item.
// Sets o.R.BaseToken to related.
// Adds o to related.R.BaseTokenPrices.
func (o *TokenPrice) SetBaseToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Token) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"token_price\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"base"}),
		strmangle.WhereClause("\"", "\"", 2, tokenPricePrimaryKeyColumns),
	)
	values := []interface{}{related.Pubkey, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Base, related.Pubkey)
	if o.R == nil {
		o.R = &tokenPriceR{
			BaseToken: related,
		}
	} else {
		o.R.BaseToken = related
	}

	if related.R == nil {
		related.R = &tokenR{
			BaseTokenPrices: TokenPriceSlice{o},
		}
	} else {
		related.R.BaseTokenPrices = append(related.R.BaseTokenPrices, o)
	}

	return nil
}

// RemoveBaseToken relationship.
// Sets o.R.BaseToken to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TokenPrice) RemoveBaseToken(ctx context.Context, exec boil.ContextExecutor, related *Token) error {
	var err error

	queries.SetScanner(&o.Base, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("base")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BaseToken = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BaseTokenPrices {
		if queries.Equal(o.Base, ri.Base) {
			continue
		}

		ln := len(related.R.BaseTokenPrices)
		if ln > 1 && i < ln-1 {
			related.R.BaseTokenPrices[i] = related.R.BaseTokenPrices[ln-1]
		}
		related.R.BaseTokenPrices = related.R.BaseTokenPrices[:ln-1]
		break
	}
	return nil
}

// SetQuoteToken of the tokenPrice to the related item.
// Sets o.R.QuoteToken to related.
// Adds o to related.R.QuoteTokenPrices.
func (o *TokenPrice) SetQuoteToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Token) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"token_price\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"quote"}),
		strmangle.WhereClause("\"", "\"", 2, tokenPricePrimaryKeyColumns),
	)
	values := []interface{}{related.Pubkey, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Quote, related.Pubkey)
	if o.R == nil {
		o.R = &tokenPriceR{
			QuoteToken: related,
		}
	} else {
		o.R.QuoteToken = related
	}

	if related.R == nil {
		related.R = &tokenR{
			QuoteTokenPrices: TokenPriceSlice{o},
		}
	} else {
		related.R.QuoteTokenPrices = append(related.R.QuoteTokenPrices, o)
	}

	return nil
}

// RemoveQuoteToken relationship.
// Sets o.R.QuoteToken to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TokenPrice) RemoveQuoteToken(ctx context.Context, exec boil.ContextExecutor, related *Token) error {
	var err error

	queries.SetScanner(&o.Quote, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("quote")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.QuoteToken = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.QuoteTokenPrices {
		if queries.Equal(o.Quote, ri.Quote) {
			continue
		}

		ln := len(related.R.QuoteTokenPrices)
		if ln > 1 && i < ln-1 {
			related.R.QuoteTokenPrices[i] = related.R.QuoteTokenPrices[ln-1]
		}
		related.R.QuoteTokenPrices = related.R.QuoteTokenPrices[:ln-1]
		break
	}
	return nil
}

// SetSourceSourceReference of the tokenPrice to the related item.
// Sets o.R.SourceSourceReference to related.
// Adds o to related.R.SourceTokenPrices.
func (o *TokenPrice) SetSourceSourceReference(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SourceReference) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"token_price\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"source"}),
		strmangle.WhereClause("\"", "\"", 2, tokenPricePrimaryKeyColumns),
	)
	values := []interface{}{related.Value, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Source, related.Value)
	if o.R == nil {
		o.R = &tokenPriceR{
			SourceSourceReference: related,
		}
	} else {
		o.R.SourceSourceReference = related
	}

	if related.R == nil {
		related.R = &sourceReferenceR{
			SourceTokenPrices: TokenPriceSlice{o},
		}
	} else {
		related.R.SourceTokenPrices = append(related.R.SourceTokenPrices, o)
	}

	return nil
}

// RemoveSourceSourceReference relationship.
// Sets o.R.SourceSourceReference to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TokenPrice) RemoveSourceSourceReference(ctx context.Context, exec boil.ContextExecutor, related *SourceReference) error {
	var err error

	queries.SetScanner(&o.Source, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("source")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SourceSourceReference = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SourceTokenPrices {
		if queries.Equal(o.Source, ri.Source) {
			continue
		}

		ln := len(related.R.SourceTokenPrices)
		if ln > 1 && i < ln-1 {
			related.R.SourceTokenPrices[i] = related.R.SourceTokenPrices[ln-1]
		}
		related.R.SourceTokenPrices = related.R.SourceTokenPrices[:ln-1]
		break
	}
	return nil
}

// TokenPrices retrieves all the records using an executor.
func TokenPrices(mods ...qm.QueryMod) tokenPriceQuery {
	mods = append(mods, qm.From("\"token_price\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"token_price\".*"})
	}

	return tokenPriceQuery{q}
}

// FindTokenPrice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTokenPrice(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TokenPrice, error) {
	tokenPriceObj := &TokenPrice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"token_price\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tokenPriceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from token_price")
	}

	if err = tokenPriceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tokenPriceObj, err
	}

	return tokenPriceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TokenPrice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_price provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenPriceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tokenPriceInsertCacheMut.RLock()
	cache, cached := tokenPriceInsertCache[key]
	tokenPriceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tokenPriceAllColumns,
			tokenPriceColumnsWithDefault,
			tokenPriceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tokenPriceType, tokenPriceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tokenPriceType, tokenPriceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"token_price\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"token_price\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into token_price")
	}

	if !cached {
		tokenPriceInsertCacheMut.Lock()
		tokenPriceInsertCache[key] = cache
		tokenPriceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TokenPrice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TokenPrice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tokenPriceUpdateCacheMut.RLock()
	cache, cached := tokenPriceUpdateCache[key]
	tokenPriceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tokenPriceAllColumns,
			tokenPricePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update token_price, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"token_price\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tokenPricePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tokenPriceType, tokenPriceMapping, append(wl, tokenPricePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update token_price row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for token_price")
	}

	if !cached {
		tokenPriceUpdateCacheMut.Lock()
		tokenPriceUpdateCache[key] = cache
		tokenPriceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tokenPriceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for token_price")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for token_price")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TokenPriceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"token_price\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tokenPricePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tokenPrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tokenPrice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TokenPrice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_price provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenPriceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tokenPriceUpsertCacheMut.RLock()
	cache, cached := tokenPriceUpsertCache[key]
	tokenPriceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tokenPriceAllColumns,
			tokenPriceColumnsWithDefault,
			tokenPriceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tokenPriceAllColumns,
			tokenPricePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert token_price, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tokenPricePrimaryKeyColumns))
			copy(conflict, tokenPricePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"token_price\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tokenPriceType, tokenPriceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tokenPriceType, tokenPriceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert token_price")
	}

	if !cached {
		tokenPriceUpsertCacheMut.Lock()
		tokenPriceUpsertCache[key] = cache
		tokenPriceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TokenPrice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TokenPrice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TokenPrice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tokenPricePrimaryKeyMapping)
	sql := "DELETE FROM \"token_price\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from token_price")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for token_price")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tokenPriceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tokenPriceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from token_price")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_price")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TokenPriceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tokenPriceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"token_price\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenPricePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tokenPrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_price")
	}

	if len(tokenPriceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TokenPrice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTokenPrice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TokenPriceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TokenPriceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"token_price\".* FROM \"token_price\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenPricePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TokenPriceSlice")
	}

	*o = slice

	return nil
}

// TokenPriceExists checks if the TokenPrice row exists.
func TokenPriceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"token_price\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if token_price exists")
	}

	return exists, nil
}
