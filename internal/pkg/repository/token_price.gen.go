// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/dcaf-protocol/drip/internal/pkg/repository/model"
)

func newTokenPrice(db *gorm.DB) tokenPrice {
	_tokenPrice := tokenPrice{}

	_tokenPrice.tokenPriceDo.UseDB(db)
	_tokenPrice.tokenPriceDo.UseModel(&model.TokenPrice{})

	tableName := _tokenPrice.tokenPriceDo.TableName()
	_tokenPrice.ALL = field.NewField(tableName, "*")
	_tokenPrice.ID = field.NewInt32(tableName, "id")
	_tokenPrice.Base = field.NewString(tableName, "base")
	_tokenPrice.Quote = field.NewString(tableName, "quote")
	_tokenPrice.Close = field.NewUint64(tableName, "close")
	_tokenPrice.Date = field.NewTime(tableName, "date")
	_tokenPrice.Source = field.NewString(tableName, "source")

	_tokenPrice.fillFieldMap()

	return _tokenPrice
}

type tokenPrice struct {
	tokenPriceDo tokenPriceDo

	ALL    field.Field
	ID     field.Int32
	Base   field.String
	Quote  field.String
	Close  field.Uint64
	Date   field.Time
	Source field.String

	fieldMap map[string]field.Expr
}

func (t tokenPrice) Table(newTableName string) *tokenPrice {
	t.tokenPriceDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tokenPrice) As(alias string) *tokenPrice {
	t.tokenPriceDo.DO = *(t.tokenPriceDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tokenPrice) updateTableName(table string) *tokenPrice {
	t.ALL = field.NewField(table, "*")
	t.ID = field.NewInt32(table, "id")
	t.Base = field.NewString(table, "base")
	t.Quote = field.NewString(table, "quote")
	t.Close = field.NewUint64(table, "close")
	t.Date = field.NewTime(table, "date")
	t.Source = field.NewString(table, "source")

	t.fillFieldMap()

	return t
}

func (t *tokenPrice) WithContext(ctx context.Context) *tokenPriceDo {
	return t.tokenPriceDo.WithContext(ctx)
}

func (t tokenPrice) TableName() string { return t.tokenPriceDo.TableName() }

func (t tokenPrice) Alias() string { return t.tokenPriceDo.Alias() }

func (t *tokenPrice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tokenPrice) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["base"] = t.Base
	t.fieldMap["quote"] = t.Quote
	t.fieldMap["close"] = t.Close
	t.fieldMap["date"] = t.Date
	t.fieldMap["source"] = t.Source
}

func (t tokenPrice) clone(db *gorm.DB) tokenPrice {
	t.tokenPriceDo.ReplaceDB(db)
	return t
}

type tokenPriceDo struct{ gen.DO }

func (t tokenPriceDo) Debug() *tokenPriceDo {
	return t.withDO(t.DO.Debug())
}

func (t tokenPriceDo) WithContext(ctx context.Context) *tokenPriceDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tokenPriceDo) Clauses(conds ...clause.Expression) *tokenPriceDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tokenPriceDo) Returning(value interface{}, columns ...string) *tokenPriceDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tokenPriceDo) Not(conds ...gen.Condition) *tokenPriceDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tokenPriceDo) Or(conds ...gen.Condition) *tokenPriceDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tokenPriceDo) Select(conds ...field.Expr) *tokenPriceDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tokenPriceDo) Where(conds ...gen.Condition) *tokenPriceDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tokenPriceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tokenPriceDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tokenPriceDo) Order(conds ...field.Expr) *tokenPriceDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tokenPriceDo) Distinct(cols ...field.Expr) *tokenPriceDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tokenPriceDo) Omit(cols ...field.Expr) *tokenPriceDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tokenPriceDo) Join(table schema.Tabler, on ...field.Expr) *tokenPriceDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tokenPriceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tokenPriceDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tokenPriceDo) RightJoin(table schema.Tabler, on ...field.Expr) *tokenPriceDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tokenPriceDo) Group(cols ...field.Expr) *tokenPriceDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tokenPriceDo) Having(conds ...gen.Condition) *tokenPriceDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tokenPriceDo) Limit(limit int) *tokenPriceDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tokenPriceDo) Offset(offset int) *tokenPriceDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tokenPriceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tokenPriceDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tokenPriceDo) Unscoped() *tokenPriceDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tokenPriceDo) Create(values ...*model.TokenPrice) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tokenPriceDo) CreateInBatches(values []*model.TokenPrice, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tokenPriceDo) Save(values ...*model.TokenPrice) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tokenPriceDo) First() (*model.TokenPrice, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenPrice), nil
	}
}

func (t tokenPriceDo) Take() (*model.TokenPrice, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenPrice), nil
	}
}

func (t tokenPriceDo) Last() (*model.TokenPrice, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenPrice), nil
	}
}

func (t tokenPriceDo) Find() ([]*model.TokenPrice, error) {
	result, err := t.DO.Find()
	return result.([]*model.TokenPrice), err
}

func (t tokenPriceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TokenPrice, err error) {
	buf := make([]*model.TokenPrice, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tokenPriceDo) FindInBatches(result *[]*model.TokenPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tokenPriceDo) Attrs(attrs ...field.AssignExpr) *tokenPriceDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tokenPriceDo) Assign(attrs ...field.AssignExpr) *tokenPriceDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tokenPriceDo) Joins(fields ...field.RelationField) *tokenPriceDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tokenPriceDo) Preload(fields ...field.RelationField) *tokenPriceDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tokenPriceDo) FirstOrInit() (*model.TokenPrice, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenPrice), nil
	}
}

func (t tokenPriceDo) FirstOrCreate() (*model.TokenPrice, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenPrice), nil
	}
}

func (t tokenPriceDo) FindByPage(offset int, limit int) (result []*model.TokenPrice, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tokenPriceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tokenPriceDo) withDO(do gen.Dao) *tokenPriceDo {
	t.DO = *do.(*gen.DO)
	return t
}
