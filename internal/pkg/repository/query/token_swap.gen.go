// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/dcaf-protocol/drip/internal/pkg/repository/model"
)

func newTokenSwap(db *gorm.DB) tokenSwap {
	_tokenSwap := tokenSwap{}

	_tokenSwap.tokenSwapDo.UseDB(db)
	_tokenSwap.tokenSwapDo.UseModel(&model.TokenSwap{})

	tableName := _tokenSwap.tokenSwapDo.TableName()
	_tokenSwap.ALL = field.NewField(tableName, "*")
	_tokenSwap.Pubkey = field.NewString(tableName, "pubkey")
	_tokenSwap.Mint = field.NewString(tableName, "mint")
	_tokenSwap.Authority = field.NewString(tableName, "authority")
	_tokenSwap.FeeAccount = field.NewString(tableName, "fee_account")
	_tokenSwap.TokenAAccount = field.NewString(tableName, "token_a_account")
	_tokenSwap.TokenBAccount = field.NewString(tableName, "token_b_account")
	_tokenSwap.TokenPairID = field.NewString(tableName, "token_pair_id")
	_tokenSwap.TokenAMint = field.NewString(tableName, "token_a_mint")
	_tokenSwap.TokenBMint = field.NewString(tableName, "token_b_mint")
	_tokenSwap.ID = field.NewString(tableName, "id")

	_tokenSwap.fillFieldMap()

	return _tokenSwap
}

type tokenSwap struct {
	tokenSwapDo tokenSwapDo

	ALL           field.Field
	Pubkey        field.String
	Mint          field.String
	Authority     field.String
	FeeAccount    field.String
	TokenAAccount field.String
	TokenBAccount field.String
	TokenPairID   field.String
	TokenAMint    field.String
	TokenBMint    field.String
	ID            field.String

	fieldMap map[string]field.Expr
}

func (t tokenSwap) Table(newTableName string) *tokenSwap {
	t.tokenSwapDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tokenSwap) As(alias string) *tokenSwap {
	t.tokenSwapDo.DO = *(t.tokenSwapDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tokenSwap) updateTableName(table string) *tokenSwap {
	t.ALL = field.NewField(table, "*")
	t.Pubkey = field.NewString(table, "pubkey")
	t.Mint = field.NewString(table, "mint")
	t.Authority = field.NewString(table, "authority")
	t.FeeAccount = field.NewString(table, "fee_account")
	t.TokenAAccount = field.NewString(table, "token_a_account")
	t.TokenBAccount = field.NewString(table, "token_b_account")
	t.TokenPairID = field.NewString(table, "token_pair_id")
	t.TokenAMint = field.NewString(table, "token_a_mint")
	t.TokenBMint = field.NewString(table, "token_b_mint")
	t.ID = field.NewString(table, "id")

	t.fillFieldMap()

	return t
}

func (t *tokenSwap) WithContext(ctx context.Context) *tokenSwapDo {
	return t.tokenSwapDo.WithContext(ctx)
}

func (t tokenSwap) TableName() string { return t.tokenSwapDo.TableName() }

func (t tokenSwap) Alias() string { return t.tokenSwapDo.Alias() }

func (t *tokenSwap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tokenSwap) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["pubkey"] = t.Pubkey
	t.fieldMap["mint"] = t.Mint
	t.fieldMap["authority"] = t.Authority
	t.fieldMap["fee_account"] = t.FeeAccount
	t.fieldMap["token_a_account"] = t.TokenAAccount
	t.fieldMap["token_b_account"] = t.TokenBAccount
	t.fieldMap["token_pair_id"] = t.TokenPairID
	t.fieldMap["token_a_mint"] = t.TokenAMint
	t.fieldMap["token_b_mint"] = t.TokenBMint
	t.fieldMap["id"] = t.ID
}

func (t tokenSwap) clone(db *gorm.DB) tokenSwap {
	t.tokenSwapDo.ReplaceDB(db)
	return t
}

type tokenSwapDo struct{ gen.DO }

func (t tokenSwapDo) Debug() *tokenSwapDo {
	return t.withDO(t.DO.Debug())
}

func (t tokenSwapDo) WithContext(ctx context.Context) *tokenSwapDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tokenSwapDo) Clauses(conds ...clause.Expression) *tokenSwapDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tokenSwapDo) Returning(value interface{}, columns ...string) *tokenSwapDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tokenSwapDo) Not(conds ...gen.Condition) *tokenSwapDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tokenSwapDo) Or(conds ...gen.Condition) *tokenSwapDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tokenSwapDo) Select(conds ...field.Expr) *tokenSwapDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tokenSwapDo) Where(conds ...gen.Condition) *tokenSwapDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tokenSwapDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tokenSwapDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tokenSwapDo) Order(conds ...field.Expr) *tokenSwapDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tokenSwapDo) Distinct(cols ...field.Expr) *tokenSwapDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tokenSwapDo) Omit(cols ...field.Expr) *tokenSwapDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tokenSwapDo) Join(table schema.Tabler, on ...field.Expr) *tokenSwapDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tokenSwapDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tokenSwapDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tokenSwapDo) RightJoin(table schema.Tabler, on ...field.Expr) *tokenSwapDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tokenSwapDo) Group(cols ...field.Expr) *tokenSwapDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tokenSwapDo) Having(conds ...gen.Condition) *tokenSwapDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tokenSwapDo) Limit(limit int) *tokenSwapDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tokenSwapDo) Offset(offset int) *tokenSwapDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tokenSwapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tokenSwapDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tokenSwapDo) Unscoped() *tokenSwapDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tokenSwapDo) Create(values ...*model.TokenSwap) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tokenSwapDo) CreateInBatches(values []*model.TokenSwap, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tokenSwapDo) Save(values ...*model.TokenSwap) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tokenSwapDo) First() (*model.TokenSwap, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenSwap), nil
	}
}

func (t tokenSwapDo) Take() (*model.TokenSwap, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenSwap), nil
	}
}

func (t tokenSwapDo) Last() (*model.TokenSwap, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenSwap), nil
	}
}

func (t tokenSwapDo) Find() ([]*model.TokenSwap, error) {
	result, err := t.DO.Find()
	return result.([]*model.TokenSwap), err
}

func (t tokenSwapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TokenSwap, err error) {
	buf := make([]*model.TokenSwap, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tokenSwapDo) FindInBatches(result *[]*model.TokenSwap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tokenSwapDo) Attrs(attrs ...field.AssignExpr) *tokenSwapDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tokenSwapDo) Assign(attrs ...field.AssignExpr) *tokenSwapDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tokenSwapDo) Joins(fields ...field.RelationField) *tokenSwapDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tokenSwapDo) Preload(fields ...field.RelationField) *tokenSwapDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tokenSwapDo) FirstOrInit() (*model.TokenSwap, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenSwap), nil
	}
}

func (t tokenSwapDo) FirstOrCreate() (*model.TokenSwap, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenSwap), nil
	}
}

func (t tokenSwapDo) FindByPage(offset int, limit int) (result []*model.TokenSwap, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tokenSwapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tokenSwapDo) withDO(do gen.Dao) *tokenSwapDo {
	t.DO = *do.(*gen.DO)
	return t
}
