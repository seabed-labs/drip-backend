// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_swap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DepositSingleTokenTypeExactAmountIn is the `depositSingleTokenTypeExactAmountIn` instruction.
type DepositSingleTokenTypeExactAmountIn struct {
	SourceTokenAmount      *uint64
	MinimumPoolTokenAmount *uint64

	// [0] = [] swap
	//
	// [1] = [] authority
	//
	// [2] = [SIGNER] userTransferAuthority
	//
	// [3] = [WRITE] sourceToken
	//
	// [4] = [WRITE] swapTokenA
	//
	// [5] = [WRITE] swapTokenB
	//
	// [6] = [WRITE] poolMint
	//
	// [7] = [WRITE] destination
	//
	// [8] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositSingleTokenTypeExactAmountInInstructionBuilder creates a new `DepositSingleTokenTypeExactAmountIn` instruction builder.
func NewDepositSingleTokenTypeExactAmountInInstructionBuilder() *DepositSingleTokenTypeExactAmountIn {
	nd := &DepositSingleTokenTypeExactAmountIn{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetSourceTokenAmount sets the "sourceTokenAmount" parameter.
func (inst *DepositSingleTokenTypeExactAmountIn) SetSourceTokenAmount(sourceTokenAmount uint64) *DepositSingleTokenTypeExactAmountIn {
	inst.SourceTokenAmount = &sourceTokenAmount
	return inst
}

// SetMinimumPoolTokenAmount sets the "minimumPoolTokenAmount" parameter.
func (inst *DepositSingleTokenTypeExactAmountIn) SetMinimumPoolTokenAmount(minimumPoolTokenAmount uint64) *DepositSingleTokenTypeExactAmountIn {
	inst.MinimumPoolTokenAmount = &minimumPoolTokenAmount
	return inst
}

// SetSwapAccount sets the "swap" account.
func (inst *DepositSingleTokenTypeExactAmountIn) SetSwapAccount(swap ag_solanago.PublicKey) *DepositSingleTokenTypeExactAmountIn {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swap)
	return inst
}

// GetSwapAccount gets the "swap" account.
func (inst *DepositSingleTokenTypeExactAmountIn) GetSwapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *DepositSingleTokenTypeExactAmountIn) SetAuthorityAccount(authority ag_solanago.PublicKey) *DepositSingleTokenTypeExactAmountIn {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *DepositSingleTokenTypeExactAmountIn) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserTransferAuthorityAccount sets the "userTransferAuthority" account.
func (inst *DepositSingleTokenTypeExactAmountIn) SetUserTransferAuthorityAccount(userTransferAuthority ag_solanago.PublicKey) *DepositSingleTokenTypeExactAmountIn {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userTransferAuthority).SIGNER()
	return inst
}

// GetUserTransferAuthorityAccount gets the "userTransferAuthority" account.
func (inst *DepositSingleTokenTypeExactAmountIn) GetUserTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSourceTokenAccount sets the "sourceToken" account.
func (inst *DepositSingleTokenTypeExactAmountIn) SetSourceTokenAccount(sourceToken ag_solanago.PublicKey) *DepositSingleTokenTypeExactAmountIn {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(sourceToken).WRITE()
	return inst
}

// GetSourceTokenAccount gets the "sourceToken" account.
func (inst *DepositSingleTokenTypeExactAmountIn) GetSourceTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSwapTokenAAccount sets the "swapTokenA" account.
func (inst *DepositSingleTokenTypeExactAmountIn) SetSwapTokenAAccount(swapTokenA ag_solanago.PublicKey) *DepositSingleTokenTypeExactAmountIn {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(swapTokenA).WRITE()
	return inst
}

// GetSwapTokenAAccount gets the "swapTokenA" account.
func (inst *DepositSingleTokenTypeExactAmountIn) GetSwapTokenAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSwapTokenBAccount sets the "swapTokenB" account.
func (inst *DepositSingleTokenTypeExactAmountIn) SetSwapTokenBAccount(swapTokenB ag_solanago.PublicKey) *DepositSingleTokenTypeExactAmountIn {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(swapTokenB).WRITE()
	return inst
}

// GetSwapTokenBAccount gets the "swapTokenB" account.
func (inst *DepositSingleTokenTypeExactAmountIn) GetSwapTokenBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolMintAccount sets the "poolMint" account.
func (inst *DepositSingleTokenTypeExactAmountIn) SetPoolMintAccount(poolMint ag_solanago.PublicKey) *DepositSingleTokenTypeExactAmountIn {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolMint).WRITE()
	return inst
}

// GetPoolMintAccount gets the "poolMint" account.
func (inst *DepositSingleTokenTypeExactAmountIn) GetPoolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetDestinationAccount sets the "destination" account.
func (inst *DepositSingleTokenTypeExactAmountIn) SetDestinationAccount(destination ag_solanago.PublicKey) *DepositSingleTokenTypeExactAmountIn {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
func (inst *DepositSingleTokenTypeExactAmountIn) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DepositSingleTokenTypeExactAmountIn) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DepositSingleTokenTypeExactAmountIn {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DepositSingleTokenTypeExactAmountIn) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst DepositSingleTokenTypeExactAmountIn) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DepositSingleTokenTypeExactAmountIn,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DepositSingleTokenTypeExactAmountIn) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DepositSingleTokenTypeExactAmountIn) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.SourceTokenAmount == nil {
			return errors.New("SourceTokenAmount parameter is not set")
		}
		if inst.MinimumPoolTokenAmount == nil {
			return errors.New("MinimumPoolTokenAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Swap is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserTransferAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SourceToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SwapTokenA is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SwapTokenB is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *DepositSingleTokenTypeExactAmountIn) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DepositSingleTokenTypeExactAmountIn")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     SourceTokenAmount", *inst.SourceTokenAmount))
						paramsBranch.Child(ag_format.Param("MinimumPoolTokenAmount", *inst.MinimumPoolTokenAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 swap", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("userTransferAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          sourceToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           swapTokenA", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           swapTokenB", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             poolMint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          destination", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         tokenProgram", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj DepositSingleTokenTypeExactAmountIn) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SourceTokenAmount` param:
	err = encoder.Encode(obj.SourceTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `MinimumPoolTokenAmount` param:
	err = encoder.Encode(obj.MinimumPoolTokenAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DepositSingleTokenTypeExactAmountIn) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SourceTokenAmount`:
	err = decoder.Decode(&obj.SourceTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `MinimumPoolTokenAmount`:
	err = decoder.Decode(&obj.MinimumPoolTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositSingleTokenTypeExactAmountInInstruction declares a new DepositSingleTokenTypeExactAmountIn instruction with the provided parameters and accounts.
func NewDepositSingleTokenTypeExactAmountInInstruction(
	// Parameters:
	sourceTokenAmount uint64,
	minimumPoolTokenAmount uint64,
	// Accounts:
	swap ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	userTransferAuthority ag_solanago.PublicKey,
	sourceToken ag_solanago.PublicKey,
	swapTokenA ag_solanago.PublicKey,
	swapTokenB ag_solanago.PublicKey,
	poolMint ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *DepositSingleTokenTypeExactAmountIn {
	return NewDepositSingleTokenTypeExactAmountInInstructionBuilder().
		SetSourceTokenAmount(sourceTokenAmount).
		SetMinimumPoolTokenAmount(minimumPoolTokenAmount).
		SetSwapAccount(swap).
		SetAuthorityAccount(authority).
		SetUserTransferAuthorityAccount(userTransferAuthority).
		SetSourceTokenAccount(sourceToken).
		SetSwapTokenAAccount(swapTokenA).
		SetSwapTokenBAccount(swapTokenB).
		SetPoolMintAccount(poolMint).
		SetDestinationAccount(destination).
		SetTokenProgramAccount(tokenProgram)
}
