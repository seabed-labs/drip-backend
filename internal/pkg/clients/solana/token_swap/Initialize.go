// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_swap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type Initialize struct {
	Fees      *Fees
	SwapCurve *SwapCurve

	// [0] = [WRITE, SIGNER] swap
	//
	// [1] = [] authority
	//
	// [2] = [] tokenA
	//
	// [3] = [] tokenB
	//
	// [4] = [WRITE] pool
	//
	// [5] = [] fee
	//
	// [6] = [WRITE] destination
	//
	// [7] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `Initialize` instruction builder.
func NewInitializeInstructionBuilder() *Initialize {
	nd := &Initialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetFees sets the "fees" parameter.
func (inst *Initialize) SetFees(fees Fees) *Initialize {
	inst.Fees = &fees
	return inst
}

// SetSwapCurve sets the "swapCurve" parameter.
func (inst *Initialize) SetSwapCurve(swapCurve SwapCurve) *Initialize {
	inst.SwapCurve = &swapCurve
	return inst
}

// SetSwapAccount sets the "swap" account.
func (inst *Initialize) SetSwapAccount(swap ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swap).WRITE().SIGNER()
	return inst
}

// GetSwapAccount gets the "swap" account.
func (inst *Initialize) GetSwapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *Initialize) SetAuthorityAccount(authority ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *Initialize) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAAccount sets the "tokenA" account.
func (inst *Initialize) SetTokenAAccount(tokenA ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenA)
	return inst
}

// GetTokenAAccount gets the "tokenA" account.
func (inst *Initialize) GetTokenAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBAccount sets the "tokenB" account.
func (inst *Initialize) SetTokenBAccount(tokenB ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenB)
	return inst
}

// GetTokenBAccount gets the "tokenB" account.
func (inst *Initialize) GetTokenBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolAccount sets the "pool" account.
func (inst *Initialize) SetPoolAccount(pool ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *Initialize) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFeeAccount sets the "fee" account.
func (inst *Initialize) SetFeeAccount(fee ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(fee)
	return inst
}

// GetFeeAccount gets the "fee" account.
func (inst *Initialize) GetFeeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetDestinationAccount sets the "destination" account.
func (inst *Initialize) SetDestinationAccount(destination ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
func (inst *Initialize) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Initialize) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Initialize) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst Initialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Fees == nil {
			return errors.New("Fees parameter is not set")
		}
		if inst.SwapCurve == nil {
			return errors.New("SwapCurve parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Swap is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenA is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenB is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Fee is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Initialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     Fees", *inst.Fees))
						paramsBranch.Child(ag_format.Param("SwapCurve", *inst.SwapCurve))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        swap", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      tokenA", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      tokenB", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        pool", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         fee", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" destination", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("tokenProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj Initialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Fees` param:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return err
	}
	// Serialize `SwapCurve` param:
	err = encoder.Encode(obj.SwapCurve)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return err
	}
	// Deserialize `SwapCurve`:
	err = decoder.Decode(&obj.SwapCurve)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	fees Fees,
	swapCurve SwapCurve,
	// Accounts:
	swap ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	tokenA ag_solanago.PublicKey,
	tokenB ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	fee ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Initialize {
	return NewInitializeInstructionBuilder().
		SetFees(fees).
		SetSwapCurve(swapCurve).
		SetSwapAccount(swap).
		SetAuthorityAccount(authority).
		SetTokenAAccount(tokenA).
		SetTokenBAccount(tokenB).
		SetPoolAccount(pool).
		SetFeeAccount(fee).
		SetDestinationAccount(destination).
		SetTokenProgramAccount(tokenProgram)
}
