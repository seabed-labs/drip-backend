// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_swap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Swap is the `swap` instruction.
type Swap struct {
	AmountIn         *uint64
	MinimumAmountOut *uint64

	// [0] = [] swap
	//
	// [1] = [] authority
	//
	// [2] = [SIGNER] userTransferAuthority
	//
	// [3] = [WRITE] source
	//
	// [4] = [WRITE] swapSource
	//
	// [5] = [WRITE] swapDestination
	//
	// [6] = [WRITE] destination
	//
	// [7] = [WRITE] poolMint
	//
	// [8] = [WRITE] poolFee
	//
	// [9] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapInstructionBuilder creates a new `Swap` instruction builder.
func NewSwapInstructionBuilder() *Swap {
	nd := &Swap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetAmountIn sets the "amountIn" parameter.
func (inst *Swap) SetAmountIn(amountIn uint64) *Swap {
	inst.AmountIn = &amountIn
	return inst
}

// SetMinimumAmountOut sets the "minimumAmountOut" parameter.
func (inst *Swap) SetMinimumAmountOut(minimumAmountOut uint64) *Swap {
	inst.MinimumAmountOut = &minimumAmountOut
	return inst
}

// SetSwapAccount sets the "swap" account.
func (inst *Swap) SetSwapAccount(swap ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swap)
	return inst
}

// GetSwapAccount gets the "swap" account.
func (inst *Swap) GetSwapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *Swap) SetAuthorityAccount(authority ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *Swap) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserTransferAuthorityAccount sets the "userTransferAuthority" account.
func (inst *Swap) SetUserTransferAuthorityAccount(userTransferAuthority ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userTransferAuthority).SIGNER()
	return inst
}

// GetUserTransferAuthorityAccount gets the "userTransferAuthority" account.
func (inst *Swap) GetUserTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSourceAccount sets the "source" account.
func (inst *Swap) SetSourceAccount(source ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(source).WRITE()
	return inst
}

// GetSourceAccount gets the "source" account.
func (inst *Swap) GetSourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSwapSourceAccount sets the "swapSource" account.
func (inst *Swap) SetSwapSourceAccount(swapSource ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(swapSource).WRITE()
	return inst
}

// GetSwapSourceAccount gets the "swapSource" account.
func (inst *Swap) GetSwapSourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSwapDestinationAccount sets the "swapDestination" account.
func (inst *Swap) SetSwapDestinationAccount(swapDestination ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(swapDestination).WRITE()
	return inst
}

// GetSwapDestinationAccount gets the "swapDestination" account.
func (inst *Swap) GetSwapDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetDestinationAccount sets the "destination" account.
func (inst *Swap) SetDestinationAccount(destination ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
func (inst *Swap) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPoolMintAccount sets the "poolMint" account.
func (inst *Swap) SetPoolMintAccount(poolMint ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(poolMint).WRITE()
	return inst
}

// GetPoolMintAccount gets the "poolMint" account.
func (inst *Swap) GetPoolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPoolFeeAccount sets the "poolFee" account.
func (inst *Swap) SetPoolFeeAccount(poolFee ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(poolFee).WRITE()
	return inst
}

// GetPoolFeeAccount gets the "poolFee" account.
func (inst *Swap) GetPoolFeeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Swap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Swap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst Swap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Swap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Swap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Swap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AmountIn == nil {
			return errors.New("AmountIn parameter is not set")
		}
		if inst.MinimumAmountOut == nil {
			return errors.New("MinimumAmountOut parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Swap is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserTransferAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Source is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SwapSource is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SwapDestination is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PoolMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PoolFee is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Swap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Swap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        AmountIn", *inst.AmountIn))
						paramsBranch.Child(ag_format.Param("MinimumAmountOut", *inst.MinimumAmountOut))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 swap", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("userTransferAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               source", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           swapSource", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      swapDestination", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          destination", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             poolMint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("              poolFee", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         tokenProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj Swap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Swap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSwapInstruction(
	// Parameters:
	amountIn uint64,
	minimumAmountOut uint64,
	// Accounts:
	swap ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	userTransferAuthority ag_solanago.PublicKey,
	source ag_solanago.PublicKey,
	swapSource ag_solanago.PublicKey,
	swapDestination ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	poolMint ag_solanago.PublicKey,
	poolFee ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetAmountIn(amountIn).
		SetMinimumAmountOut(minimumAmountOut).
		SetSwapAccount(swap).
		SetAuthorityAccount(authority).
		SetUserTransferAuthorityAccount(userTransferAuthority).
		SetSourceAccount(source).
		SetSwapSourceAccount(swapSource).
		SetSwapDestinationAccount(swapDestination).
		SetDestinationAccount(destination).
		SetPoolMintAccount(poolMint).
		SetPoolFeeAccount(poolFee).
		SetTokenProgramAccount(tokenProgram)
}
