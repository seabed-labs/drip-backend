// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TriggerDca is the `triggerDca` instruction.
type TriggerDca struct {

	// [0] = [SIGNER] dcaTriggerSource
	//
	// [1] = [WRITE] vault
	//
	// [2] = [] vaultProtoConfig
	//
	// [3] = [] lastVaultPeriod
	//
	// [4] = [WRITE] currentVaultPeriod
	//
	// [5] = [WRITE] swapTokenMint
	//
	// [6] = [] tokenAMint
	//
	// [7] = [] tokenBMint
	//
	// [8] = [WRITE] vaultTokenAAccount
	//
	// [9] = [WRITE] vaultTokenBAccount
	//
	// [10] = [WRITE] swapTokenAAccount
	//
	// [11] = [WRITE] swapTokenBAccount
	//
	// [12] = [WRITE] swapFeeAccount
	//
	// [13] = [WRITE] dcaTriggerFeeTokenAAccount
	//
	// [14] = [] swap
	//
	// [15] = [] swapAuthority
	//
	// [16] = [] tokenSwapProgram
	//
	// [17] = [] tokenProgram
	//
	// [18] = [] associatedTokenProgram
	//
	// [19] = [] systemProgram
	//
	// [20] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTriggerDcaInstructionBuilder creates a new `TriggerDca` instruction builder.
func NewTriggerDcaInstructionBuilder() *TriggerDca {
	nd := &TriggerDca{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 21),
	}
	return nd
}

// SetDcaTriggerSourceAccount sets the "dcaTriggerSource" account.
func (inst *TriggerDca) SetDcaTriggerSourceAccount(dcaTriggerSource ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(dcaTriggerSource).SIGNER()
	return inst
}

// GetDcaTriggerSourceAccount gets the "dcaTriggerSource" account.
func (inst *TriggerDca) GetDcaTriggerSourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVaultAccount sets the "vault" account.
func (inst *TriggerDca) SetVaultAccount(vault ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *TriggerDca) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVaultProtoConfigAccount sets the "vaultProtoConfig" account.
func (inst *TriggerDca) SetVaultProtoConfigAccount(vaultProtoConfig ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vaultProtoConfig)
	return inst
}

// GetVaultProtoConfigAccount gets the "vaultProtoConfig" account.
func (inst *TriggerDca) GetVaultProtoConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLastVaultPeriodAccount sets the "lastVaultPeriod" account.
func (inst *TriggerDca) SetLastVaultPeriodAccount(lastVaultPeriod ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(lastVaultPeriod)
	return inst
}

// GetLastVaultPeriodAccount gets the "lastVaultPeriod" account.
func (inst *TriggerDca) GetLastVaultPeriodAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCurrentVaultPeriodAccount sets the "currentVaultPeriod" account.
func (inst *TriggerDca) SetCurrentVaultPeriodAccount(currentVaultPeriod ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(currentVaultPeriod).WRITE()
	return inst
}

// GetCurrentVaultPeriodAccount gets the "currentVaultPeriod" account.
func (inst *TriggerDca) GetCurrentVaultPeriodAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSwapTokenMintAccount sets the "swapTokenMint" account.
func (inst *TriggerDca) SetSwapTokenMintAccount(swapTokenMint ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(swapTokenMint).WRITE()
	return inst
}

// GetSwapTokenMintAccount gets the "swapTokenMint" account.
func (inst *TriggerDca) GetSwapTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenAMintAccount sets the "tokenAMint" account.
func (inst *TriggerDca) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "tokenAMint" account.
func (inst *TriggerDca) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenBMintAccount sets the "tokenBMint" account.
func (inst *TriggerDca) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "tokenBMint" account.
func (inst *TriggerDca) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetVaultTokenAAccountAccount sets the "vaultTokenAAccount" account.
func (inst *TriggerDca) SetVaultTokenAAccountAccount(vaultTokenAAccount ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(vaultTokenAAccount).WRITE()
	return inst
}

// GetVaultTokenAAccountAccount gets the "vaultTokenAAccount" account.
func (inst *TriggerDca) GetVaultTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetVaultTokenBAccountAccount sets the "vaultTokenBAccount" account.
func (inst *TriggerDca) SetVaultTokenBAccountAccount(vaultTokenBAccount ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(vaultTokenBAccount).WRITE()
	return inst
}

// GetVaultTokenBAccountAccount gets the "vaultTokenBAccount" account.
func (inst *TriggerDca) GetVaultTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSwapTokenAAccountAccount sets the "swapTokenAAccount" account.
func (inst *TriggerDca) SetSwapTokenAAccountAccount(swapTokenAAccount ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(swapTokenAAccount).WRITE()
	return inst
}

// GetSwapTokenAAccountAccount gets the "swapTokenAAccount" account.
func (inst *TriggerDca) GetSwapTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSwapTokenBAccountAccount sets the "swapTokenBAccount" account.
func (inst *TriggerDca) SetSwapTokenBAccountAccount(swapTokenBAccount ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(swapTokenBAccount).WRITE()
	return inst
}

// GetSwapTokenBAccountAccount gets the "swapTokenBAccount" account.
func (inst *TriggerDca) GetSwapTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSwapFeeAccountAccount sets the "swapFeeAccount" account.
func (inst *TriggerDca) SetSwapFeeAccountAccount(swapFeeAccount ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(swapFeeAccount).WRITE()
	return inst
}

// GetSwapFeeAccountAccount gets the "swapFeeAccount" account.
func (inst *TriggerDca) GetSwapFeeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetDcaTriggerFeeTokenAAccountAccount sets the "dcaTriggerFeeTokenAAccount" account.
func (inst *TriggerDca) SetDcaTriggerFeeTokenAAccountAccount(dcaTriggerFeeTokenAAccount ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(dcaTriggerFeeTokenAAccount).WRITE()
	return inst
}

// GetDcaTriggerFeeTokenAAccountAccount gets the "dcaTriggerFeeTokenAAccount" account.
func (inst *TriggerDca) GetDcaTriggerFeeTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSwapAccount sets the "swap" account.
func (inst *TriggerDca) SetSwapAccount(swap ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(swap)
	return inst
}

// GetSwapAccount gets the "swap" account.
func (inst *TriggerDca) GetSwapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSwapAuthorityAccount sets the "swapAuthority" account.
func (inst *TriggerDca) SetSwapAuthorityAccount(swapAuthority ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(swapAuthority)
	return inst
}

// GetSwapAuthorityAccount gets the "swapAuthority" account.
func (inst *TriggerDca) GetSwapAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetTokenSwapProgramAccount sets the "tokenSwapProgram" account.
func (inst *TriggerDca) SetTokenSwapProgramAccount(tokenSwapProgram ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(tokenSwapProgram)
	return inst
}

// GetTokenSwapProgramAccount gets the "tokenSwapProgram" account.
func (inst *TriggerDca) GetTokenSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *TriggerDca) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *TriggerDca) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *TriggerDca) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *TriggerDca) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *TriggerDca) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *TriggerDca) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetRentAccount sets the "rent" account.
func (inst *TriggerDca) SetRentAccount(rent ag_solanago.PublicKey) *TriggerDca {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *TriggerDca) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

func (inst TriggerDca) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TriggerDca,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TriggerDca) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TriggerDca) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.DcaTriggerSource is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VaultProtoConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.LastVaultPeriod is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CurrentVaultPeriod is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SwapTokenMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.VaultTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.VaultTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SwapTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SwapTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SwapFeeAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.DcaTriggerFeeTokenAAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Swap is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SwapAuthority is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.TokenSwapProgram is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *TriggerDca) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TriggerDca")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=21]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      dcaTriggerSource", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 vault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      vaultProtoConfig", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       lastVaultPeriod", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    currentVaultPeriod", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         swapTokenMint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            tokenAMint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            tokenBMint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           vaultTokenA", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           vaultTokenB", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            swapTokenA", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("            swapTokenB", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("               swapFee", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("   dcaTriggerFeeTokenA", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                  swap", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("         swapAuthority", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("      tokenSwapProgram", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(20)))
					})
				})
		})
}

func (obj TriggerDca) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *TriggerDca) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewTriggerDcaInstruction declares a new TriggerDca instruction with the provided parameters and accounts.
func NewTriggerDcaInstruction(
	// Accounts:
	dcaTriggerSource ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	vaultProtoConfig ag_solanago.PublicKey,
	lastVaultPeriod ag_solanago.PublicKey,
	currentVaultPeriod ag_solanago.PublicKey,
	swapTokenMint ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	vaultTokenAAccount ag_solanago.PublicKey,
	vaultTokenBAccount ag_solanago.PublicKey,
	swapTokenAAccount ag_solanago.PublicKey,
	swapTokenBAccount ag_solanago.PublicKey,
	swapFeeAccount ag_solanago.PublicKey,
	dcaTriggerFeeTokenAAccount ag_solanago.PublicKey,
	swap ag_solanago.PublicKey,
	swapAuthority ag_solanago.PublicKey,
	tokenSwapProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *TriggerDca {
	return NewTriggerDcaInstructionBuilder().
		SetDcaTriggerSourceAccount(dcaTriggerSource).
		SetVaultAccount(vault).
		SetVaultProtoConfigAccount(vaultProtoConfig).
		SetLastVaultPeriodAccount(lastVaultPeriod).
		SetCurrentVaultPeriodAccount(currentVaultPeriod).
		SetSwapTokenMintAccount(swapTokenMint).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetVaultTokenAAccountAccount(vaultTokenAAccount).
		SetVaultTokenBAccountAccount(vaultTokenBAccount).
		SetSwapTokenAAccountAccount(swapTokenAAccount).
		SetSwapTokenBAccountAccount(swapTokenBAccount).
		SetSwapFeeAccountAccount(swapFeeAccount).
		SetDcaTriggerFeeTokenAAccountAccount(dcaTriggerFeeTokenAAccount).
		SetSwapAccount(swap).
		SetSwapAuthorityAccount(swapAuthority).
		SetTokenSwapProgramAccount(tokenSwapProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
