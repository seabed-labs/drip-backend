// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dca_vault

import ag_binary "github.com/gagliardetto/binary"

type DepositParams struct {
	TokenADepositAmount uint64
	DcaCycles           uint64
}

func (obj DepositParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenADepositAmount` param:
	err = encoder.Encode(obj.TokenADepositAmount)
	if err != nil {
		return err
	}
	// Serialize `DcaCycles` param:
	err = encoder.Encode(obj.DcaCycles)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DepositParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenADepositAmount`:
	err = decoder.Decode(&obj.TokenADepositAmount)
	if err != nil {
		return err
	}
	// Deserialize `DcaCycles`:
	err = decoder.Decode(&obj.DcaCycles)
	if err != nil {
		return err
	}
	return nil
}

type InitializeVaultPeriodParams struct {
	PeriodId uint64
}

func (obj InitializeVaultPeriodParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PeriodId` param:
	err = encoder.Encode(obj.PeriodId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeVaultPeriodParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PeriodId`:
	err = decoder.Decode(&obj.PeriodId)
	if err != nil {
		return err
	}
	return nil
}

type InitVaultProtoConfigParams struct {
	Granularity          uint64
	TriggerDcaSpread     uint16
	BaseWithdrawalSpread uint16
}

func (obj InitVaultProtoConfigParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Granularity` param:
	err = encoder.Encode(obj.Granularity)
	if err != nil {
		return err
	}
	// Serialize `TriggerDcaSpread` param:
	err = encoder.Encode(obj.TriggerDcaSpread)
	if err != nil {
		return err
	}
	// Serialize `BaseWithdrawalSpread` param:
	err = encoder.Encode(obj.BaseWithdrawalSpread)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitVaultProtoConfigParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Granularity`:
	err = decoder.Decode(&obj.Granularity)
	if err != nil {
		return err
	}
	// Deserialize `TriggerDcaSpread`:
	err = decoder.Decode(&obj.TriggerDcaSpread)
	if err != nil {
		return err
	}
	// Deserialize `BaseWithdrawalSpread`:
	err = decoder.Decode(&obj.BaseWithdrawalSpread)
	if err != nil {
		return err
	}
	return nil
}
