// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTokenPairs(t *testing.T) {
	t.Parallel()

	query := TokenPairs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTokenPairsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenPairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenPairsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TokenPairs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenPairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenPairsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TokenPairSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenPairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenPairsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TokenPairExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TokenPair exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TokenPairExists to return true, but got false.")
	}
}

func testTokenPairsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tokenPairFound, err := FindTokenPair(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tokenPairFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTokenPairsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TokenPairs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTokenPairsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TokenPairs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTokenPairsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tokenPairOne := &TokenPair{}
	tokenPairTwo := &TokenPair{}
	if err = randomize.Struct(seed, tokenPairOne, tokenPairDBTypes, false, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}
	if err = randomize.Struct(seed, tokenPairTwo, tokenPairDBTypes, false, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tokenPairOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tokenPairTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TokenPairs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTokenPairsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tokenPairOne := &TokenPair{}
	tokenPairTwo := &TokenPair{}
	if err = randomize.Struct(seed, tokenPairOne, tokenPairDBTypes, false, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}
	if err = randomize.Struct(seed, tokenPairTwo, tokenPairDBTypes, false, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tokenPairOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tokenPairTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tokenPairBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPair) error {
	*o = TokenPair{}
	return nil
}

func tokenPairAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPair) error {
	*o = TokenPair{}
	return nil
}

func tokenPairAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TokenPair) error {
	*o = TokenPair{}
	return nil
}

func tokenPairBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TokenPair) error {
	*o = TokenPair{}
	return nil
}

func tokenPairAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TokenPair) error {
	*o = TokenPair{}
	return nil
}

func tokenPairBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TokenPair) error {
	*o = TokenPair{}
	return nil
}

func tokenPairAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TokenPair) error {
	*o = TokenPair{}
	return nil
}

func tokenPairBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPair) error {
	*o = TokenPair{}
	return nil
}

func tokenPairAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPair) error {
	*o = TokenPair{}
	return nil
}

func testTokenPairsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TokenPair{}
	o := &TokenPair{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tokenPairDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TokenPair object: %s", err)
	}

	AddTokenPairHook(boil.BeforeInsertHook, tokenPairBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tokenPairBeforeInsertHooks = []TokenPairHook{}

	AddTokenPairHook(boil.AfterInsertHook, tokenPairAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tokenPairAfterInsertHooks = []TokenPairHook{}

	AddTokenPairHook(boil.AfterSelectHook, tokenPairAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tokenPairAfterSelectHooks = []TokenPairHook{}

	AddTokenPairHook(boil.BeforeUpdateHook, tokenPairBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tokenPairBeforeUpdateHooks = []TokenPairHook{}

	AddTokenPairHook(boil.AfterUpdateHook, tokenPairAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tokenPairAfterUpdateHooks = []TokenPairHook{}

	AddTokenPairHook(boil.BeforeDeleteHook, tokenPairBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tokenPairBeforeDeleteHooks = []TokenPairHook{}

	AddTokenPairHook(boil.AfterDeleteHook, tokenPairAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tokenPairAfterDeleteHooks = []TokenPairHook{}

	AddTokenPairHook(boil.BeforeUpsertHook, tokenPairBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tokenPairBeforeUpsertHooks = []TokenPairHook{}

	AddTokenPairHook(boil.AfterUpsertHook, tokenPairAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tokenPairAfterUpsertHooks = []TokenPairHook{}
}

func testTokenPairsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTokenPairsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tokenPairColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TokenPairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTokenPairToManyPairTokenSwaps(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenPair
	var b, c TokenSwap

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tokenSwapDBTypes, false, tokenSwapColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tokenSwapDBTypes, false, tokenSwapColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Pair = a.ID
	c.Pair = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PairTokenSwaps().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Pair == b.Pair {
			bFound = true
		}
		if v.Pair == c.Pair {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TokenPairSlice{&a}
	if err = a.L.LoadPairTokenSwaps(ctx, tx, false, (*[]*TokenPair)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PairTokenSwaps); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PairTokenSwaps = nil
	if err = a.L.LoadPairTokenSwaps(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PairTokenSwaps); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTokenPairToManyAddOpPairTokenSwaps(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenPair
	var b, c, d, e TokenSwap

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenPairDBTypes, false, strmangle.SetComplement(tokenPairPrimaryKeyColumns, tokenPairColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TokenSwap{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tokenSwapDBTypes, false, strmangle.SetComplement(tokenSwapPrimaryKeyColumns, tokenSwapColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TokenSwap{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPairTokenSwaps(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Pair {
			t.Error("foreign key was wrong value", a.ID, first.Pair)
		}
		if a.ID != second.Pair {
			t.Error("foreign key was wrong value", a.ID, second.Pair)
		}

		if first.R.PairTokenPair != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PairTokenPair != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PairTokenSwaps[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PairTokenSwaps[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PairTokenSwaps().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTokenPairToOneTokenUsingTokenAToken(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TokenPair
	var foreign Token

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tokenPairDBTypes, false, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tokenDBTypes, false, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TokenA = foreign.Pubkey
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.TokenAToken().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Pubkey != foreign.Pubkey {
		t.Errorf("want: %v, got %v", foreign.Pubkey, check.Pubkey)
	}

	slice := TokenPairSlice{&local}
	if err = local.L.LoadTokenAToken(ctx, tx, false, (*[]*TokenPair)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TokenAToken == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.TokenAToken = nil
	if err = local.L.LoadTokenAToken(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TokenAToken == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTokenPairToOneTokenUsingTokenBToken(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TokenPair
	var foreign Token

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tokenPairDBTypes, false, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tokenDBTypes, false, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TokenB = foreign.Pubkey
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.TokenBToken().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Pubkey != foreign.Pubkey {
		t.Errorf("want: %v, got %v", foreign.Pubkey, check.Pubkey)
	}

	slice := TokenPairSlice{&local}
	if err = local.L.LoadTokenBToken(ctx, tx, false, (*[]*TokenPair)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TokenBToken == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.TokenBToken = nil
	if err = local.L.LoadTokenBToken(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TokenBToken == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTokenPairToOneSetOpTokenUsingTokenAToken(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenPair
	var b, c Token

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenPairDBTypes, false, strmangle.SetComplement(tokenPairPrimaryKeyColumns, tokenPairColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Token{&b, &c} {
		err = a.SetTokenAToken(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.TokenAToken != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TokenATokenPairs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TokenA != x.Pubkey {
			t.Error("foreign key was wrong value", a.TokenA)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TokenA))
		reflect.Indirect(reflect.ValueOf(&a.TokenA)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TokenA != x.Pubkey {
			t.Error("foreign key was wrong value", a.TokenA, x.Pubkey)
		}
	}
}
func testTokenPairToOneSetOpTokenUsingTokenBToken(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenPair
	var b, c Token

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenPairDBTypes, false, strmangle.SetComplement(tokenPairPrimaryKeyColumns, tokenPairColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Token{&b, &c} {
		err = a.SetTokenBToken(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.TokenBToken != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TokenBTokenPairs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TokenB != x.Pubkey {
			t.Error("foreign key was wrong value", a.TokenB)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TokenB))
		reflect.Indirect(reflect.ValueOf(&a.TokenB)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TokenB != x.Pubkey {
			t.Error("foreign key was wrong value", a.TokenB, x.Pubkey)
		}
	}
}

func testTokenPairsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTokenPairsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TokenPairSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTokenPairsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TokenPairs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tokenPairDBTypes = map[string]string{`ID`: `uuid`, `TokenA`: `character varying`, `TokenB`: `character varying`}
	_                = bytes.MinRead
)

func testTokenPairsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tokenPairPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tokenPairAllColumns) == len(tokenPairPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTokenPairsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tokenPairAllColumns) == len(tokenPairPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TokenPair{}
	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tokenPairDBTypes, true, tokenPairPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tokenPairAllColumns, tokenPairPrimaryKeyColumns) {
		fields = tokenPairAllColumns
	} else {
		fields = strmangle.SetComplement(
			tokenPairAllColumns,
			tokenPairPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TokenPairSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTokenPairsUpsert(t *testing.T) {
	t.Parallel()

	if len(tokenPairAllColumns) == len(tokenPairPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TokenPair{}
	if err = randomize.Struct(seed, &o, tokenPairDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TokenPair: %s", err)
	}

	count, err := TokenPairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tokenPairDBTypes, false, tokenPairPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TokenPair: %s", err)
	}

	count, err = TokenPairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
