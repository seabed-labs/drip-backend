// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Vault is an object representing the database table.
type Vault struct {
	Pubkey                 string        `boil:"pubkey" json:"pubkey" toml:"pubkey" yaml:"pubkey"`
	ProtoConfig            string        `boil:"proto_config" json:"proto_config" toml:"proto_config" yaml:"proto_config"`
	TokenAMint             string        `boil:"token_a_mint" json:"token_a_mint" toml:"token_a_mint" yaml:"token_a_mint"`
	TokenBMint             string        `boil:"token_b_mint" json:"token_b_mint" toml:"token_b_mint" yaml:"token_b_mint"`
	TokenAAccount          string        `boil:"token_a_account" json:"token_a_account" toml:"token_a_account" yaml:"token_a_account"`
	TokenBAccount          string        `boil:"token_b_account" json:"token_b_account" toml:"token_b_account" yaml:"token_b_account"`
	TreasuryTokenBAccount  string        `boil:"treasury_token_b_account" json:"treasury_token_b_account" toml:"treasury_token_b_account" yaml:"treasury_token_b_account"`
	LastDcaPeriod          types.Decimal `boil:"last_dca_period" json:"last_dca_period" toml:"last_dca_period" yaml:"last_dca_period"`
	DripAmount             types.Decimal `boil:"drip_amount" json:"drip_amount" toml:"drip_amount" yaml:"drip_amount"`
	DcaActivationTimestamp time.Time     `boil:"dca_activation_timestamp" json:"dca_activation_timestamp" toml:"dca_activation_timestamp" yaml:"dca_activation_timestamp"`

	R *vaultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vaultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VaultColumns = struct {
	Pubkey                 string
	ProtoConfig            string
	TokenAMint             string
	TokenBMint             string
	TokenAAccount          string
	TokenBAccount          string
	TreasuryTokenBAccount  string
	LastDcaPeriod          string
	DripAmount             string
	DcaActivationTimestamp string
}{
	Pubkey:                 "pubkey",
	ProtoConfig:            "proto_config",
	TokenAMint:             "token_a_mint",
	TokenBMint:             "token_b_mint",
	TokenAAccount:          "token_a_account",
	TokenBAccount:          "token_b_account",
	TreasuryTokenBAccount:  "treasury_token_b_account",
	LastDcaPeriod:          "last_dca_period",
	DripAmount:             "drip_amount",
	DcaActivationTimestamp: "dca_activation_timestamp",
}

var VaultTableColumns = struct {
	Pubkey                 string
	ProtoConfig            string
	TokenAMint             string
	TokenBMint             string
	TokenAAccount          string
	TokenBAccount          string
	TreasuryTokenBAccount  string
	LastDcaPeriod          string
	DripAmount             string
	DcaActivationTimestamp string
}{
	Pubkey:                 "vault.pubkey",
	ProtoConfig:            "vault.proto_config",
	TokenAMint:             "vault.token_a_mint",
	TokenBMint:             "vault.token_b_mint",
	TokenAAccount:          "vault.token_a_account",
	TokenBAccount:          "vault.token_b_account",
	TreasuryTokenBAccount:  "vault.treasury_token_b_account",
	LastDcaPeriod:          "vault.last_dca_period",
	DripAmount:             "vault.drip_amount",
	DcaActivationTimestamp: "vault.dca_activation_timestamp",
}

// Generated where

var VaultWhere = struct {
	Pubkey                 whereHelperstring
	ProtoConfig            whereHelperstring
	TokenAMint             whereHelperstring
	TokenBMint             whereHelperstring
	TokenAAccount          whereHelperstring
	TokenBAccount          whereHelperstring
	TreasuryTokenBAccount  whereHelperstring
	LastDcaPeriod          whereHelpertypes_Decimal
	DripAmount             whereHelpertypes_Decimal
	DcaActivationTimestamp whereHelpertime_Time
}{
	Pubkey:                 whereHelperstring{field: "\"vault\".\"pubkey\""},
	ProtoConfig:            whereHelperstring{field: "\"vault\".\"proto_config\""},
	TokenAMint:             whereHelperstring{field: "\"vault\".\"token_a_mint\""},
	TokenBMint:             whereHelperstring{field: "\"vault\".\"token_b_mint\""},
	TokenAAccount:          whereHelperstring{field: "\"vault\".\"token_a_account\""},
	TokenBAccount:          whereHelperstring{field: "\"vault\".\"token_b_account\""},
	TreasuryTokenBAccount:  whereHelperstring{field: "\"vault\".\"treasury_token_b_account\""},
	LastDcaPeriod:          whereHelpertypes_Decimal{field: "\"vault\".\"last_dca_period\""},
	DripAmount:             whereHelpertypes_Decimal{field: "\"vault\".\"drip_amount\""},
	DcaActivationTimestamp: whereHelpertime_Time{field: "\"vault\".\"dca_activation_timestamp\""},
}

// VaultRels is where relationship names are stored.
var VaultRels = struct {
	VaultProtoConfig string
	Positions        string
	VaultPeriods     string
}{
	VaultProtoConfig: "VaultProtoConfig",
	Positions:        "Positions",
	VaultPeriods:     "VaultPeriods",
}

// vaultR is where relationships are stored.
type vaultR struct {
	VaultProtoConfig *ProtoConfig     `boil:"VaultProtoConfig" json:"VaultProtoConfig" toml:"VaultProtoConfig" yaml:"VaultProtoConfig"`
	Positions        PositionSlice    `boil:"Positions" json:"Positions" toml:"Positions" yaml:"Positions"`
	VaultPeriods     VaultPeriodSlice `boil:"VaultPeriods" json:"VaultPeriods" toml:"VaultPeriods" yaml:"VaultPeriods"`
}

// NewStruct creates a new relationship struct
func (*vaultR) NewStruct() *vaultR {
	return &vaultR{}
}

func (r *vaultR) GetVaultProtoConfig() *ProtoConfig {
	if r == nil {
		return nil
	}
	return r.VaultProtoConfig
}

func (r *vaultR) GetPositions() PositionSlice {
	if r == nil {
		return nil
	}
	return r.Positions
}

func (r *vaultR) GetVaultPeriods() VaultPeriodSlice {
	if r == nil {
		return nil
	}
	return r.VaultPeriods
}

// vaultL is where Load methods for each relationship are stored.
type vaultL struct{}

var (
	vaultAllColumns            = []string{"pubkey", "proto_config", "token_a_mint", "token_b_mint", "token_a_account", "token_b_account", "treasury_token_b_account", "last_dca_period", "drip_amount", "dca_activation_timestamp"}
	vaultColumnsWithoutDefault = []string{"pubkey", "proto_config", "token_a_mint", "token_b_mint", "token_a_account", "token_b_account", "treasury_token_b_account", "last_dca_period", "drip_amount", "dca_activation_timestamp"}
	vaultColumnsWithDefault    = []string{}
	vaultPrimaryKeyColumns     = []string{"pubkey"}
	vaultGeneratedColumns      = []string{}
)

type (
	// VaultSlice is an alias for a slice of pointers to Vault.
	// This should almost always be used instead of []Vault.
	VaultSlice []*Vault
	// VaultHook is the signature for custom Vault hook methods
	VaultHook func(context.Context, boil.ContextExecutor, *Vault) error

	vaultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vaultType                 = reflect.TypeOf(&Vault{})
	vaultMapping              = queries.MakeStructMapping(vaultType)
	vaultPrimaryKeyMapping, _ = queries.BindMapping(vaultType, vaultMapping, vaultPrimaryKeyColumns)
	vaultInsertCacheMut       sync.RWMutex
	vaultInsertCache          = make(map[string]insertCache)
	vaultUpdateCacheMut       sync.RWMutex
	vaultUpdateCache          = make(map[string]updateCache)
	vaultUpsertCacheMut       sync.RWMutex
	vaultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vaultAfterSelectHooks []VaultHook

var vaultBeforeInsertHooks []VaultHook
var vaultAfterInsertHooks []VaultHook

var vaultBeforeUpdateHooks []VaultHook
var vaultAfterUpdateHooks []VaultHook

var vaultBeforeDeleteHooks []VaultHook
var vaultAfterDeleteHooks []VaultHook

var vaultBeforeUpsertHooks []VaultHook
var vaultAfterUpsertHooks []VaultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Vault) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Vault) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Vault) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Vault) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Vault) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Vault) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Vault) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Vault) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Vault) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVaultHook registers your hook function for all future operations.
func AddVaultHook(hookPoint boil.HookPoint, vaultHook VaultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vaultAfterSelectHooks = append(vaultAfterSelectHooks, vaultHook)
	case boil.BeforeInsertHook:
		vaultBeforeInsertHooks = append(vaultBeforeInsertHooks, vaultHook)
	case boil.AfterInsertHook:
		vaultAfterInsertHooks = append(vaultAfterInsertHooks, vaultHook)
	case boil.BeforeUpdateHook:
		vaultBeforeUpdateHooks = append(vaultBeforeUpdateHooks, vaultHook)
	case boil.AfterUpdateHook:
		vaultAfterUpdateHooks = append(vaultAfterUpdateHooks, vaultHook)
	case boil.BeforeDeleteHook:
		vaultBeforeDeleteHooks = append(vaultBeforeDeleteHooks, vaultHook)
	case boil.AfterDeleteHook:
		vaultAfterDeleteHooks = append(vaultAfterDeleteHooks, vaultHook)
	case boil.BeforeUpsertHook:
		vaultBeforeUpsertHooks = append(vaultBeforeUpsertHooks, vaultHook)
	case boil.AfterUpsertHook:
		vaultAfterUpsertHooks = append(vaultAfterUpsertHooks, vaultHook)
	}
}

// One returns a single vault record from the query.
func (q vaultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Vault, error) {
	o := &Vault{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vault")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Vault records from the query.
func (q vaultQuery) All(ctx context.Context, exec boil.ContextExecutor) (VaultSlice, error) {
	var o []*Vault

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Vault slice")
	}

	if len(vaultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Vault records in the query.
func (q vaultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vault rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vaultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vault exists")
	}

	return count > 0, nil
}

// VaultProtoConfig pointed to by the foreign key.
func (o *Vault) VaultProtoConfig(mods ...qm.QueryMod) protoConfigQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pubkey\" = ?", o.ProtoConfig),
	}

	queryMods = append(queryMods, mods...)

	return ProtoConfigs(queryMods...)
}

// Positions retrieves all the position's Positions with an executor.
func (o *Vault) Positions(mods ...qm.QueryMod) positionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"position\".\"vault\"=?", o.Pubkey),
	)

	return Positions(queryMods...)
}

// VaultPeriods retrieves all the vault_period's VaultPeriods with an executor.
func (o *Vault) VaultPeriods(mods ...qm.QueryMod) vaultPeriodQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vault_period\".\"vault\"=?", o.Pubkey),
	)

	return VaultPeriods(queryMods...)
}

// LoadVaultProtoConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vaultL) LoadVaultProtoConfig(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVault interface{}, mods queries.Applicator) error {
	var slice []*Vault
	var object *Vault

	if singular {
		object = maybeVault.(*Vault)
	} else {
		slice = *maybeVault.(*[]*Vault)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vaultR{}
		}
		args = append(args, object.ProtoConfig)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vaultR{}
			}

			for _, a := range args {
				if a == obj.ProtoConfig {
					continue Outer
				}
			}

			args = append(args, obj.ProtoConfig)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`proto_config`),
		qm.WhereIn(`proto_config.pubkey in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProtoConfig")
	}

	var resultSlice []*ProtoConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProtoConfig")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for proto_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for proto_config")
	}

	if len(vaultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VaultProtoConfig = foreign
		if foreign.R == nil {
			foreign.R = &protoConfigR{}
		}
		foreign.R.Vaults = append(foreign.R.Vaults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProtoConfig == foreign.Pubkey {
				local.R.VaultProtoConfig = foreign
				if foreign.R == nil {
					foreign.R = &protoConfigR{}
				}
				foreign.R.Vaults = append(foreign.R.Vaults, local)
				break
			}
		}
	}

	return nil
}

// LoadPositions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vaultL) LoadPositions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVault interface{}, mods queries.Applicator) error {
	var slice []*Vault
	var object *Vault

	if singular {
		object = maybeVault.(*Vault)
	} else {
		slice = *maybeVault.(*[]*Vault)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vaultR{}
		}
		args = append(args, object.Pubkey)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vaultR{}
			}

			for _, a := range args {
				if a == obj.Pubkey {
					continue Outer
				}
			}

			args = append(args, obj.Pubkey)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`position`),
		qm.WhereIn(`position.vault in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load position")
	}

	var resultSlice []*Position
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice position")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on position")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for position")
	}

	if len(positionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Positions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &positionR{}
			}
			foreign.R.PositionVault = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Pubkey == foreign.Vault {
				local.R.Positions = append(local.R.Positions, foreign)
				if foreign.R == nil {
					foreign.R = &positionR{}
				}
				foreign.R.PositionVault = local
				break
			}
		}
	}

	return nil
}

// LoadVaultPeriods allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vaultL) LoadVaultPeriods(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVault interface{}, mods queries.Applicator) error {
	var slice []*Vault
	var object *Vault

	if singular {
		object = maybeVault.(*Vault)
	} else {
		slice = *maybeVault.(*[]*Vault)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vaultR{}
		}
		args = append(args, object.Pubkey)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vaultR{}
			}

			for _, a := range args {
				if a == obj.Pubkey {
					continue Outer
				}
			}

			args = append(args, obj.Pubkey)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vault_period`),
		qm.WhereIn(`vault_period.vault in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vault_period")
	}

	var resultSlice []*VaultPeriod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vault_period")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vault_period")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vault_period")
	}

	if len(vaultPeriodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VaultPeriods = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vaultPeriodR{}
			}
			foreign.R.VaultPeriodVault = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Pubkey == foreign.Vault {
				local.R.VaultPeriods = append(local.R.VaultPeriods, foreign)
				if foreign.R == nil {
					foreign.R = &vaultPeriodR{}
				}
				foreign.R.VaultPeriodVault = local
				break
			}
		}
	}

	return nil
}

// SetVaultProtoConfig of the vault to the related item.
// Sets o.R.VaultProtoConfig to related.
// Adds o to related.R.Vaults.
func (o *Vault) SetVaultProtoConfig(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProtoConfig) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vault\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"proto_config"}),
		strmangle.WhereClause("\"", "\"", 2, vaultPrimaryKeyColumns),
	)
	values := []interface{}{related.Pubkey, o.Pubkey}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProtoConfig = related.Pubkey
	if o.R == nil {
		o.R = &vaultR{
			VaultProtoConfig: related,
		}
	} else {
		o.R.VaultProtoConfig = related
	}

	if related.R == nil {
		related.R = &protoConfigR{
			Vaults: VaultSlice{o},
		}
	} else {
		related.R.Vaults = append(related.R.Vaults, o)
	}

	return nil
}

// AddPositions adds the given related objects to the existing relationships
// of the vault, optionally inserting them as new records.
// Appends related to o.R.Positions.
// Sets related.R.PositionVault appropriately.
func (o *Vault) AddPositions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Position) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Vault = o.Pubkey
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"position\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vault"}),
				strmangle.WhereClause("\"", "\"", 2, positionPrimaryKeyColumns),
			)
			values := []interface{}{o.Pubkey, rel.Pubkey}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Vault = o.Pubkey
		}
	}

	if o.R == nil {
		o.R = &vaultR{
			Positions: related,
		}
	} else {
		o.R.Positions = append(o.R.Positions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &positionR{
				PositionVault: o,
			}
		} else {
			rel.R.PositionVault = o
		}
	}
	return nil
}

// AddVaultPeriods adds the given related objects to the existing relationships
// of the vault, optionally inserting them as new records.
// Appends related to o.R.VaultPeriods.
// Sets related.R.VaultPeriodVault appropriately.
func (o *Vault) AddVaultPeriods(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VaultPeriod) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Vault = o.Pubkey
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vault_period\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vault"}),
				strmangle.WhereClause("\"", "\"", 2, vaultPeriodPrimaryKeyColumns),
			)
			values := []interface{}{o.Pubkey, rel.Pubkey}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Vault = o.Pubkey
		}
	}

	if o.R == nil {
		o.R = &vaultR{
			VaultPeriods: related,
		}
	} else {
		o.R.VaultPeriods = append(o.R.VaultPeriods, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vaultPeriodR{
				VaultPeriodVault: o,
			}
		} else {
			rel.R.VaultPeriodVault = o
		}
	}
	return nil
}

// Vaults retrieves all the records using an executor.
func Vaults(mods ...qm.QueryMod) vaultQuery {
	mods = append(mods, qm.From("\"vault\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vault\".*"})
	}

	return vaultQuery{q}
}

// FindVault retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVault(ctx context.Context, exec boil.ContextExecutor, pubkey string, selectCols ...string) (*Vault, error) {
	vaultObj := &Vault{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vault\" where \"pubkey\"=$1", sel,
	)

	q := queries.Raw(query, pubkey)

	err := q.Bind(ctx, exec, vaultObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vault")
	}

	if err = vaultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vaultObj, err
	}

	return vaultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Vault) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vault provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vaultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vaultInsertCacheMut.RLock()
	cache, cached := vaultInsertCache[key]
	vaultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vaultAllColumns,
			vaultColumnsWithDefault,
			vaultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vaultType, vaultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vaultType, vaultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vault\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vault\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vault")
	}

	if !cached {
		vaultInsertCacheMut.Lock()
		vaultInsertCache[key] = cache
		vaultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Vault.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Vault) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vaultUpdateCacheMut.RLock()
	cache, cached := vaultUpdateCache[key]
	vaultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vaultAllColumns,
			vaultPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vault, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vault\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vaultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vaultType, vaultMapping, append(wl, vaultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vault row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vault")
	}

	if !cached {
		vaultUpdateCacheMut.Lock()
		vaultUpdateCache[key] = cache
		vaultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vaultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vault")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vault")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VaultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vaultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vault\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vaultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vault slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vault")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Vault) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vault provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vaultColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vaultUpsertCacheMut.RLock()
	cache, cached := vaultUpsertCache[key]
	vaultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vaultAllColumns,
			vaultColumnsWithDefault,
			vaultColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vaultAllColumns,
			vaultPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vault, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vaultPrimaryKeyColumns))
			copy(conflict, vaultPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vault\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vaultType, vaultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vaultType, vaultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vault")
	}

	if !cached {
		vaultUpsertCacheMut.Lock()
		vaultUpsertCache[key] = cache
		vaultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Vault record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Vault) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Vault provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vaultPrimaryKeyMapping)
	sql := "DELETE FROM \"vault\" WHERE \"pubkey\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vault")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vault")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vaultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vaultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vault")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vault")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VaultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vaultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vaultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vault\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vaultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vault slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vault")
	}

	if len(vaultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Vault) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVault(ctx, exec, o.Pubkey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VaultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VaultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vaultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vault\".* FROM \"vault\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vaultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VaultSlice")
	}

	*o = slice

	return nil
}

// VaultExists checks if the Vault row exists.
func VaultExists(ctx context.Context, exec boil.ContextExecutor, pubkey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vault\" where \"pubkey\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pubkey)
	}
	row := exec.QueryRowContext(ctx, sql, pubkey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vault exists")
	}

	return exists, nil
}
