// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// VaultPeriod is an object representing the database table.
type VaultPeriod struct {
	Pubkey   string        `boil:"pubkey" json:"pubkey" toml:"pubkey" yaml:"pubkey"`
	Vault    string        `boil:"vault" json:"vault" toml:"vault" yaml:"vault"`
	PeriodID types.Decimal `boil:"period_id" json:"period_id" toml:"period_id" yaml:"period_id"`
	Twap     types.Decimal `boil:"twap" json:"twap" toml:"twap" yaml:"twap"`
	Dar      types.Decimal `boil:"dar" json:"dar" toml:"dar" yaml:"dar"`

	R *vaultPeriodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vaultPeriodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VaultPeriodColumns = struct {
	Pubkey   string
	Vault    string
	PeriodID string
	Twap     string
	Dar      string
}{
	Pubkey:   "pubkey",
	Vault:    "vault",
	PeriodID: "period_id",
	Twap:     "twap",
	Dar:      "dar",
}

var VaultPeriodTableColumns = struct {
	Pubkey   string
	Vault    string
	PeriodID string
	Twap     string
	Dar      string
}{
	Pubkey:   "vault_period.pubkey",
	Vault:    "vault_period.vault",
	PeriodID: "vault_period.period_id",
	Twap:     "vault_period.twap",
	Dar:      "vault_period.dar",
}

// Generated where

var VaultPeriodWhere = struct {
	Pubkey   whereHelperstring
	Vault    whereHelperstring
	PeriodID whereHelpertypes_Decimal
	Twap     whereHelpertypes_Decimal
	Dar      whereHelpertypes_Decimal
}{
	Pubkey:   whereHelperstring{field: "\"vault_period\".\"pubkey\""},
	Vault:    whereHelperstring{field: "\"vault_period\".\"vault\""},
	PeriodID: whereHelpertypes_Decimal{field: "\"vault_period\".\"period_id\""},
	Twap:     whereHelpertypes_Decimal{field: "\"vault_period\".\"twap\""},
	Dar:      whereHelpertypes_Decimal{field: "\"vault_period\".\"dar\""},
}

// VaultPeriodRels is where relationship names are stored.
var VaultPeriodRels = struct {
	VaultPeriodVault string
}{
	VaultPeriodVault: "VaultPeriodVault",
}

// vaultPeriodR is where relationships are stored.
type vaultPeriodR struct {
	VaultPeriodVault *Vault `boil:"VaultPeriodVault" json:"VaultPeriodVault" toml:"VaultPeriodVault" yaml:"VaultPeriodVault"`
}

// NewStruct creates a new relationship struct
func (*vaultPeriodR) NewStruct() *vaultPeriodR {
	return &vaultPeriodR{}
}

func (r *vaultPeriodR) GetVaultPeriodVault() *Vault {
	if r == nil {
		return nil
	}
	return r.VaultPeriodVault
}

// vaultPeriodL is where Load methods for each relationship are stored.
type vaultPeriodL struct{}

var (
	vaultPeriodAllColumns            = []string{"pubkey", "vault", "period_id", "twap", "dar"}
	vaultPeriodColumnsWithoutDefault = []string{"pubkey", "vault", "period_id", "twap", "dar"}
	vaultPeriodColumnsWithDefault    = []string{}
	vaultPeriodPrimaryKeyColumns     = []string{"pubkey"}
	vaultPeriodGeneratedColumns      = []string{}
)

type (
	// VaultPeriodSlice is an alias for a slice of pointers to VaultPeriod.
	// This should almost always be used instead of []VaultPeriod.
	VaultPeriodSlice []*VaultPeriod
	// VaultPeriodHook is the signature for custom VaultPeriod hook methods
	VaultPeriodHook func(context.Context, boil.ContextExecutor, *VaultPeriod) error

	vaultPeriodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vaultPeriodType                 = reflect.TypeOf(&VaultPeriod{})
	vaultPeriodMapping              = queries.MakeStructMapping(vaultPeriodType)
	vaultPeriodPrimaryKeyMapping, _ = queries.BindMapping(vaultPeriodType, vaultPeriodMapping, vaultPeriodPrimaryKeyColumns)
	vaultPeriodInsertCacheMut       sync.RWMutex
	vaultPeriodInsertCache          = make(map[string]insertCache)
	vaultPeriodUpdateCacheMut       sync.RWMutex
	vaultPeriodUpdateCache          = make(map[string]updateCache)
	vaultPeriodUpsertCacheMut       sync.RWMutex
	vaultPeriodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vaultPeriodAfterSelectHooks []VaultPeriodHook

var vaultPeriodBeforeInsertHooks []VaultPeriodHook
var vaultPeriodAfterInsertHooks []VaultPeriodHook

var vaultPeriodBeforeUpdateHooks []VaultPeriodHook
var vaultPeriodAfterUpdateHooks []VaultPeriodHook

var vaultPeriodBeforeDeleteHooks []VaultPeriodHook
var vaultPeriodAfterDeleteHooks []VaultPeriodHook

var vaultPeriodBeforeUpsertHooks []VaultPeriodHook
var vaultPeriodAfterUpsertHooks []VaultPeriodHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VaultPeriod) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultPeriodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VaultPeriod) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultPeriodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VaultPeriod) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultPeriodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VaultPeriod) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultPeriodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VaultPeriod) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultPeriodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VaultPeriod) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultPeriodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VaultPeriod) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultPeriodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VaultPeriod) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultPeriodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VaultPeriod) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vaultPeriodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVaultPeriodHook registers your hook function for all future operations.
func AddVaultPeriodHook(hookPoint boil.HookPoint, vaultPeriodHook VaultPeriodHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vaultPeriodAfterSelectHooks = append(vaultPeriodAfterSelectHooks, vaultPeriodHook)
	case boil.BeforeInsertHook:
		vaultPeriodBeforeInsertHooks = append(vaultPeriodBeforeInsertHooks, vaultPeriodHook)
	case boil.AfterInsertHook:
		vaultPeriodAfterInsertHooks = append(vaultPeriodAfterInsertHooks, vaultPeriodHook)
	case boil.BeforeUpdateHook:
		vaultPeriodBeforeUpdateHooks = append(vaultPeriodBeforeUpdateHooks, vaultPeriodHook)
	case boil.AfterUpdateHook:
		vaultPeriodAfterUpdateHooks = append(vaultPeriodAfterUpdateHooks, vaultPeriodHook)
	case boil.BeforeDeleteHook:
		vaultPeriodBeforeDeleteHooks = append(vaultPeriodBeforeDeleteHooks, vaultPeriodHook)
	case boil.AfterDeleteHook:
		vaultPeriodAfterDeleteHooks = append(vaultPeriodAfterDeleteHooks, vaultPeriodHook)
	case boil.BeforeUpsertHook:
		vaultPeriodBeforeUpsertHooks = append(vaultPeriodBeforeUpsertHooks, vaultPeriodHook)
	case boil.AfterUpsertHook:
		vaultPeriodAfterUpsertHooks = append(vaultPeriodAfterUpsertHooks, vaultPeriodHook)
	}
}

// One returns a single vaultPeriod record from the query.
func (q vaultPeriodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VaultPeriod, error) {
	o := &VaultPeriod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vault_period")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VaultPeriod records from the query.
func (q vaultPeriodQuery) All(ctx context.Context, exec boil.ContextExecutor) (VaultPeriodSlice, error) {
	var o []*VaultPeriod

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VaultPeriod slice")
	}

	if len(vaultPeriodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VaultPeriod records in the query.
func (q vaultPeriodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vault_period rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vaultPeriodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vault_period exists")
	}

	return count > 0, nil
}

// VaultPeriodVault pointed to by the foreign key.
func (o *VaultPeriod) VaultPeriodVault(mods ...qm.QueryMod) vaultQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pubkey\" = ?", o.Vault),
	}

	queryMods = append(queryMods, mods...)

	return Vaults(queryMods...)
}

// LoadVaultPeriodVault allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vaultPeriodL) LoadVaultPeriodVault(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVaultPeriod interface{}, mods queries.Applicator) error {
	var slice []*VaultPeriod
	var object *VaultPeriod

	if singular {
		object = maybeVaultPeriod.(*VaultPeriod)
	} else {
		slice = *maybeVaultPeriod.(*[]*VaultPeriod)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vaultPeriodR{}
		}
		args = append(args, object.Vault)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vaultPeriodR{}
			}

			for _, a := range args {
				if a == obj.Vault {
					continue Outer
				}
			}

			args = append(args, obj.Vault)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vault`),
		qm.WhereIn(`vault.pubkey in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Vault")
	}

	var resultSlice []*Vault
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Vault")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vault")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vault")
	}

	if len(vaultPeriodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VaultPeriodVault = foreign
		if foreign.R == nil {
			foreign.R = &vaultR{}
		}
		foreign.R.VaultPeriods = append(foreign.R.VaultPeriods, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Vault == foreign.Pubkey {
				local.R.VaultPeriodVault = foreign
				if foreign.R == nil {
					foreign.R = &vaultR{}
				}
				foreign.R.VaultPeriods = append(foreign.R.VaultPeriods, local)
				break
			}
		}
	}

	return nil
}

// SetVaultPeriodVault of the vaultPeriod to the related item.
// Sets o.R.VaultPeriodVault to related.
// Adds o to related.R.VaultPeriods.
func (o *VaultPeriod) SetVaultPeriodVault(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Vault) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vault_period\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vault"}),
		strmangle.WhereClause("\"", "\"", 2, vaultPeriodPrimaryKeyColumns),
	)
	values := []interface{}{related.Pubkey, o.Pubkey}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Vault = related.Pubkey
	if o.R == nil {
		o.R = &vaultPeriodR{
			VaultPeriodVault: related,
		}
	} else {
		o.R.VaultPeriodVault = related
	}

	if related.R == nil {
		related.R = &vaultR{
			VaultPeriods: VaultPeriodSlice{o},
		}
	} else {
		related.R.VaultPeriods = append(related.R.VaultPeriods, o)
	}

	return nil
}

// VaultPeriods retrieves all the records using an executor.
func VaultPeriods(mods ...qm.QueryMod) vaultPeriodQuery {
	mods = append(mods, qm.From("\"vault_period\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vault_period\".*"})
	}

	return vaultPeriodQuery{q}
}

// FindVaultPeriod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVaultPeriod(ctx context.Context, exec boil.ContextExecutor, pubkey string, selectCols ...string) (*VaultPeriod, error) {
	vaultPeriodObj := &VaultPeriod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vault_period\" where \"pubkey\"=$1", sel,
	)

	q := queries.Raw(query, pubkey)

	err := q.Bind(ctx, exec, vaultPeriodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vault_period")
	}

	if err = vaultPeriodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vaultPeriodObj, err
	}

	return vaultPeriodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VaultPeriod) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vault_period provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vaultPeriodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vaultPeriodInsertCacheMut.RLock()
	cache, cached := vaultPeriodInsertCache[key]
	vaultPeriodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vaultPeriodAllColumns,
			vaultPeriodColumnsWithDefault,
			vaultPeriodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vaultPeriodType, vaultPeriodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vaultPeriodType, vaultPeriodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vault_period\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vault_period\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vault_period")
	}

	if !cached {
		vaultPeriodInsertCacheMut.Lock()
		vaultPeriodInsertCache[key] = cache
		vaultPeriodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VaultPeriod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VaultPeriod) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vaultPeriodUpdateCacheMut.RLock()
	cache, cached := vaultPeriodUpdateCache[key]
	vaultPeriodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vaultPeriodAllColumns,
			vaultPeriodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vault_period, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vault_period\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vaultPeriodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vaultPeriodType, vaultPeriodMapping, append(wl, vaultPeriodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vault_period row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vault_period")
	}

	if !cached {
		vaultPeriodUpdateCacheMut.Lock()
		vaultPeriodUpdateCache[key] = cache
		vaultPeriodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vaultPeriodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vault_period")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vault_period")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VaultPeriodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vaultPeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vault_period\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vaultPeriodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vaultPeriod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vaultPeriod")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VaultPeriod) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vault_period provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vaultPeriodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vaultPeriodUpsertCacheMut.RLock()
	cache, cached := vaultPeriodUpsertCache[key]
	vaultPeriodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vaultPeriodAllColumns,
			vaultPeriodColumnsWithDefault,
			vaultPeriodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vaultPeriodAllColumns,
			vaultPeriodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vault_period, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vaultPeriodPrimaryKeyColumns))
			copy(conflict, vaultPeriodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vault_period\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vaultPeriodType, vaultPeriodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vaultPeriodType, vaultPeriodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vault_period")
	}

	if !cached {
		vaultPeriodUpsertCacheMut.Lock()
		vaultPeriodUpsertCache[key] = cache
		vaultPeriodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VaultPeriod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VaultPeriod) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VaultPeriod provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vaultPeriodPrimaryKeyMapping)
	sql := "DELETE FROM \"vault_period\" WHERE \"pubkey\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vault_period")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vault_period")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vaultPeriodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vaultPeriodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vault_period")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vault_period")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VaultPeriodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vaultPeriodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vaultPeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vault_period\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vaultPeriodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vaultPeriod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vault_period")
	}

	if len(vaultPeriodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VaultPeriod) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVaultPeriod(ctx, exec, o.Pubkey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VaultPeriodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VaultPeriodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vaultPeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vault_period\".* FROM \"vault_period\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vaultPeriodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VaultPeriodSlice")
	}

	*o = slice

	return nil
}

// VaultPeriodExists checks if the VaultPeriod row exists.
func VaultPeriodExists(ctx context.Context, exec boil.ContextExecutor, pubkey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vault_period\" where \"pubkey\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pubkey)
	}
	row := exec.QueryRowContext(ctx, sql, pubkey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vault_period exists")
	}

	return exists, nil
}
