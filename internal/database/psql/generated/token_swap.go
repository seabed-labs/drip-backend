// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TokenSwap is an object representing the database table.
type TokenSwap struct {
	Pubkey        string `boil:"pubkey" json:"pubkey" toml:"pubkey" yaml:"pubkey"`
	Mint          string `boil:"mint" json:"mint" toml:"mint" yaml:"mint"`
	Authority     string `boil:"authority" json:"authority" toml:"authority" yaml:"authority"`
	FeeAccount    string `boil:"fee_account" json:"fee_account" toml:"fee_account" yaml:"fee_account"`
	TokenAAccount string `boil:"token_a_account" json:"token_a_account" toml:"token_a_account" yaml:"token_a_account"`
	TokenBAccount string `boil:"token_b_account" json:"token_b_account" toml:"token_b_account" yaml:"token_b_account"`
	Pair          string `boil:"pair" json:"pair" toml:"pair" yaml:"pair"`

	R *tokenSwapR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tokenSwapL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TokenSwapColumns = struct {
	Pubkey        string
	Mint          string
	Authority     string
	FeeAccount    string
	TokenAAccount string
	TokenBAccount string
	Pair          string
}{
	Pubkey:        "pubkey",
	Mint:          "mint",
	Authority:     "authority",
	FeeAccount:    "fee_account",
	TokenAAccount: "token_a_account",
	TokenBAccount: "token_b_account",
	Pair:          "pair",
}

var TokenSwapTableColumns = struct {
	Pubkey        string
	Mint          string
	Authority     string
	FeeAccount    string
	TokenAAccount string
	TokenBAccount string
	Pair          string
}{
	Pubkey:        "token_swap.pubkey",
	Mint:          "token_swap.mint",
	Authority:     "token_swap.authority",
	FeeAccount:    "token_swap.fee_account",
	TokenAAccount: "token_swap.token_a_account",
	TokenBAccount: "token_swap.token_b_account",
	Pair:          "token_swap.pair",
}

// Generated where

var TokenSwapWhere = struct {
	Pubkey        whereHelperstring
	Mint          whereHelperstring
	Authority     whereHelperstring
	FeeAccount    whereHelperstring
	TokenAAccount whereHelperstring
	TokenBAccount whereHelperstring
	Pair          whereHelperstring
}{
	Pubkey:        whereHelperstring{field: "\"token_swap\".\"pubkey\""},
	Mint:          whereHelperstring{field: "\"token_swap\".\"mint\""},
	Authority:     whereHelperstring{field: "\"token_swap\".\"authority\""},
	FeeAccount:    whereHelperstring{field: "\"token_swap\".\"fee_account\""},
	TokenAAccount: whereHelperstring{field: "\"token_swap\".\"token_a_account\""},
	TokenBAccount: whereHelperstring{field: "\"token_swap\".\"token_b_account\""},
	Pair:          whereHelperstring{field: "\"token_swap\".\"pair\""},
}

// TokenSwapRels is where relationship names are stored.
var TokenSwapRels = struct {
	PairTokenPair string
}{
	PairTokenPair: "PairTokenPair",
}

// tokenSwapR is where relationships are stored.
type tokenSwapR struct {
	PairTokenPair *TokenPair `boil:"PairTokenPair" json:"PairTokenPair" toml:"PairTokenPair" yaml:"PairTokenPair"`
}

// NewStruct creates a new relationship struct
func (*tokenSwapR) NewStruct() *tokenSwapR {
	return &tokenSwapR{}
}

func (r *tokenSwapR) GetPairTokenPair() *TokenPair {
	if r == nil {
		return nil
	}
	return r.PairTokenPair
}

// tokenSwapL is where Load methods for each relationship are stored.
type tokenSwapL struct{}

var (
	tokenSwapAllColumns            = []string{"pubkey", "mint", "authority", "fee_account", "token_a_account", "token_b_account", "pair"}
	tokenSwapColumnsWithoutDefault = []string{"pubkey", "mint", "authority", "fee_account", "token_a_account", "token_b_account", "pair"}
	tokenSwapColumnsWithDefault    = []string{}
	tokenSwapPrimaryKeyColumns     = []string{"pubkey"}
	tokenSwapGeneratedColumns      = []string{}
)

type (
	// TokenSwapSlice is an alias for a slice of pointers to TokenSwap.
	// This should almost always be used instead of []TokenSwap.
	TokenSwapSlice []*TokenSwap
	// TokenSwapHook is the signature for custom TokenSwap hook methods
	TokenSwapHook func(context.Context, boil.ContextExecutor, *TokenSwap) error

	tokenSwapQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tokenSwapType                 = reflect.TypeOf(&TokenSwap{})
	tokenSwapMapping              = queries.MakeStructMapping(tokenSwapType)
	tokenSwapPrimaryKeyMapping, _ = queries.BindMapping(tokenSwapType, tokenSwapMapping, tokenSwapPrimaryKeyColumns)
	tokenSwapInsertCacheMut       sync.RWMutex
	tokenSwapInsertCache          = make(map[string]insertCache)
	tokenSwapUpdateCacheMut       sync.RWMutex
	tokenSwapUpdateCache          = make(map[string]updateCache)
	tokenSwapUpsertCacheMut       sync.RWMutex
	tokenSwapUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tokenSwapAfterSelectHooks []TokenSwapHook

var tokenSwapBeforeInsertHooks []TokenSwapHook
var tokenSwapAfterInsertHooks []TokenSwapHook

var tokenSwapBeforeUpdateHooks []TokenSwapHook
var tokenSwapAfterUpdateHooks []TokenSwapHook

var tokenSwapBeforeDeleteHooks []TokenSwapHook
var tokenSwapAfterDeleteHooks []TokenSwapHook

var tokenSwapBeforeUpsertHooks []TokenSwapHook
var tokenSwapAfterUpsertHooks []TokenSwapHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TokenSwap) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenSwapAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TokenSwap) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenSwapBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TokenSwap) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenSwapAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TokenSwap) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenSwapBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TokenSwap) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenSwapAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TokenSwap) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenSwapBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TokenSwap) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenSwapAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TokenSwap) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenSwapBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TokenSwap) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenSwapAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTokenSwapHook registers your hook function for all future operations.
func AddTokenSwapHook(hookPoint boil.HookPoint, tokenSwapHook TokenSwapHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tokenSwapAfterSelectHooks = append(tokenSwapAfterSelectHooks, tokenSwapHook)
	case boil.BeforeInsertHook:
		tokenSwapBeforeInsertHooks = append(tokenSwapBeforeInsertHooks, tokenSwapHook)
	case boil.AfterInsertHook:
		tokenSwapAfterInsertHooks = append(tokenSwapAfterInsertHooks, tokenSwapHook)
	case boil.BeforeUpdateHook:
		tokenSwapBeforeUpdateHooks = append(tokenSwapBeforeUpdateHooks, tokenSwapHook)
	case boil.AfterUpdateHook:
		tokenSwapAfterUpdateHooks = append(tokenSwapAfterUpdateHooks, tokenSwapHook)
	case boil.BeforeDeleteHook:
		tokenSwapBeforeDeleteHooks = append(tokenSwapBeforeDeleteHooks, tokenSwapHook)
	case boil.AfterDeleteHook:
		tokenSwapAfterDeleteHooks = append(tokenSwapAfterDeleteHooks, tokenSwapHook)
	case boil.BeforeUpsertHook:
		tokenSwapBeforeUpsertHooks = append(tokenSwapBeforeUpsertHooks, tokenSwapHook)
	case boil.AfterUpsertHook:
		tokenSwapAfterUpsertHooks = append(tokenSwapAfterUpsertHooks, tokenSwapHook)
	}
}

// One returns a single tokenSwap record from the query.
func (q tokenSwapQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TokenSwap, error) {
	o := &TokenSwap{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for token_swap")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TokenSwap records from the query.
func (q tokenSwapQuery) All(ctx context.Context, exec boil.ContextExecutor) (TokenSwapSlice, error) {
	var o []*TokenSwap

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TokenSwap slice")
	}

	if len(tokenSwapAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TokenSwap records in the query.
func (q tokenSwapQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count token_swap rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tokenSwapQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if token_swap exists")
	}

	return count > 0, nil
}

// PairTokenPair pointed to by the foreign key.
func (o *TokenSwap) PairTokenPair(mods ...qm.QueryMod) tokenPairQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Pair),
	}

	queryMods = append(queryMods, mods...)

	return TokenPairs(queryMods...)
}

// LoadPairTokenPair allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tokenSwapL) LoadPairTokenPair(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTokenSwap interface{}, mods queries.Applicator) error {
	var slice []*TokenSwap
	var object *TokenSwap

	if singular {
		object = maybeTokenSwap.(*TokenSwap)
	} else {
		slice = *maybeTokenSwap.(*[]*TokenSwap)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tokenSwapR{}
		}
		args = append(args, object.Pair)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenSwapR{}
			}

			for _, a := range args {
				if a == obj.Pair {
					continue Outer
				}
			}

			args = append(args, obj.Pair)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`token_pair`),
		qm.WhereIn(`token_pair.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TokenPair")
	}

	var resultSlice []*TokenPair
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TokenPair")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for token_pair")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token_pair")
	}

	if len(tokenSwapAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PairTokenPair = foreign
		if foreign.R == nil {
			foreign.R = &tokenPairR{}
		}
		foreign.R.PairTokenSwaps = append(foreign.R.PairTokenSwaps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Pair == foreign.ID {
				local.R.PairTokenPair = foreign
				if foreign.R == nil {
					foreign.R = &tokenPairR{}
				}
				foreign.R.PairTokenSwaps = append(foreign.R.PairTokenSwaps, local)
				break
			}
		}
	}

	return nil
}

// SetPairTokenPair of the tokenSwap to the related item.
// Sets o.R.PairTokenPair to related.
// Adds o to related.R.PairTokenSwaps.
func (o *TokenSwap) SetPairTokenPair(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TokenPair) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"token_swap\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pair"}),
		strmangle.WhereClause("\"", "\"", 2, tokenSwapPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Pubkey}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Pair = related.ID
	if o.R == nil {
		o.R = &tokenSwapR{
			PairTokenPair: related,
		}
	} else {
		o.R.PairTokenPair = related
	}

	if related.R == nil {
		related.R = &tokenPairR{
			PairTokenSwaps: TokenSwapSlice{o},
		}
	} else {
		related.R.PairTokenSwaps = append(related.R.PairTokenSwaps, o)
	}

	return nil
}

// TokenSwaps retrieves all the records using an executor.
func TokenSwaps(mods ...qm.QueryMod) tokenSwapQuery {
	mods = append(mods, qm.From("\"token_swap\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"token_swap\".*"})
	}

	return tokenSwapQuery{q}
}

// FindTokenSwap retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTokenSwap(ctx context.Context, exec boil.ContextExecutor, pubkey string, selectCols ...string) (*TokenSwap, error) {
	tokenSwapObj := &TokenSwap{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"token_swap\" where \"pubkey\"=$1", sel,
	)

	q := queries.Raw(query, pubkey)

	err := q.Bind(ctx, exec, tokenSwapObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from token_swap")
	}

	if err = tokenSwapObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tokenSwapObj, err
	}

	return tokenSwapObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TokenSwap) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_swap provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenSwapColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tokenSwapInsertCacheMut.RLock()
	cache, cached := tokenSwapInsertCache[key]
	tokenSwapInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tokenSwapAllColumns,
			tokenSwapColumnsWithDefault,
			tokenSwapColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tokenSwapType, tokenSwapMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tokenSwapType, tokenSwapMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"token_swap\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"token_swap\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into token_swap")
	}

	if !cached {
		tokenSwapInsertCacheMut.Lock()
		tokenSwapInsertCache[key] = cache
		tokenSwapInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TokenSwap.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TokenSwap) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tokenSwapUpdateCacheMut.RLock()
	cache, cached := tokenSwapUpdateCache[key]
	tokenSwapUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tokenSwapAllColumns,
			tokenSwapPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update token_swap, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"token_swap\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tokenSwapPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tokenSwapType, tokenSwapMapping, append(wl, tokenSwapPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update token_swap row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for token_swap")
	}

	if !cached {
		tokenSwapUpdateCacheMut.Lock()
		tokenSwapUpdateCache[key] = cache
		tokenSwapUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tokenSwapQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for token_swap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for token_swap")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TokenSwapSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenSwapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"token_swap\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tokenSwapPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tokenSwap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tokenSwap")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TokenSwap) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_swap provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenSwapColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tokenSwapUpsertCacheMut.RLock()
	cache, cached := tokenSwapUpsertCache[key]
	tokenSwapUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tokenSwapAllColumns,
			tokenSwapColumnsWithDefault,
			tokenSwapColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tokenSwapAllColumns,
			tokenSwapPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert token_swap, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tokenSwapPrimaryKeyColumns))
			copy(conflict, tokenSwapPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"token_swap\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tokenSwapType, tokenSwapMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tokenSwapType, tokenSwapMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert token_swap")
	}

	if !cached {
		tokenSwapUpsertCacheMut.Lock()
		tokenSwapUpsertCache[key] = cache
		tokenSwapUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TokenSwap record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TokenSwap) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TokenSwap provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tokenSwapPrimaryKeyMapping)
	sql := "DELETE FROM \"token_swap\" WHERE \"pubkey\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from token_swap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for token_swap")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tokenSwapQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tokenSwapQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from token_swap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_swap")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TokenSwapSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tokenSwapBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenSwapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"token_swap\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenSwapPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tokenSwap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_swap")
	}

	if len(tokenSwapAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TokenSwap) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTokenSwap(ctx, exec, o.Pubkey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TokenSwapSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TokenSwapSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenSwapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"token_swap\".* FROM \"token_swap\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenSwapPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TokenSwapSlice")
	}

	*o = slice

	return nil
}

// TokenSwapExists checks if the TokenSwap row exists.
func TokenSwapExists(ctx context.Context, exec boil.ContextExecutor, pubkey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"token_swap\" where \"pubkey\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pubkey)
	}
	row := exec.QueryRowContext(ctx, sql, pubkey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if token_swap exists")
	}

	return exists, nil
}
