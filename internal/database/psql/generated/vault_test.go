// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVaults(t *testing.T) {
	t.Parallel()

	query := Vaults()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVaultsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vaults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVaultsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Vaults().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vaults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVaultsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VaultSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vaults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVaultsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VaultExists(ctx, tx, o.Pubkey)
	if err != nil {
		t.Errorf("Unable to check if Vault exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VaultExists to return true, but got false.")
	}
}

func testVaultsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	vaultFound, err := FindVault(ctx, tx, o.Pubkey)
	if err != nil {
		t.Error(err)
	}

	if vaultFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVaultsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Vaults().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVaultsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Vaults().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVaultsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vaultOne := &Vault{}
	vaultTwo := &Vault{}
	if err = randomize.Struct(seed, vaultOne, vaultDBTypes, false, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}
	if err = randomize.Struct(seed, vaultTwo, vaultDBTypes, false, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = vaultOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = vaultTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Vaults().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVaultsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	vaultOne := &Vault{}
	vaultTwo := &Vault{}
	if err = randomize.Struct(seed, vaultOne, vaultDBTypes, false, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}
	if err = randomize.Struct(seed, vaultTwo, vaultDBTypes, false, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = vaultOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = vaultTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vaults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func vaultBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Vault) error {
	*o = Vault{}
	return nil
}

func vaultAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Vault) error {
	*o = Vault{}
	return nil
}

func vaultAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Vault) error {
	*o = Vault{}
	return nil
}

func vaultBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Vault) error {
	*o = Vault{}
	return nil
}

func vaultAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Vault) error {
	*o = Vault{}
	return nil
}

func vaultBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Vault) error {
	*o = Vault{}
	return nil
}

func vaultAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Vault) error {
	*o = Vault{}
	return nil
}

func vaultBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Vault) error {
	*o = Vault{}
	return nil
}

func vaultAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Vault) error {
	*o = Vault{}
	return nil
}

func testVaultsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Vault{}
	o := &Vault{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, vaultDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Vault object: %s", err)
	}

	AddVaultHook(boil.BeforeInsertHook, vaultBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	vaultBeforeInsertHooks = []VaultHook{}

	AddVaultHook(boil.AfterInsertHook, vaultAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	vaultAfterInsertHooks = []VaultHook{}

	AddVaultHook(boil.AfterSelectHook, vaultAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	vaultAfterSelectHooks = []VaultHook{}

	AddVaultHook(boil.BeforeUpdateHook, vaultBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	vaultBeforeUpdateHooks = []VaultHook{}

	AddVaultHook(boil.AfterUpdateHook, vaultAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	vaultAfterUpdateHooks = []VaultHook{}

	AddVaultHook(boil.BeforeDeleteHook, vaultBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	vaultBeforeDeleteHooks = []VaultHook{}

	AddVaultHook(boil.AfterDeleteHook, vaultAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	vaultAfterDeleteHooks = []VaultHook{}

	AddVaultHook(boil.BeforeUpsertHook, vaultBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	vaultBeforeUpsertHooks = []VaultHook{}

	AddVaultHook(boil.AfterUpsertHook, vaultAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	vaultAfterUpsertHooks = []VaultHook{}
}

func testVaultsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vaults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVaultsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(vaultColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Vaults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVaultToManyPositions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Vault
	var b, c Position

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, positionDBTypes, false, positionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, positionDBTypes, false, positionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Vault = a.Pubkey
	c.Vault = a.Pubkey

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Positions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Vault == b.Vault {
			bFound = true
		}
		if v.Vault == c.Vault {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VaultSlice{&a}
	if err = a.L.LoadPositions(ctx, tx, false, (*[]*Vault)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Positions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Positions = nil
	if err = a.L.LoadPositions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Positions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testVaultToManyVaultPeriods(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Vault
	var b, c VaultPeriod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, vaultPeriodDBTypes, false, vaultPeriodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, vaultPeriodDBTypes, false, vaultPeriodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Vault = a.Pubkey
	c.Vault = a.Pubkey

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VaultPeriods().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Vault == b.Vault {
			bFound = true
		}
		if v.Vault == c.Vault {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VaultSlice{&a}
	if err = a.L.LoadVaultPeriods(ctx, tx, false, (*[]*Vault)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VaultPeriods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VaultPeriods = nil
	if err = a.L.LoadVaultPeriods(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VaultPeriods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testVaultToManyAddOpPositions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Vault
	var b, c, d, e Position

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, vaultDBTypes, false, strmangle.SetComplement(vaultPrimaryKeyColumns, vaultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Position{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, positionDBTypes, false, strmangle.SetComplement(positionPrimaryKeyColumns, positionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Position{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPositions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Pubkey != first.Vault {
			t.Error("foreign key was wrong value", a.Pubkey, first.Vault)
		}
		if a.Pubkey != second.Vault {
			t.Error("foreign key was wrong value", a.Pubkey, second.Vault)
		}

		if first.R.PositionVault != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PositionVault != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Positions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Positions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Positions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVaultToManyAddOpVaultPeriods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Vault
	var b, c, d, e VaultPeriod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, vaultDBTypes, false, strmangle.SetComplement(vaultPrimaryKeyColumns, vaultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VaultPeriod{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, vaultPeriodDBTypes, false, strmangle.SetComplement(vaultPeriodPrimaryKeyColumns, vaultPeriodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VaultPeriod{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVaultPeriods(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Pubkey != first.Vault {
			t.Error("foreign key was wrong value", a.Pubkey, first.Vault)
		}
		if a.Pubkey != second.Vault {
			t.Error("foreign key was wrong value", a.Pubkey, second.Vault)
		}

		if first.R.VaultPeriodVault != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VaultPeriodVault != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VaultPeriods[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VaultPeriods[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VaultPeriods().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVaultToOneProtoConfigUsingVaultProtoConfig(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Vault
	var foreign ProtoConfig

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, vaultDBTypes, false, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, protoConfigDBTypes, false, protoConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProtoConfig struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProtoConfig = foreign.Pubkey
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.VaultProtoConfig().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Pubkey != foreign.Pubkey {
		t.Errorf("want: %v, got %v", foreign.Pubkey, check.Pubkey)
	}

	slice := VaultSlice{&local}
	if err = local.L.LoadVaultProtoConfig(ctx, tx, false, (*[]*Vault)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VaultProtoConfig == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VaultProtoConfig = nil
	if err = local.L.LoadVaultProtoConfig(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VaultProtoConfig == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVaultToOneSetOpProtoConfigUsingVaultProtoConfig(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Vault
	var b, c ProtoConfig

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, vaultDBTypes, false, strmangle.SetComplement(vaultPrimaryKeyColumns, vaultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, protoConfigDBTypes, false, strmangle.SetComplement(protoConfigPrimaryKeyColumns, protoConfigColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, protoConfigDBTypes, false, strmangle.SetComplement(protoConfigPrimaryKeyColumns, protoConfigColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProtoConfig{&b, &c} {
		err = a.SetVaultProtoConfig(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VaultProtoConfig != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Vaults[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProtoConfig != x.Pubkey {
			t.Error("foreign key was wrong value", a.ProtoConfig)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProtoConfig))
		reflect.Indirect(reflect.ValueOf(&a.ProtoConfig)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProtoConfig != x.Pubkey {
			t.Error("foreign key was wrong value", a.ProtoConfig, x.Pubkey)
		}
	}
}

func testVaultsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVaultsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VaultSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVaultsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Vaults().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	vaultDBTypes = map[string]string{`Pubkey`: `character varying`, `ProtoConfig`: `character varying`, `TokenAMint`: `character varying`, `TokenBMint`: `character varying`, `TokenAAccount`: `character varying`, `TokenBAccount`: `character varying`, `TreasuryTokenBAccount`: `character varying`, `LastDcaPeriod`: `numeric`, `DripAmount`: `numeric`, `DcaActivationTimestamp`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testVaultsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(vaultPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(vaultAllColumns) == len(vaultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vaults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVaultsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(vaultAllColumns) == len(vaultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Vault{}
	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vaults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, vaultDBTypes, true, vaultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(vaultAllColumns, vaultPrimaryKeyColumns) {
		fields = vaultAllColumns
	} else {
		fields = strmangle.SetComplement(
			vaultAllColumns,
			vaultPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VaultSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVaultsUpsert(t *testing.T) {
	t.Parallel()

	if len(vaultAllColumns) == len(vaultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Vault{}
	if err = randomize.Struct(seed, &o, vaultDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Vault: %s", err)
	}

	count, err := Vaults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, vaultDBTypes, false, vaultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vault struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Vault: %s", err)
	}

	count, err = Vaults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
