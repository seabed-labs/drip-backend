// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTokenSwaps(t *testing.T) {
	t.Parallel()

	query := TokenSwaps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTokenSwapsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenSwaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenSwapsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TokenSwaps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenSwaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenSwapsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TokenSwapSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenSwaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenSwapsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TokenSwapExists(ctx, tx, o.Pubkey)
	if err != nil {
		t.Errorf("Unable to check if TokenSwap exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TokenSwapExists to return true, but got false.")
	}
}

func testTokenSwapsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tokenSwapFound, err := FindTokenSwap(ctx, tx, o.Pubkey)
	if err != nil {
		t.Error(err)
	}

	if tokenSwapFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTokenSwapsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TokenSwaps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTokenSwapsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TokenSwaps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTokenSwapsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tokenSwapOne := &TokenSwap{}
	tokenSwapTwo := &TokenSwap{}
	if err = randomize.Struct(seed, tokenSwapOne, tokenSwapDBTypes, false, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}
	if err = randomize.Struct(seed, tokenSwapTwo, tokenSwapDBTypes, false, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tokenSwapOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tokenSwapTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TokenSwaps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTokenSwapsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tokenSwapOne := &TokenSwap{}
	tokenSwapTwo := &TokenSwap{}
	if err = randomize.Struct(seed, tokenSwapOne, tokenSwapDBTypes, false, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}
	if err = randomize.Struct(seed, tokenSwapTwo, tokenSwapDBTypes, false, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tokenSwapOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tokenSwapTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenSwaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tokenSwapBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenSwap) error {
	*o = TokenSwap{}
	return nil
}

func tokenSwapAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenSwap) error {
	*o = TokenSwap{}
	return nil
}

func tokenSwapAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TokenSwap) error {
	*o = TokenSwap{}
	return nil
}

func tokenSwapBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TokenSwap) error {
	*o = TokenSwap{}
	return nil
}

func tokenSwapAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TokenSwap) error {
	*o = TokenSwap{}
	return nil
}

func tokenSwapBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TokenSwap) error {
	*o = TokenSwap{}
	return nil
}

func tokenSwapAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TokenSwap) error {
	*o = TokenSwap{}
	return nil
}

func tokenSwapBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenSwap) error {
	*o = TokenSwap{}
	return nil
}

func tokenSwapAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenSwap) error {
	*o = TokenSwap{}
	return nil
}

func testTokenSwapsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TokenSwap{}
	o := &TokenSwap{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TokenSwap object: %s", err)
	}

	AddTokenSwapHook(boil.BeforeInsertHook, tokenSwapBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tokenSwapBeforeInsertHooks = []TokenSwapHook{}

	AddTokenSwapHook(boil.AfterInsertHook, tokenSwapAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tokenSwapAfterInsertHooks = []TokenSwapHook{}

	AddTokenSwapHook(boil.AfterSelectHook, tokenSwapAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tokenSwapAfterSelectHooks = []TokenSwapHook{}

	AddTokenSwapHook(boil.BeforeUpdateHook, tokenSwapBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tokenSwapBeforeUpdateHooks = []TokenSwapHook{}

	AddTokenSwapHook(boil.AfterUpdateHook, tokenSwapAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tokenSwapAfterUpdateHooks = []TokenSwapHook{}

	AddTokenSwapHook(boil.BeforeDeleteHook, tokenSwapBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tokenSwapBeforeDeleteHooks = []TokenSwapHook{}

	AddTokenSwapHook(boil.AfterDeleteHook, tokenSwapAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tokenSwapAfterDeleteHooks = []TokenSwapHook{}

	AddTokenSwapHook(boil.BeforeUpsertHook, tokenSwapBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tokenSwapBeforeUpsertHooks = []TokenSwapHook{}

	AddTokenSwapHook(boil.AfterUpsertHook, tokenSwapAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tokenSwapAfterUpsertHooks = []TokenSwapHook{}
}

func testTokenSwapsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenSwaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTokenSwapsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tokenSwapColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TokenSwaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTokenSwapToOneTokenPairUsingPairTokenPair(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TokenSwap
	var foreign TokenPair

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tokenSwapDBTypes, false, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tokenPairDBTypes, false, tokenPairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPair struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Pair = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PairTokenPair().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TokenSwapSlice{&local}
	if err = local.L.LoadPairTokenPair(ctx, tx, false, (*[]*TokenSwap)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PairTokenPair == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PairTokenPair = nil
	if err = local.L.LoadPairTokenPair(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PairTokenPair == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTokenSwapToOneSetOpTokenPairUsingPairTokenPair(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenSwap
	var b, c TokenPair

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenSwapDBTypes, false, strmangle.SetComplement(tokenSwapPrimaryKeyColumns, tokenSwapColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tokenPairDBTypes, false, strmangle.SetComplement(tokenPairPrimaryKeyColumns, tokenPairColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tokenPairDBTypes, false, strmangle.SetComplement(tokenPairPrimaryKeyColumns, tokenPairColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TokenPair{&b, &c} {
		err = a.SetPairTokenPair(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PairTokenPair != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PairTokenSwaps[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Pair != x.ID {
			t.Error("foreign key was wrong value", a.Pair)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Pair))
		reflect.Indirect(reflect.ValueOf(&a.Pair)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Pair != x.ID {
			t.Error("foreign key was wrong value", a.Pair, x.ID)
		}
	}
}

func testTokenSwapsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTokenSwapsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TokenSwapSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTokenSwapsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TokenSwaps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tokenSwapDBTypes = map[string]string{`Pubkey`: `character varying`, `Mint`: `character varying`, `Authority`: `character varying`, `FeeAccount`: `character varying`, `TokenAAccount`: `character varying`, `TokenBAccount`: `character varying`, `Pair`: `uuid`}
	_                = bytes.MinRead
)

func testTokenSwapsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tokenSwapPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tokenSwapAllColumns) == len(tokenSwapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenSwaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTokenSwapsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tokenSwapAllColumns) == len(tokenSwapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TokenSwap{}
	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenSwaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tokenSwapDBTypes, true, tokenSwapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tokenSwapAllColumns, tokenSwapPrimaryKeyColumns) {
		fields = tokenSwapAllColumns
	} else {
		fields = strmangle.SetComplement(
			tokenSwapAllColumns,
			tokenSwapPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TokenSwapSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTokenSwapsUpsert(t *testing.T) {
	t.Parallel()

	if len(tokenSwapAllColumns) == len(tokenSwapPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TokenSwap{}
	if err = randomize.Struct(seed, &o, tokenSwapDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TokenSwap: %s", err)
	}

	count, err := TokenSwaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tokenSwapDBTypes, false, tokenSwapPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenSwap struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TokenSwap: %s", err)
	}

	count, err = TokenSwaps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
