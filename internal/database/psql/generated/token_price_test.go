// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTokenPrices(t *testing.T) {
	t.Parallel()

	query := TokenPrices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTokenPricesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenPrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenPricesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TokenPrices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenPrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenPricesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TokenPriceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenPrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenPricesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TokenPriceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TokenPrice exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TokenPriceExists to return true, but got false.")
	}
}

func testTokenPricesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tokenPriceFound, err := FindTokenPrice(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tokenPriceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTokenPricesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TokenPrices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTokenPricesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TokenPrices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTokenPricesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tokenPriceOne := &TokenPrice{}
	tokenPriceTwo := &TokenPrice{}
	if err = randomize.Struct(seed, tokenPriceOne, tokenPriceDBTypes, false, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}
	if err = randomize.Struct(seed, tokenPriceTwo, tokenPriceDBTypes, false, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tokenPriceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tokenPriceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TokenPrices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTokenPricesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tokenPriceOne := &TokenPrice{}
	tokenPriceTwo := &TokenPrice{}
	if err = randomize.Struct(seed, tokenPriceOne, tokenPriceDBTypes, false, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}
	if err = randomize.Struct(seed, tokenPriceTwo, tokenPriceDBTypes, false, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tokenPriceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tokenPriceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tokenPriceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPrice) error {
	*o = TokenPrice{}
	return nil
}

func tokenPriceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPrice) error {
	*o = TokenPrice{}
	return nil
}

func tokenPriceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TokenPrice) error {
	*o = TokenPrice{}
	return nil
}

func tokenPriceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TokenPrice) error {
	*o = TokenPrice{}
	return nil
}

func tokenPriceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TokenPrice) error {
	*o = TokenPrice{}
	return nil
}

func tokenPriceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TokenPrice) error {
	*o = TokenPrice{}
	return nil
}

func tokenPriceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TokenPrice) error {
	*o = TokenPrice{}
	return nil
}

func tokenPriceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPrice) error {
	*o = TokenPrice{}
	return nil
}

func tokenPriceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPrice) error {
	*o = TokenPrice{}
	return nil
}

func testTokenPricesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TokenPrice{}
	o := &TokenPrice{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TokenPrice object: %s", err)
	}

	AddTokenPriceHook(boil.BeforeInsertHook, tokenPriceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tokenPriceBeforeInsertHooks = []TokenPriceHook{}

	AddTokenPriceHook(boil.AfterInsertHook, tokenPriceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tokenPriceAfterInsertHooks = []TokenPriceHook{}

	AddTokenPriceHook(boil.AfterSelectHook, tokenPriceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tokenPriceAfterSelectHooks = []TokenPriceHook{}

	AddTokenPriceHook(boil.BeforeUpdateHook, tokenPriceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tokenPriceBeforeUpdateHooks = []TokenPriceHook{}

	AddTokenPriceHook(boil.AfterUpdateHook, tokenPriceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tokenPriceAfterUpdateHooks = []TokenPriceHook{}

	AddTokenPriceHook(boil.BeforeDeleteHook, tokenPriceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tokenPriceBeforeDeleteHooks = []TokenPriceHook{}

	AddTokenPriceHook(boil.AfterDeleteHook, tokenPriceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tokenPriceAfterDeleteHooks = []TokenPriceHook{}

	AddTokenPriceHook(boil.BeforeUpsertHook, tokenPriceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tokenPriceBeforeUpsertHooks = []TokenPriceHook{}

	AddTokenPriceHook(boil.AfterUpsertHook, tokenPriceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tokenPriceAfterUpsertHooks = []TokenPriceHook{}
}

func testTokenPricesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTokenPricesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tokenPriceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TokenPrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTokenPriceToOneTokenUsingBaseToken(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TokenPrice
	var foreign Token

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tokenDBTypes, false, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Base, foreign.Pubkey)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BaseToken().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Pubkey, foreign.Pubkey) {
		t.Errorf("want: %v, got %v", foreign.Pubkey, check.Pubkey)
	}

	slice := TokenPriceSlice{&local}
	if err = local.L.LoadBaseToken(ctx, tx, false, (*[]*TokenPrice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BaseToken == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BaseToken = nil
	if err = local.L.LoadBaseToken(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BaseToken == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTokenPriceToOneTokenUsingQuoteToken(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TokenPrice
	var foreign Token

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tokenDBTypes, false, tokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Token struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Quote, foreign.Pubkey)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.QuoteToken().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Pubkey, foreign.Pubkey) {
		t.Errorf("want: %v, got %v", foreign.Pubkey, check.Pubkey)
	}

	slice := TokenPriceSlice{&local}
	if err = local.L.LoadQuoteToken(ctx, tx, false, (*[]*TokenPrice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.QuoteToken == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.QuoteToken = nil
	if err = local.L.LoadQuoteToken(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.QuoteToken == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTokenPriceToOneSourceReferenceUsingSourceSourceReference(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TokenPrice
	var foreign SourceReference

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sourceReferenceDBTypes, false, sourceReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SourceReference struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Source, foreign.Value)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SourceSourceReference().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Value, foreign.Value) {
		t.Errorf("want: %v, got %v", foreign.Value, check.Value)
	}

	slice := TokenPriceSlice{&local}
	if err = local.L.LoadSourceSourceReference(ctx, tx, false, (*[]*TokenPrice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SourceSourceReference == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SourceSourceReference = nil
	if err = local.L.LoadSourceSourceReference(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SourceSourceReference == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTokenPriceToOneSetOpTokenUsingBaseToken(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenPrice
	var b, c Token

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Token{&b, &c} {
		err = a.SetBaseToken(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BaseToken != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BaseTokenPrices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Base, x.Pubkey) {
			t.Error("foreign key was wrong value", a.Base)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Base))
		reflect.Indirect(reflect.ValueOf(&a.Base)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Base, x.Pubkey) {
			t.Error("foreign key was wrong value", a.Base, x.Pubkey)
		}
	}
}

func testTokenPriceToOneRemoveOpTokenUsingBaseToken(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenPrice
	var b Token

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBaseToken(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBaseToken(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.BaseToken().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.BaseToken != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Base) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.BaseTokenPrices) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTokenPriceToOneSetOpTokenUsingQuoteToken(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenPrice
	var b, c Token

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Token{&b, &c} {
		err = a.SetQuoteToken(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.QuoteToken != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.QuoteTokenPrices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Quote, x.Pubkey) {
			t.Error("foreign key was wrong value", a.Quote)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Quote))
		reflect.Indirect(reflect.ValueOf(&a.Quote)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Quote, x.Pubkey) {
			t.Error("foreign key was wrong value", a.Quote, x.Pubkey)
		}
	}
}

func testTokenPriceToOneRemoveOpTokenUsingQuoteToken(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenPrice
	var b Token

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tokenDBTypes, false, strmangle.SetComplement(tokenPrimaryKeyColumns, tokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetQuoteToken(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveQuoteToken(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.QuoteToken().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.QuoteToken != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Quote) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.QuoteTokenPrices) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTokenPriceToOneSetOpSourceReferenceUsingSourceSourceReference(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenPrice
	var b, c SourceReference

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sourceReferenceDBTypes, false, strmangle.SetComplement(sourceReferencePrimaryKeyColumns, sourceReferenceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sourceReferenceDBTypes, false, strmangle.SetComplement(sourceReferencePrimaryKeyColumns, sourceReferenceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SourceReference{&b, &c} {
		err = a.SetSourceSourceReference(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SourceSourceReference != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SourceTokenPrices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Source, x.Value) {
			t.Error("foreign key was wrong value", a.Source)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Source))
		reflect.Indirect(reflect.ValueOf(&a.Source)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Source, x.Value) {
			t.Error("foreign key was wrong value", a.Source, x.Value)
		}
	}
}

func testTokenPriceToOneRemoveOpSourceReferenceUsingSourceSourceReference(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenPrice
	var b SourceReference

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenPriceDBTypes, false, strmangle.SetComplement(tokenPricePrimaryKeyColumns, tokenPriceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sourceReferenceDBTypes, false, strmangle.SetComplement(sourceReferencePrimaryKeyColumns, sourceReferenceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSourceSourceReference(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSourceSourceReference(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SourceSourceReference().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SourceSourceReference != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Source) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SourceTokenPrices) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTokenPricesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTokenPricesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TokenPriceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTokenPricesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TokenPrices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tokenPriceDBTypes = map[string]string{`ID`: `integer`, `Base`: `character varying`, `Quote`: `character varying`, `Close`: `numeric`, `Date`: `timestamp without time zone`, `Source`: `character varying`}
	_                 = bytes.MinRead
)

func testTokenPricesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tokenPricePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tokenPriceAllColumns) == len(tokenPricePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPricePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTokenPricesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tokenPriceAllColumns) == len(tokenPricePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TokenPrice{}
	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPriceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tokenPriceDBTypes, true, tokenPricePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tokenPriceAllColumns, tokenPricePrimaryKeyColumns) {
		fields = tokenPriceAllColumns
	} else {
		fields = strmangle.SetComplement(
			tokenPriceAllColumns,
			tokenPricePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TokenPriceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTokenPricesUpsert(t *testing.T) {
	t.Parallel()

	if len(tokenPriceAllColumns) == len(tokenPricePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TokenPrice{}
	if err = randomize.Struct(seed, &o, tokenPriceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TokenPrice: %s", err)
	}

	count, err := TokenPrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tokenPriceDBTypes, false, tokenPricePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenPrice struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TokenPrice: %s", err)
	}

	count, err = TokenPrices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
