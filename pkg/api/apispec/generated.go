// Package apispec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package apispec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ActiveWallet defines model for activeWallet.
type ActiveWallet struct {
	Owner         string `json:"owner"`
	PositionCount int    `json:"positionCount"`
}

// DripCommon defines model for dripCommon.
type DripCommon struct {
	TokenAMint         string `json:"tokenAMint"`
	TokenBMint         string `json:"tokenBMint"`
	Vault              string `json:"vault"`
	VaultProtoConfig   string `json:"vaultProtoConfig"`
	VaultTokenAAccount string `json:"vaultTokenAAccount"`
	VaultTokenBAccount string `json:"vaultTokenBAccount"`
}

// ErrorResponse defines model for errorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// ExpandedAdminPosition defines model for expandedAdminPosition.
type ExpandedAdminPosition struct {
	Authority                string       `json:"authority"`
	DcaPeriodIdBeforeDeposit string       `json:"dcaPeriodIdBeforeDeposit"`
	DepositTimestamp         string       `json:"depositTimestamp"`
	DepositedTokenAAmount    string       `json:"depositedTokenAAmount"`
	IsClosed                 bool         `json:"isClosed"`
	NumberOfSwaps            string       `json:"numberOfSwaps"`
	PeriodicDripAmount       string       `json:"periodicDripAmount"`
	ProtoConfig              *ProtoConfig `json:"protoConfig,omitempty"`
	Pubkey                   string       `json:"pubkey"`
	TokenA                   *Token       `json:"tokenA,omitempty"`
	TokenB                   *Token       `json:"tokenB,omitempty"`
	Vault                    Vault        `json:"vault"`
	WithdrawnTokenBAmount    string       `json:"withdrawnTokenBAmount"`
}

// ExpandedAdminVault defines model for expandedAdminVault.
type ExpandedAdminVault struct {
	// unix timestamp
	DcaActivationTimestamp     string               `json:"dcaActivationTimestamp"`
	DripAmount                 string               `json:"dripAmount"`
	Enabled                    bool                 `json:"enabled"`
	LastDcaPeriod              string               `json:"lastDcaPeriod"`
	ProtoConfig                string               `json:"protoConfig"`
	ProtoConfigValue           *ProtoConfig         `json:"protoConfigValue,omitempty"`
	Pubkey                     string               `json:"pubkey"`
	TokenAAccount              string               `json:"tokenAAccount"`
	TokenAAccountValue         *TokenAccountBalance `json:"tokenAAccountValue,omitempty"`
	TokenAMint                 string               `json:"tokenAMint"`
	TokenAMintValue            *Token               `json:"tokenAMintValue,omitempty"`
	TokenBAccount              string               `json:"tokenBAccount"`
	TokenBAccountValue         *TokenAccountBalance `json:"tokenBAccountValue,omitempty"`
	TokenBMint                 string               `json:"tokenBMint"`
	TokenBMintValue            *Token               `json:"tokenBMintValue,omitempty"`
	TreasuryTokenBAccount      string               `json:"treasuryTokenBAccount"`
	TreasuryTokenBAccountValue *TokenAccountBalance `json:"treasuryTokenBAccountValue,omitempty"`
}

// ListActiveWallets defines model for listActiveWallets.
type ListActiveWallets = []ActiveWallet

// ListAdminPositions defines model for listAdminPositions.
type ListAdminPositions = []ExpandedAdminPosition

// ListExpandedAdminVaults defines model for listExpandedAdminVaults.
type ListExpandedAdminVaults = []ExpandedAdminVault

// ListOrcaWhirlpoolConfigs defines model for listOrcaWhirlpoolConfigs.
type ListOrcaWhirlpoolConfigs = []OrcaWhirlpoolConfig

// ListPositions defines model for listPositions.
type ListPositions = []Position

// ListProtoConfigs defines model for listProtoConfigs.
type ListProtoConfigs = []ProtoConfig

// ListSplTokenSwapConfigs defines model for listSplTokenSwapConfigs.
type ListSplTokenSwapConfigs = []SplTokenSwapConfig

// ListTokens defines model for listTokens.
type ListTokens = []Token

// ListVaultPeriods defines model for listVaultPeriods.
type ListVaultPeriods = []VaultPeriod

// ListVaults defines model for listVaults.
type ListVaults = []Vault

// MintRequest defines model for mintRequest.
type MintRequest struct {
	Amount string `json:"amount"`
	Mint   string `json:"mint"`
	Wallet string `json:"wallet"`
}

// MintResponse defines model for mintResponse.
type MintResponse struct {
	TxHash string `json:"txHash"`
}

// OrcaWhirlpoolConfig defines model for orcaWhirlpoolConfig.
type OrcaWhirlpoolConfig struct {
	Oracle             string `json:"oracle"`
	TokenAMint         string `json:"tokenAMint"`
	TokenBMint         string `json:"tokenBMint"`
	TokenVaultA        string `json:"tokenVaultA"`
	TokenVaultB        string `json:"tokenVaultB"`
	Vault              string `json:"vault"`
	VaultProtoConfig   string `json:"vaultProtoConfig"`
	VaultTokenAAccount string `json:"vaultTokenAAccount"`
	VaultTokenBAccount string `json:"vaultTokenBAccount"`
	Whirlpool          string `json:"whirlpool"`
}

// PingResponse defines model for pingResponse.
type PingResponse struct {
	Message string `json:"message"`
}

// Position defines model for position.
type Position struct {
	Authority                string `json:"authority"`
	DcaPeriodIdBeforeDeposit string `json:"dcaPeriodIdBeforeDeposit"`
	DepositTimestamp         string `json:"depositTimestamp"`
	DepositedTokenAAmount    string `json:"depositedTokenAAmount"`
	IsClosed                 bool   `json:"isClosed"`
	NumberOfSwaps            string `json:"numberOfSwaps"`
	PeriodicDripAmount       string `json:"periodicDripAmount"`
	Pubkey                   string `json:"pubkey"`
	Vault                    string `json:"vault"`
	WithdrawnTokenBAmount    string `json:"withdrawnTokenBAmount"`
}

// ProtoConfig defines model for protoConfig.
type ProtoConfig struct {
	Admin                   string `json:"admin"`
	Granularity             string `json:"granularity"`
	Pubkey                  string `json:"pubkey"`
	TokenADripTriggerSpread int    `json:"tokenADripTriggerSpread"`
	TokenBReferralSpread    int    `json:"tokenBReferralSpread"`
	TokenBWithdrawalSpread  int    `json:"tokenBWithdrawalSpread"`
}

// SplTokenSwapConfig defines model for splTokenSwapConfig.
type SplTokenSwapConfig struct {
	Swap               string `json:"swap"`
	SwapAuthority      string `json:"swapAuthority"`
	SwapFeeAccount     string `json:"swapFeeAccount"`
	SwapTokenAAccount  string `json:"swapTokenAAccount"`
	SwapTokenBAccount  string `json:"swapTokenBAccount"`
	SwapTokenMint      string `json:"swapTokenMint"`
	TokenAMint         string `json:"tokenAMint"`
	TokenBMint         string `json:"tokenBMint"`
	Vault              string `json:"vault"`
	VaultProtoConfig   string `json:"vaultProtoConfig"`
	VaultTokenAAccount string `json:"vaultTokenAAccount"`
	VaultTokenBAccount string `json:"vaultTokenBAccount"`
}

// Token defines model for token.
type Token struct {
	CoinGeckoId *string `json:"coinGeckoId,omitempty"`
	Decimals    int     `json:"decimals"`
	IconUrl     *string `json:"iconUrl,omitempty"`
	Pubkey      string  `json:"pubkey"`
	Symbol      *string `json:"symbol,omitempty"`
}

// TokenAccountBalance defines model for tokenAccountBalance.
type TokenAccountBalance struct {
	Amount string `json:"amount"`
	Mint   string `json:"mint"`
	Owner  string `json:"owner"`
	Pubkey string `json:"pubkey"`
	State  string `json:"state"`
}

// TokenMetadata defines model for tokenMetadata.
type TokenMetadata struct {
	Collection struct {
		Family string `json:"family"`
		Name   string `json:"name"`
	} `json:"collection"`
	Description string `json:"description"`
	ExternalUrl string `json:"external_url"`
	Image       string `json:"image"`
	Name        string `json:"name"`
	Symbol      string `json:"symbol"`
}

// Vault defines model for vault.
type Vault struct {
	// unix timestamp
	DcaActivationTimestamp string `json:"dcaActivationTimestamp"`
	DripAmount             string `json:"dripAmount"`
	Enabled                bool   `json:"enabled"`
	LastDcaPeriod          string `json:"lastDcaPeriod"`
	ProtoConfig            string `json:"protoConfig"`
	Pubkey                 string `json:"pubkey"`
	TokenAAccount          string `json:"tokenAAccount"`
	TokenAMint             string `json:"tokenAMint"`
	TokenBAccount          string `json:"tokenBAccount"`
	TokenBMint             string `json:"tokenBMint"`
	TreasuryTokenBAccount  string `json:"treasuryTokenBAccount"`
}

// VaultPeriod defines model for vaultPeriod.
type VaultPeriod struct {
	Dar      string `json:"dar"`
	PeriodId string `json:"periodId"`
	Pubkey   string `json:"pubkey"`
	Twap     string `json:"twap"`
	Vault    string `json:"vault"`
}

// EnabledQueryParam defines model for enabledQueryParam.
type EnabledQueryParam = bool

// ExpandAdminPositionsQueryParam defines model for expandAdminPositionsQueryParam.
type ExpandAdminPositionsQueryParam = []string

// ExpandAdminVaultsQueryParam defines model for expandAdminVaultsQueryParam.
type ExpandAdminVaultsQueryParam = []string

// GoogleTokenIdHeaderParam defines model for googleTokenIdHeaderParam.
type GoogleTokenIdHeaderParam = string

// IsClosedQueryParam defines model for isClosedQueryParam.
type IsClosedQueryParam = bool

// LimitQueryParam defines model for limitQueryParam.
type LimitQueryParam = int

// OffsetQueryParam defines model for offsetQueryParam.
type OffsetQueryParam = int

// OwnerQueryParam defines model for ownerQueryParam.
type OwnerQueryParam = string

// ProtoConfigQueryParam defines model for protoConfigQueryParam.
type ProtoConfigQueryParam = string

// PubkeyPathParam defines model for pubkeyPathParam.
type PubkeyPathParam = string

// RequiredVaultQueryParam defines model for requiredVaultQueryParam.
type RequiredVaultQueryParam = string

// RequiredWalletQueryParam defines model for requiredWalletQueryParam.
type RequiredWalletQueryParam = string

// TokenAQueryParam defines model for tokenAQueryParam.
type TokenAQueryParam = string

// TokenBQueryParam defines model for tokenBQueryParam.
type TokenBQueryParam = string

// VaultPeriodQueryParam defines model for vaultPeriodQueryParam.
type VaultPeriodQueryParam = string

// VaultProtoConfigQueryParam defines model for vaultProtoConfigQueryParam.
type VaultProtoConfigQueryParam = string

// VaultQueryParam defines model for vaultQueryParam.
type VaultQueryParam = string

// PostMintJSONBody defines parameters for PostMint.
type PostMintJSONBody = MintRequest

// GetV1AdminPositionsParams defines parameters for GetV1AdminPositions.
type GetV1AdminPositionsParams struct {
	Expand   *ExpandAdminPositionsQueryParam `form:"expand,omitempty" json:"expand,omitempty"`
	Enabled  *EnabledQueryParam              `form:"enabled,omitempty" json:"enabled,omitempty"`
	IsClosed *IsClosedQueryParam             `form:"isClosed,omitempty" json:"isClosed,omitempty"`
	Offset   *OffsetQueryParam               `form:"offset,omitempty" json:"offset,omitempty"`
	Limit    *LimitQueryParam                `form:"limit,omitempty" json:"limit,omitempty"`
	TokenId  GoogleTokenIdHeaderParam        `json:"token-id"`
}

// GetV1AdminPositionsParamsExpand defines parameters for GetV1AdminPositions.
type GetV1AdminPositionsParamsExpand string

// GetV1AdminSummaryActivewalletsParams defines parameters for GetV1AdminSummaryActivewallets.
type GetV1AdminSummaryActivewalletsParams struct {
	Vault    *VaultQueryParam         `form:"vault,omitempty" json:"vault,omitempty"`
	IsClosed *IsClosedQueryParam      `form:"isClosed,omitempty" json:"isClosed,omitempty"`
	Owner    *OwnerQueryParam         `form:"owner,omitempty" json:"owner,omitempty"`
	TokenId  GoogleTokenIdHeaderParam `json:"token-id"`
}

// PutV1AdminVaultPubkeyPathEnableParams defines parameters for PutV1AdminVaultPubkeyPathEnable.
type PutV1AdminVaultPubkeyPathEnableParams struct {
	TokenId GoogleTokenIdHeaderParam `json:"token-id"`
}

// GetV1AdminVaultsParams defines parameters for GetV1AdminVaults.
type GetV1AdminVaultsParams struct {
	Expand           *ExpandAdminVaultsQueryParam `form:"expand,omitempty" json:"expand,omitempty"`
	VaultProtoConfig *VaultProtoConfigQueryParam  `form:"vaultProtoConfig,omitempty" json:"vaultProtoConfig,omitempty"`
	Vault            *VaultQueryParam             `form:"vault,omitempty" json:"vault,omitempty"`
	TokenA           *TokenAQueryParam            `form:"tokenA,omitempty" json:"tokenA,omitempty"`
	TokenB           *TokenBQueryParam            `form:"tokenB,omitempty" json:"tokenB,omitempty"`
	Enabled          *EnabledQueryParam           `form:"enabled,omitempty" json:"enabled,omitempty"`
	Offset           *OffsetQueryParam            `form:"offset,omitempty" json:"offset,omitempty"`
	Limit            *LimitQueryParam             `form:"limit,omitempty" json:"limit,omitempty"`
	TokenId          GoogleTokenIdHeaderParam     `json:"token-id"`
}

// GetV1AdminVaultsParamsExpand defines parameters for GetV1AdminVaults.
type GetV1AdminVaultsParamsExpand string

// GetV1DripOrcawhirlpoolconfigsParams defines parameters for GetV1DripOrcawhirlpoolconfigs.
type GetV1DripOrcawhirlpoolconfigsParams struct {
	Vault *VaultQueryParam `form:"vault,omitempty" json:"vault,omitempty"`
}

// GetV1DripSpltokenswapconfigsParams defines parameters for GetV1DripSpltokenswapconfigs.
type GetV1DripSpltokenswapconfigsParams struct {
	Vault *VaultQueryParam `form:"vault,omitempty" json:"vault,omitempty"`
}

// GetV1PositionsParams defines parameters for GetV1Positions.
type GetV1PositionsParams struct {
	Wallet   RequiredWalletQueryParam `form:"wallet" json:"wallet"`
	IsClosed *IsClosedQueryParam      `form:"isClosed,omitempty" json:"isClosed,omitempty"`
	Offset   *OffsetQueryParam        `form:"offset,omitempty" json:"offset,omitempty"`
	Limit    *LimitQueryParam         `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetV1ProtoconfigsParams defines parameters for GetV1Protoconfigs.
type GetV1ProtoconfigsParams struct {
	TokenA *TokenAQueryParam `form:"tokenA,omitempty" json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `form:"tokenB,omitempty" json:"tokenB,omitempty"`
}

// GetV1VaultTokensParams defines parameters for GetV1VaultTokens.
type GetV1VaultTokensParams struct {
	TokenA *TokenAQueryParam `form:"tokenA,omitempty" json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `form:"tokenB,omitempty" json:"tokenB,omitempty"`
}

// GetV1VaultperiodsParams defines parameters for GetV1Vaultperiods.
type GetV1VaultperiodsParams struct {
	Vault       RequiredVaultQueryParam `form:"vault" json:"vault"`
	VaultPeriod *VaultPeriodQueryParam  `form:"vaultPeriod,omitempty" json:"vaultPeriod,omitempty"`
	Offset      *OffsetQueryParam       `form:"offset,omitempty" json:"offset,omitempty"`
	Limit       *LimitQueryParam        `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetV1VaultsParams defines parameters for GetV1Vaults.
type GetV1VaultsParams struct {
	TokenA *TokenAQueryParam `form:"tokenA,omitempty" json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `form:"tokenB,omitempty" json:"tokenB,omitempty"`

	// Vault proto config public key.
	ProtoConfig *ProtoConfigQueryParam `form:"protoConfig,omitempty" json:"protoConfig,omitempty"`
}

// PostMintJSONRequestBody defines body for PostMint for application/json ContentType.
type PostMintJSONRequestBody = PostMintJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health Check
	// (GET /)
	Get(ctx echo.Context) error
	// Mint tokens (DEVNET ONLY)
	// (POST /mint)
	PostMint(ctx echo.Context) error
	// Swagger spec
	// (GET /swagger.json)
	GetSwaggerJson(ctx echo.Context) error
	// Get All Positions
	// (GET /v1/admin/positions)
	GetV1AdminPositions(ctx echo.Context, params GetV1AdminPositionsParams) error
	// Get All Active Wallet Addresses
	// (GET /v1/admin/summary/activewallets)
	GetV1AdminSummaryActivewallets(ctx echo.Context, params GetV1AdminSummaryActivewalletsParams) error
	// Toggle the 'enabled' flag on a vault
	// (PUT /v1/admin/vault/{pubkeyPath}/enable)
	PutV1AdminVaultPubkeyPathEnable(ctx echo.Context, pubkeyPath PubkeyPathParam, params PutV1AdminVaultPubkeyPathEnableParams) error
	// Get All Vaults
	// (GET /v1/admin/vaults)
	GetV1AdminVaults(ctx echo.Context, params GetV1AdminVaultsParams) error
	// Get Orca Whirlpool Swap Configs
	// (GET /v1/drip/orcawhirlpoolconfigs)
	GetV1DripOrcawhirlpoolconfigs(ctx echo.Context, params GetV1DripOrcawhirlpoolconfigsParams) error
	// Get Drip Position Metadata
	// (GET /v1/drip/position/{pubkeyPath}/metadata)
	GetV1DripPositionPubkeyPathMetadata(ctx echo.Context, pubkeyPath PubkeyPathParam) error
	// Get Token Swaps Configs
	// (GET /v1/drip/spltokenswapconfigs)
	GetV1DripSpltokenswapconfigs(ctx echo.Context, params GetV1DripSpltokenswapconfigsParams) error
	// Get TokenMetadata for Devnet Mints.
	// (GET /v1/drip/{pubkeyPath}/tokenmetadata)
	GetV1DripPubkeyPathTokenmetadata(ctx echo.Context, pubkeyPath PubkeyPathParam) error
	// Get User Positions
	// (GET /v1/positions)
	GetV1Positions(ctx echo.Context, params GetV1PositionsParams) error
	// Get Proto Configs
	// (GET /v1/protoconfigs)
	GetV1Protoconfigs(ctx echo.Context, params GetV1ProtoconfigsParams) error
	// Get a Token
	// (GET /v1/token/{pubkeyPath})
	GetV1TokenPubkeyPath(ctx echo.Context, pubkeyPath PubkeyPathParam) error
	// Get all Tokens (A and B).
	// (GET /v1/tokens)
	GetV1Tokens(ctx echo.Context) error
	// Get all Supported Tokens
	// (GET /v1/vault/tokens)
	GetV1VaultTokens(ctx echo.Context, params GetV1VaultTokensParams) error
	// Get Vault Periods
	// (GET /v1/vaultperiods)
	GetV1Vaultperiods(ctx echo.Context, params GetV1VaultperiodsParams) error
	// Get Supported Vaults
	// (GET /v1/vaults)
	GetV1Vaults(ctx echo.Context, params GetV1VaultsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx)
	return err
}

// PostMint converts echo context to params.
func (w *ServerInterfaceWrapper) PostMint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMint(ctx)
	return err
}

// GetSwaggerJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwaggerJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwaggerJson(ctx)
	return err
}

// GetV1AdminPositions converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1AdminPositions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AdminPositionsParams
	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Optional query parameter "isClosed" -------------

	err = runtime.BindQueryParameter("form", true, false, "isClosed", ctx.QueryParams(), &params.IsClosed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isClosed: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1AdminPositions(ctx, params)
	return err
}

// GetV1AdminSummaryActivewallets converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1AdminSummaryActivewallets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AdminSummaryActivewalletsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "isClosed" -------------

	err = runtime.BindQueryParameter("form", true, false, "isClosed", ctx.QueryParams(), &params.IsClosed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isClosed: %s", err))
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", ctx.QueryParams(), &params.Owner)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter owner: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1AdminSummaryActivewallets(ctx, params)
	return err
}

// PutV1AdminVaultPubkeyPathEnable converts echo context to params.
func (w *ServerInterfaceWrapper) PutV1AdminVaultPubkeyPathEnable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutV1AdminVaultPubkeyPathEnableParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutV1AdminVaultPubkeyPathEnable(ctx, pubkeyPath, params)
	return err
}

// GetV1AdminVaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1AdminVaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AdminVaultsParams
	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// ------------- Optional query parameter "vaultProtoConfig" -------------

	err = runtime.BindQueryParameter("form", true, false, "vaultProtoConfig", ctx.QueryParams(), &params.VaultProtoConfig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vaultProtoConfig: %s", err))
	}

	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1AdminVaults(ctx, params)
	return err
}

// GetV1DripOrcawhirlpoolconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripOrcawhirlpoolconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1DripOrcawhirlpoolconfigsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripOrcawhirlpoolconfigs(ctx, params)
	return err
}

// GetV1DripPositionPubkeyPathMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripPositionPubkeyPathMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripPositionPubkeyPathMetadata(ctx, pubkeyPath)
	return err
}

// GetV1DripSpltokenswapconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripSpltokenswapconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1DripSpltokenswapconfigsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripSpltokenswapconfigs(ctx, params)
	return err
}

// GetV1DripPubkeyPathTokenmetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripPubkeyPathTokenmetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripPubkeyPathTokenmetadata(ctx, pubkeyPath)
	return err
}

// GetV1Positions converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Positions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1PositionsParams
	// ------------- Required query parameter "wallet" -------------

	err = runtime.BindQueryParameter("form", true, true, "wallet", ctx.QueryParams(), &params.Wallet)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter wallet: %s", err))
	}

	// ------------- Optional query parameter "isClosed" -------------

	err = runtime.BindQueryParameter("form", true, false, "isClosed", ctx.QueryParams(), &params.IsClosed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isClosed: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Positions(ctx, params)
	return err
}

// GetV1Protoconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Protoconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ProtoconfigsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Protoconfigs(ctx, params)
	return err
}

// GetV1TokenPubkeyPath converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1TokenPubkeyPath(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1TokenPubkeyPath(ctx, pubkeyPath)
	return err
}

// GetV1Tokens converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Tokens(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Tokens(ctx)
	return err
}

// GetV1VaultTokens converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1VaultTokens(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1VaultTokensParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1VaultTokens(ctx, params)
	return err
}

// GetV1Vaultperiods converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Vaultperiods(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1VaultperiodsParams
	// ------------- Required query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, true, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "vaultPeriod" -------------

	err = runtime.BindQueryParameter("form", true, false, "vaultPeriod", ctx.QueryParams(), &params.VaultPeriod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vaultPeriod: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Vaultperiods(ctx, params)
	return err
}

// GetV1Vaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Vaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1VaultsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// ------------- Optional query parameter "protoConfig" -------------

	err = runtime.BindQueryParameter("form", true, false, "protoConfig", ctx.QueryParams(), &params.ProtoConfig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protoConfig: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Vaults(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Get)
	router.POST(baseURL+"/mint", wrapper.PostMint)
	router.GET(baseURL+"/swagger.json", wrapper.GetSwaggerJson)
	router.GET(baseURL+"/v1/admin/positions", wrapper.GetV1AdminPositions)
	router.GET(baseURL+"/v1/admin/summary/activewallets", wrapper.GetV1AdminSummaryActivewallets)
	router.PUT(baseURL+"/v1/admin/vault/:pubkeyPath/enable", wrapper.PutV1AdminVaultPubkeyPathEnable)
	router.GET(baseURL+"/v1/admin/vaults", wrapper.GetV1AdminVaults)
	router.GET(baseURL+"/v1/drip/orcawhirlpoolconfigs", wrapper.GetV1DripOrcawhirlpoolconfigs)
	router.GET(baseURL+"/v1/drip/position/:pubkeyPath/metadata", wrapper.GetV1DripPositionPubkeyPathMetadata)
	router.GET(baseURL+"/v1/drip/spltokenswapconfigs", wrapper.GetV1DripSpltokenswapconfigs)
	router.GET(baseURL+"/v1/drip/:pubkeyPath/tokenmetadata", wrapper.GetV1DripPubkeyPathTokenmetadata)
	router.GET(baseURL+"/v1/positions", wrapper.GetV1Positions)
	router.GET(baseURL+"/v1/protoconfigs", wrapper.GetV1Protoconfigs)
	router.GET(baseURL+"/v1/token/:pubkeyPath", wrapper.GetV1TokenPubkeyPath)
	router.GET(baseURL+"/v1/tokens", wrapper.GetV1Tokens)
	router.GET(baseURL+"/v1/vault/tokens", wrapper.GetV1VaultTokens)
	router.GET(baseURL+"/v1/vaultperiods", wrapper.GetV1Vaultperiods)
	router.GET(baseURL+"/v1/vaults", wrapper.GetV1Vaults)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/DWY/URrcrSGzjtU3dv/BgAA//+VBrWc31cAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
