// Package apispec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package apispec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ActiveWallet defines model for activeWallet.
type ActiveWallet struct {
	Owner         string `json:"owner"`
	PositionCount int    `json:"positionCount"`
}

// DripCommon defines model for dripCommon.
type DripCommon struct {
	TokenAMint         string `json:"tokenAMint"`
	TokenBMint         string `json:"tokenBMint"`
	Vault              string `json:"vault"`
	VaultProtoConfig   string `json:"vaultProtoConfig"`
	VaultTokenAAccount string `json:"vaultTokenAAccount"`
	VaultTokenBAccount string `json:"vaultTokenBAccount"`
}

// ErrorResponse defines model for errorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// ExpandedAdminPosition defines model for expandedAdminPosition.
type ExpandedAdminPosition struct {
	// Embedded struct due to allOf(#/components/schemas/position)
	Position `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ProtoConfig *ProtoConfig `json:"protoConfig,omitempty"`
	TokenA      *Token       `json:"tokenA,omitempty"`
	TokenB      *Token       `json:"tokenB,omitempty"`
	Vault       *Vault       `json:"vault,omitempty"`
}

// ExpandedAdminVault defines model for expandedAdminVault.
type ExpandedAdminVault struct {
	// Embedded struct due to allOf(#/components/schemas/vault)
	Vault `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ProtoConfigValue           *ProtoConfig         `json:"protoConfigValue,omitempty"`
	TokenAAccountValue         *TokenAccountBalance `json:"tokenAAccountValue,omitempty"`
	TokenAMintValue            *Token               `json:"tokenAMintValue,omitempty"`
	TokenBAccountValue         *TokenAccountBalance `json:"tokenBAccountValue,omitempty"`
	TokenBMintValue            *Token               `json:"tokenBMintValue,omitempty"`
	TreasuryTokenBAccountValue *TokenAccountBalance `json:"treasuryTokenBAccountValue,omitempty"`
}

// ListActiveWallets defines model for listActiveWallets.
type ListActiveWallets []ActiveWallet

// ListAdminPositions defines model for listAdminPositions.
type ListAdminPositions []ExpandedAdminPosition

// ListExpandedAdminVaults defines model for listExpandedAdminVaults.
type ListExpandedAdminVaults []ExpandedAdminVault

// ListOrcaWhirlpoolConfigs defines model for listOrcaWhirlpoolConfigs.
type ListOrcaWhirlpoolConfigs []OrcaWhirlpoolConfig

// ListPositions defines model for listPositions.
type ListPositions []Position

// ListProtoConfigs defines model for listProtoConfigs.
type ListProtoConfigs []ProtoConfig

// ListSplTokenSwapConfigs defines model for listSplTokenSwapConfigs.
type ListSplTokenSwapConfigs []SplTokenSwapConfig

// ListTokenPairs defines model for listTokenPairs.
type ListTokenPairs []TokenPair

// ListTokens defines model for listTokens.
type ListTokens []Token

// ListVaultPeriods defines model for listVaultPeriods.
type ListVaultPeriods []VaultPeriod

// ListVaults defines model for listVaults.
type ListVaults []Vault

// MintRequest defines model for mintRequest.
type MintRequest struct {
	Amount string `json:"amount"`
	Mint   string `json:"mint"`
	Wallet string `json:"wallet"`
}

// MintResponse defines model for mintResponse.
type MintResponse struct {
	TxHash string `json:"txHash"`
}

// OrcaWhirlpoolConfig defines model for orcaWhirlpoolConfig.
type OrcaWhirlpoolConfig struct {
	// Embedded struct due to allOf(#/components/schemas/dripCommon)
	DripCommon `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Oracle      string `json:"oracle"`
	TokenVaultA string `json:"tokenVaultA"`
	TokenVaultB string `json:"tokenVaultB"`
	Whirlpool   string `json:"whirlpool"`
}

// PingResponse defines model for pingResponse.
type PingResponse struct {
	Message string `json:"message"`
}

// Position defines model for position.
type Position struct {
	Authority                string `json:"authority"`
	DcaPeriodIdBeforeDeposit string `json:"dcaPeriodIdBeforeDeposit"`
	DepositTimestamp         string `json:"depositTimestamp"`
	DepositedTokenAAmount    string `json:"depositedTokenAAmount"`
	IsClosed                 bool   `json:"isClosed"`
	NumberOfSwaps            string `json:"numberOfSwaps"`
	PeriodicDripAmount       string `json:"periodicDripAmount"`
	Pubkey                   string `json:"pubkey"`
	Vault                    string `json:"vault"`
	WithdrawnTokenBAmount    string `json:"withdrawnTokenBAmount"`
}

// ProtoConfig defines model for protoConfig.
type ProtoConfig struct {
	Admin                   string `json:"admin"`
	Granularity             string `json:"granularity"`
	Pubkey                  string `json:"pubkey"`
	TokenADripTriggerSpread int    `json:"tokenADripTriggerSpread"`
	TokenBReferralSpread    int    `json:"tokenBReferralSpread"`
	TokenBWithdrawalSpread  int    `json:"tokenBWithdrawalSpread"`
}

// SplTokenSwapConfig defines model for splTokenSwapConfig.
type SplTokenSwapConfig struct {
	// Embedded struct due to allOf(#/components/schemas/dripCommon)
	DripCommon `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Swap              string `json:"swap"`
	SwapAuthority     string `json:"swapAuthority"`
	SwapFeeAccount    string `json:"swapFeeAccount"`
	SwapTokenAAccount string `json:"swapTokenAAccount"`
	SwapTokenBAccount string `json:"swapTokenBAccount"`
	SwapTokenMint     string `json:"swapTokenMint"`
}

// Token defines model for token.
type Token struct {
	Decimals int     `json:"decimals"`
	Pubkey   string  `json:"pubkey"`
	Symbol   *string `json:"symbol,omitempty"`
}

// TokenAccountBalance defines model for tokenAccountBalance.
type TokenAccountBalance struct {
	Amount string `json:"amount"`
	Mint   string `json:"mint"`
	Owner  string `json:"owner"`
	Pubkey string `json:"pubkey"`
	State  string `json:"state"`
}

// TokenMetadata defines model for tokenMetadata.
type TokenMetadata struct {
	Collection struct {
		Family string `json:"family"`
		Name   string `json:"name"`
	} `json:"collection"`
	Description string `json:"description"`
	ExternalUrl string `json:"external_url"`
	Image       string `json:"image"`
	Name        string `json:"name"`
	Symbol      string `json:"symbol"`
}

// TokenPair defines model for tokenPair.
type TokenPair struct {
	Id     string `json:"id"`
	TokenA string `json:"tokenA"`
	TokenB string `json:"tokenB"`
}

// Vault defines model for vault.
type Vault struct {
	// unix timestamp
	DcaActivationTimestamp string `json:"dcaActivationTimestamp"`
	DripAmount             string `json:"dripAmount"`
	Enabled                bool   `json:"enabled"`
	LastDcaPeriod          string `json:"lastDcaPeriod"`
	ProtoConfig            string `json:"protoConfig"`
	Pubkey                 string `json:"pubkey"`
	TokenAAccount          string `json:"tokenAAccount"`
	TokenAMint             string `json:"tokenAMint"`
	TokenBAccount          string `json:"tokenBAccount"`
	TokenBMint             string `json:"tokenBMint"`
	TreasuryTokenBAccount  string `json:"treasuryTokenBAccount"`
}

// VaultPeriod defines model for vaultPeriod.
type VaultPeriod struct {
	Dar      string `json:"dar"`
	PeriodId string `json:"periodId"`
	Pubkey   string `json:"pubkey"`
	Twap     string `json:"twap"`
	Vault    string `json:"vault"`
}

// EnabledQueryParam defines model for enabledQueryParam.
type EnabledQueryParam bool

// ExpandAdminPositionsQueryParam defines model for expandAdminPositionsQueryParam.
type ExpandAdminPositionsQueryParam []string

// ExpandAdminVaultsQueryParam defines model for expandAdminVaultsQueryParam.
type ExpandAdminVaultsQueryParam []string

// GoogleTokenIdHeaderParam defines model for googleTokenIdHeaderParam.
type GoogleTokenIdHeaderParam string

// IsClosedQueryParam defines model for isClosedQueryParam.
type IsClosedQueryParam bool

// LikeTokenAQueryParam defines model for likeTokenAQueryParam.
type LikeTokenAQueryParam string

// LikeTokenBQueryParam defines model for likeTokenBQueryParam.
type LikeTokenBQueryParam string

// LikeVaultQueryParam defines model for likeVaultQueryParam.
type LikeVaultQueryParam string

// LimitQueryParam defines model for limitQueryParam.
type LimitQueryParam int

// OffsetQueryParam defines model for offsetQueryParam.
type OffsetQueryParam int

// OwnerQueryParam defines model for ownerQueryParam.
type OwnerQueryParam string

// ProtoConfigQueryParam defines model for protoConfigQueryParam.
type ProtoConfigQueryParam string

// PubkeyPathParam defines model for pubkeyPathParam.
type PubkeyPathParam string

// RequiredVaultQueryParam defines model for requiredVaultQueryParam.
type RequiredVaultQueryParam string

// RequiredWalletQueryParam defines model for requiredWalletQueryParam.
type RequiredWalletQueryParam string

// TokenAQueryParam defines model for tokenAQueryParam.
type TokenAQueryParam string

// TokenBQueryParam defines model for tokenBQueryParam.
type TokenBQueryParam string

// VaultPeriodQueryParam defines model for vaultPeriodQueryParam.
type VaultPeriodQueryParam string

// VaultQueryParam defines model for vaultQueryParam.
type VaultQueryParam string

// PostMintJSONBody defines parameters for PostMint.
type PostMintJSONBody MintRequest

// GetV1AdminPositionsParams defines parameters for GetV1AdminPositions.
type GetV1AdminPositionsParams struct {
	Expand   *ExpandAdminPositionsQueryParam `json:"expand,omitempty"`
	Enabled  *EnabledQueryParam              `json:"enabled,omitempty"`
	IsClosed *IsClosedQueryParam             `json:"isClosed,omitempty"`
	Offset   *OffsetQueryParam               `json:"offset,omitempty"`
	Limit    *LimitQueryParam                `json:"limit,omitempty"`
	TokenId  GoogleTokenIdHeaderParam        `json:"token-id"`
}

// GetV1AdminPositionsParamsExpand defines parameters for GetV1AdminPositions.
type GetV1AdminPositionsParamsExpand string

// GetV1AdminSummaryActivewalletsParams defines parameters for GetV1AdminSummaryActivewallets.
type GetV1AdminSummaryActivewalletsParams struct {
	Vault    *VaultQueryParam         `json:"vault,omitempty"`
	IsClosed *IsClosedQueryParam      `json:"isClosed,omitempty"`
	Owner    *OwnerQueryParam         `json:"owner,omitempty"`
	TokenId  GoogleTokenIdHeaderParam `json:"token-id"`
}

// PutV1AdminVaultPubkeyPathEnableParams defines parameters for PutV1AdminVaultPubkeyPathEnable.
type PutV1AdminVaultPubkeyPathEnableParams struct {
	TokenId GoogleTokenIdHeaderParam `json:"token-id"`
}

// GetV1AdminVaultsParams defines parameters for GetV1AdminVaults.
type GetV1AdminVaultsParams struct {
	Expand  *ExpandAdminVaultsQueryParam `json:"expand,omitempty"`
	Vault   *LikeVaultQueryParam         `json:"vault,omitempty"`
	TokenA  *LikeTokenAQueryParam        `json:"tokenA,omitempty"`
	TokenB  *LikeTokenBQueryParam        `json:"tokenB,omitempty"`
	Enabled *EnabledQueryParam           `json:"enabled,omitempty"`
	Offset  *OffsetQueryParam            `json:"offset,omitempty"`
	Limit   *LimitQueryParam             `json:"limit,omitempty"`
	TokenId GoogleTokenIdHeaderParam     `json:"token-id"`
}

// GetV1AdminVaultsParamsExpand defines parameters for GetV1AdminVaults.
type GetV1AdminVaultsParamsExpand string

// GetV1DripOrcawhirlpoolconfigsParams defines parameters for GetV1DripOrcawhirlpoolconfigs.
type GetV1DripOrcawhirlpoolconfigsParams struct {
	Vault *VaultQueryParam `json:"vault,omitempty"`
}

// GetV1DripSpltokenswapconfigsParams defines parameters for GetV1DripSpltokenswapconfigs.
type GetV1DripSpltokenswapconfigsParams struct {
	Vault *VaultQueryParam `json:"vault,omitempty"`
}

// GetV1PositionsParams defines parameters for GetV1Positions.
type GetV1PositionsParams struct {
	Wallet   RequiredWalletQueryParam `json:"wallet"`
	IsClosed *IsClosedQueryParam      `json:"isClosed,omitempty"`
	Offset   *OffsetQueryParam        `json:"offset,omitempty"`
	Limit    *LimitQueryParam         `json:"limit,omitempty"`
}

// GetV1ProtoconfigsParams defines parameters for GetV1Protoconfigs.
type GetV1ProtoconfigsParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`
}

// GetV1VaultTokenpairsParams defines parameters for GetV1VaultTokenpairs.
type GetV1VaultTokenpairsParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`
}

// GetV1VaultTokensParams defines parameters for GetV1VaultTokens.
type GetV1VaultTokensParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`
}

// GetV1VaultperiodsParams defines parameters for GetV1Vaultperiods.
type GetV1VaultperiodsParams struct {
	Vault       RequiredVaultQueryParam `json:"vault"`
	VaultPeriod *VaultPeriodQueryParam  `json:"vaultPeriod,omitempty"`
	Offset      *OffsetQueryParam       `json:"offset,omitempty"`
	Limit       *LimitQueryParam        `json:"limit,omitempty"`
}

// GetV1VaultsParams defines parameters for GetV1Vaults.
type GetV1VaultsParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`

	// Vault proto config public key.
	ProtoConfig *ProtoConfigQueryParam `json:"protoConfig,omitempty"`
}

// PostMintJSONRequestBody defines body for PostMint for application/json ContentType.
type PostMintJSONRequestBody PostMintJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMint request with any body
	PostMintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMint(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwaggerJson request
	GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdminPositions request
	GetV1AdminPositions(ctx context.Context, params *GetV1AdminPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdminSummaryActivewallets request
	GetV1AdminSummaryActivewallets(ctx context.Context, params *GetV1AdminSummaryActivewalletsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1AdminVaultPubkeyPathEnable request
	PutV1AdminVaultPubkeyPathEnable(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutV1AdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdminVaults request
	GetV1AdminVaults(ctx context.Context, params *GetV1AdminVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DripOrcawhirlpoolconfigs request
	GetV1DripOrcawhirlpoolconfigs(ctx context.Context, params *GetV1DripOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DripPositionPubkeyPathMetadata request
	GetV1DripPositionPubkeyPathMetadata(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DripSpltokenswapconfigs request
	GetV1DripSpltokenswapconfigs(ctx context.Context, params *GetV1DripSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DripPubkeyPathTokenmetadata request
	GetV1DripPubkeyPathTokenmetadata(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Positions request
	GetV1Positions(ctx context.Context, params *GetV1PositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Protoconfigs request
	GetV1Protoconfigs(ctx context.Context, params *GetV1ProtoconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1VaultTokenpairs request
	GetV1VaultTokenpairs(ctx context.Context, params *GetV1VaultTokenpairsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1VaultTokens request
	GetV1VaultTokens(ctx context.Context, params *GetV1VaultTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Vaultperiods request
	GetV1Vaultperiods(ctx context.Context, params *GetV1VaultperiodsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Vaults request
	GetV1Vaults(ctx context.Context, params *GetV1VaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMintRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMint(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMintRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwaggerJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdminPositions(ctx context.Context, params *GetV1AdminPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdminPositionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdminSummaryActivewallets(ctx context.Context, params *GetV1AdminSummaryActivewalletsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdminSummaryActivewalletsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AdminVaultPubkeyPathEnable(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutV1AdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AdminVaultPubkeyPathEnableRequest(c.Server, pubkeyPath, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdminVaults(ctx context.Context, params *GetV1AdminVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdminVaultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DripOrcawhirlpoolconfigs(ctx context.Context, params *GetV1DripOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DripOrcawhirlpoolconfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DripPositionPubkeyPathMetadata(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DripPositionPubkeyPathMetadataRequest(c.Server, pubkeyPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DripSpltokenswapconfigs(ctx context.Context, params *GetV1DripSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DripSpltokenswapconfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DripPubkeyPathTokenmetadata(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DripPubkeyPathTokenmetadataRequest(c.Server, pubkeyPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Positions(ctx context.Context, params *GetV1PositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PositionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Protoconfigs(ctx context.Context, params *GetV1ProtoconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProtoconfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1VaultTokenpairs(ctx context.Context, params *GetV1VaultTokenpairsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VaultTokenpairsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1VaultTokens(ctx context.Context, params *GetV1VaultTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VaultTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Vaultperiods(ctx context.Context, params *GetV1VaultperiodsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VaultperiodsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Vaults(ctx context.Context, params *GetV1VaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VaultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMintRequest calls the generic PostMint builder with application/json body
func NewPostMintRequest(server string, body PostMintJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMintRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMintRequestWithBody generates requests for PostMint with any type of body
func NewPostMintRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwaggerJsonRequest generates requests for GetSwaggerJson
func NewGetSwaggerJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swagger.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AdminPositionsRequest generates requests for GetV1AdminPositions
func NewGetV1AdminPositionsRequest(server string, params *GetV1AdminPositionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/positions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsClosed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isClosed", runtime.ParamLocationQuery, *params.IsClosed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewGetV1AdminSummaryActivewalletsRequest generates requests for GetV1AdminSummaryActivewallets
func NewGetV1AdminSummaryActivewalletsRequest(server string, params *GetV1AdminSummaryActivewalletsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/summary/activewallets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Vault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsClosed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isClosed", runtime.ParamLocationQuery, *params.IsClosed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Owner != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewPutV1AdminVaultPubkeyPathEnableRequest generates requests for PutV1AdminVaultPubkeyPathEnable
func NewPutV1AdminVaultPubkeyPathEnableRequest(server string, pubkeyPath PubkeyPathParam, params *PutV1AdminVaultPubkeyPathEnableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, pubkeyPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/vault/%s/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewGetV1AdminVaultsRequest generates requests for GetV1AdminVaults
func NewGetV1AdminVaultsRequest(server string, params *GetV1AdminVaultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/vaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Vault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewGetV1DripOrcawhirlpoolconfigsRequest generates requests for GetV1DripOrcawhirlpoolconfigs
func NewGetV1DripOrcawhirlpoolconfigsRequest(server string, params *GetV1DripOrcawhirlpoolconfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drip/orcawhirlpoolconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Vault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DripPositionPubkeyPathMetadataRequest generates requests for GetV1DripPositionPubkeyPathMetadata
func NewGetV1DripPositionPubkeyPathMetadataRequest(server string, pubkeyPath PubkeyPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, pubkeyPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drip/position/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DripSpltokenswapconfigsRequest generates requests for GetV1DripSpltokenswapconfigs
func NewGetV1DripSpltokenswapconfigsRequest(server string, params *GetV1DripSpltokenswapconfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drip/spltokenswapconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Vault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DripPubkeyPathTokenmetadataRequest generates requests for GetV1DripPubkeyPathTokenmetadata
func NewGetV1DripPubkeyPathTokenmetadataRequest(server string, pubkeyPath PubkeyPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, pubkeyPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drip/%s/tokenmetadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PositionsRequest generates requests for GetV1Positions
func NewGetV1PositionsRequest(server string, params *GetV1PositionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/positions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wallet", runtime.ParamLocationQuery, params.Wallet); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.IsClosed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isClosed", runtime.ParamLocationQuery, *params.IsClosed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProtoconfigsRequest generates requests for GetV1Protoconfigs
func NewGetV1ProtoconfigsRequest(server string, params *GetV1ProtoconfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/protoconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1VaultTokenpairsRequest generates requests for GetV1VaultTokenpairs
func NewGetV1VaultTokenpairsRequest(server string, params *GetV1VaultTokenpairsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/vault/tokenpairs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1VaultTokensRequest generates requests for GetV1VaultTokens
func NewGetV1VaultTokensRequest(server string, params *GetV1VaultTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/vault/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1VaultperiodsRequest generates requests for GetV1Vaultperiods
func NewGetV1VaultperiodsRequest(server string, params *GetV1VaultperiodsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/vaultperiods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, params.Vault); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.VaultPeriod != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vaultPeriod", runtime.ParamLocationQuery, *params.VaultPeriod); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1VaultsRequest generates requests for GetV1Vaults
func NewGetV1VaultsRequest(server string, params *GetV1VaultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/vaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProtoConfig != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protoConfig", runtime.ParamLocationQuery, *params.ProtoConfig); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Get request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// PostMint request with any body
	PostMintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMintResponse, error)

	PostMintWithResponse(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMintResponse, error)

	// GetSwaggerJson request
	GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error)

	// GetV1AdminPositions request
	GetV1AdminPositionsWithResponse(ctx context.Context, params *GetV1AdminPositionsParams, reqEditors ...RequestEditorFn) (*GetV1AdminPositionsResponse, error)

	// GetV1AdminSummaryActivewallets request
	GetV1AdminSummaryActivewalletsWithResponse(ctx context.Context, params *GetV1AdminSummaryActivewalletsParams, reqEditors ...RequestEditorFn) (*GetV1AdminSummaryActivewalletsResponse, error)

	// PutV1AdminVaultPubkeyPathEnable request
	PutV1AdminVaultPubkeyPathEnableWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutV1AdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*PutV1AdminVaultPubkeyPathEnableResponse, error)

	// GetV1AdminVaults request
	GetV1AdminVaultsWithResponse(ctx context.Context, params *GetV1AdminVaultsParams, reqEditors ...RequestEditorFn) (*GetV1AdminVaultsResponse, error)

	// GetV1DripOrcawhirlpoolconfigs request
	GetV1DripOrcawhirlpoolconfigsWithResponse(ctx context.Context, params *GetV1DripOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*GetV1DripOrcawhirlpoolconfigsResponse, error)

	// GetV1DripPositionPubkeyPathMetadata request
	GetV1DripPositionPubkeyPathMetadataWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*GetV1DripPositionPubkeyPathMetadataResponse, error)

	// GetV1DripSpltokenswapconfigs request
	GetV1DripSpltokenswapconfigsWithResponse(ctx context.Context, params *GetV1DripSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*GetV1DripSpltokenswapconfigsResponse, error)

	// GetV1DripPubkeyPathTokenmetadata request
	GetV1DripPubkeyPathTokenmetadataWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*GetV1DripPubkeyPathTokenmetadataResponse, error)

	// GetV1Positions request
	GetV1PositionsWithResponse(ctx context.Context, params *GetV1PositionsParams, reqEditors ...RequestEditorFn) (*GetV1PositionsResponse, error)

	// GetV1Protoconfigs request
	GetV1ProtoconfigsWithResponse(ctx context.Context, params *GetV1ProtoconfigsParams, reqEditors ...RequestEditorFn) (*GetV1ProtoconfigsResponse, error)

	// GetV1VaultTokenpairs request
	GetV1VaultTokenpairsWithResponse(ctx context.Context, params *GetV1VaultTokenpairsParams, reqEditors ...RequestEditorFn) (*GetV1VaultTokenpairsResponse, error)

	// GetV1VaultTokens request
	GetV1VaultTokensWithResponse(ctx context.Context, params *GetV1VaultTokensParams, reqEditors ...RequestEditorFn) (*GetV1VaultTokensResponse, error)

	// GetV1Vaultperiods request
	GetV1VaultperiodsWithResponse(ctx context.Context, params *GetV1VaultperiodsParams, reqEditors ...RequestEditorFn) (*GetV1VaultperiodsResponse, error)

	// GetV1Vaults request
	GetV1VaultsWithResponse(ctx context.Context, params *GetV1VaultsParams, reqEditors ...RequestEditorFn) (*GetV1VaultsResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingResponse
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MintResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostMintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwaggerJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSwaggerJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwaggerJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdminPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAdminPositions
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1AdminPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdminPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdminSummaryActivewalletsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListActiveWallets
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1AdminSummaryActivewalletsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdminSummaryActivewalletsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1AdminVaultPubkeyPathEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Vault
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutV1AdminVaultPubkeyPathEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1AdminVaultPubkeyPathEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdminVaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListExpandedAdminVaults
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1AdminVaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdminVaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DripOrcawhirlpoolconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListOrcaWhirlpoolConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1DripOrcawhirlpoolconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DripOrcawhirlpoolconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DripPositionPubkeyPathMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenMetadata
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1DripPositionPubkeyPathMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DripPositionPubkeyPathMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DripSpltokenswapconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSplTokenSwapConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1DripSpltokenswapconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DripSpltokenswapconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DripPubkeyPathTokenmetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenMetadata
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1DripPubkeyPathTokenmetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DripPubkeyPathTokenmetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPositions
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1PositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProtoconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListProtoConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1ProtoconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProtoconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VaultTokenpairsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTokenPairs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1VaultTokenpairsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VaultTokenpairsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VaultTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTokens
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1VaultTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VaultTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VaultperiodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListVaultPeriods
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1VaultperiodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VaultperiodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListVaults
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1VaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// PostMintWithBodyWithResponse request with arbitrary body returning *PostMintResponse
func (c *ClientWithResponses) PostMintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMintResponse, error) {
	rsp, err := c.PostMintWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMintResponse(rsp)
}

func (c *ClientWithResponses) PostMintWithResponse(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMintResponse, error) {
	rsp, err := c.PostMint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMintResponse(rsp)
}

// GetSwaggerJsonWithResponse request returning *GetSwaggerJsonResponse
func (c *ClientWithResponses) GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error) {
	rsp, err := c.GetSwaggerJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwaggerJsonResponse(rsp)
}

// GetV1AdminPositionsWithResponse request returning *GetV1AdminPositionsResponse
func (c *ClientWithResponses) GetV1AdminPositionsWithResponse(ctx context.Context, params *GetV1AdminPositionsParams, reqEditors ...RequestEditorFn) (*GetV1AdminPositionsResponse, error) {
	rsp, err := c.GetV1AdminPositions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdminPositionsResponse(rsp)
}

// GetV1AdminSummaryActivewalletsWithResponse request returning *GetV1AdminSummaryActivewalletsResponse
func (c *ClientWithResponses) GetV1AdminSummaryActivewalletsWithResponse(ctx context.Context, params *GetV1AdminSummaryActivewalletsParams, reqEditors ...RequestEditorFn) (*GetV1AdminSummaryActivewalletsResponse, error) {
	rsp, err := c.GetV1AdminSummaryActivewallets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdminSummaryActivewalletsResponse(rsp)
}

// PutV1AdminVaultPubkeyPathEnableWithResponse request returning *PutV1AdminVaultPubkeyPathEnableResponse
func (c *ClientWithResponses) PutV1AdminVaultPubkeyPathEnableWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutV1AdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*PutV1AdminVaultPubkeyPathEnableResponse, error) {
	rsp, err := c.PutV1AdminVaultPubkeyPathEnable(ctx, pubkeyPath, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AdminVaultPubkeyPathEnableResponse(rsp)
}

// GetV1AdminVaultsWithResponse request returning *GetV1AdminVaultsResponse
func (c *ClientWithResponses) GetV1AdminVaultsWithResponse(ctx context.Context, params *GetV1AdminVaultsParams, reqEditors ...RequestEditorFn) (*GetV1AdminVaultsResponse, error) {
	rsp, err := c.GetV1AdminVaults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdminVaultsResponse(rsp)
}

// GetV1DripOrcawhirlpoolconfigsWithResponse request returning *GetV1DripOrcawhirlpoolconfigsResponse
func (c *ClientWithResponses) GetV1DripOrcawhirlpoolconfigsWithResponse(ctx context.Context, params *GetV1DripOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*GetV1DripOrcawhirlpoolconfigsResponse, error) {
	rsp, err := c.GetV1DripOrcawhirlpoolconfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DripOrcawhirlpoolconfigsResponse(rsp)
}

// GetV1DripPositionPubkeyPathMetadataWithResponse request returning *GetV1DripPositionPubkeyPathMetadataResponse
func (c *ClientWithResponses) GetV1DripPositionPubkeyPathMetadataWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*GetV1DripPositionPubkeyPathMetadataResponse, error) {
	rsp, err := c.GetV1DripPositionPubkeyPathMetadata(ctx, pubkeyPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DripPositionPubkeyPathMetadataResponse(rsp)
}

// GetV1DripSpltokenswapconfigsWithResponse request returning *GetV1DripSpltokenswapconfigsResponse
func (c *ClientWithResponses) GetV1DripSpltokenswapconfigsWithResponse(ctx context.Context, params *GetV1DripSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*GetV1DripSpltokenswapconfigsResponse, error) {
	rsp, err := c.GetV1DripSpltokenswapconfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DripSpltokenswapconfigsResponse(rsp)
}

// GetV1DripPubkeyPathTokenmetadataWithResponse request returning *GetV1DripPubkeyPathTokenmetadataResponse
func (c *ClientWithResponses) GetV1DripPubkeyPathTokenmetadataWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*GetV1DripPubkeyPathTokenmetadataResponse, error) {
	rsp, err := c.GetV1DripPubkeyPathTokenmetadata(ctx, pubkeyPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DripPubkeyPathTokenmetadataResponse(rsp)
}

// GetV1PositionsWithResponse request returning *GetV1PositionsResponse
func (c *ClientWithResponses) GetV1PositionsWithResponse(ctx context.Context, params *GetV1PositionsParams, reqEditors ...RequestEditorFn) (*GetV1PositionsResponse, error) {
	rsp, err := c.GetV1Positions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PositionsResponse(rsp)
}

// GetV1ProtoconfigsWithResponse request returning *GetV1ProtoconfigsResponse
func (c *ClientWithResponses) GetV1ProtoconfigsWithResponse(ctx context.Context, params *GetV1ProtoconfigsParams, reqEditors ...RequestEditorFn) (*GetV1ProtoconfigsResponse, error) {
	rsp, err := c.GetV1Protoconfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProtoconfigsResponse(rsp)
}

// GetV1VaultTokenpairsWithResponse request returning *GetV1VaultTokenpairsResponse
func (c *ClientWithResponses) GetV1VaultTokenpairsWithResponse(ctx context.Context, params *GetV1VaultTokenpairsParams, reqEditors ...RequestEditorFn) (*GetV1VaultTokenpairsResponse, error) {
	rsp, err := c.GetV1VaultTokenpairs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VaultTokenpairsResponse(rsp)
}

// GetV1VaultTokensWithResponse request returning *GetV1VaultTokensResponse
func (c *ClientWithResponses) GetV1VaultTokensWithResponse(ctx context.Context, params *GetV1VaultTokensParams, reqEditors ...RequestEditorFn) (*GetV1VaultTokensResponse, error) {
	rsp, err := c.GetV1VaultTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VaultTokensResponse(rsp)
}

// GetV1VaultperiodsWithResponse request returning *GetV1VaultperiodsResponse
func (c *ClientWithResponses) GetV1VaultperiodsWithResponse(ctx context.Context, params *GetV1VaultperiodsParams, reqEditors ...RequestEditorFn) (*GetV1VaultperiodsResponse, error) {
	rsp, err := c.GetV1Vaultperiods(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VaultperiodsResponse(rsp)
}

// GetV1VaultsWithResponse request returning *GetV1VaultsResponse
func (c *ClientWithResponses) GetV1VaultsWithResponse(ctx context.Context, params *GetV1VaultsParams, reqEditors ...RequestEditorFn) (*GetV1VaultsResponse, error) {
	rsp, err := c.GetV1Vaults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VaultsResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMintResponse parses an HTTP response from a PostMintWithResponse call
func ParsePostMintResponse(rsp *http.Response) (*PostMintResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MintResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSwaggerJsonResponse parses an HTTP response from a GetSwaggerJsonWithResponse call
func ParseGetSwaggerJsonResponse(rsp *http.Response) (*GetSwaggerJsonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwaggerJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1AdminPositionsResponse parses an HTTP response from a GetV1AdminPositionsWithResponse call
func ParseGetV1AdminPositionsResponse(rsp *http.Response) (*GetV1AdminPositionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdminPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAdminPositions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1AdminSummaryActivewalletsResponse parses an HTTP response from a GetV1AdminSummaryActivewalletsWithResponse call
func ParseGetV1AdminSummaryActivewalletsResponse(rsp *http.Response) (*GetV1AdminSummaryActivewalletsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdminSummaryActivewalletsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListActiveWallets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutV1AdminVaultPubkeyPathEnableResponse parses an HTTP response from a PutV1AdminVaultPubkeyPathEnableWithResponse call
func ParsePutV1AdminVaultPubkeyPathEnableResponse(rsp *http.Response) (*PutV1AdminVaultPubkeyPathEnableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1AdminVaultPubkeyPathEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Vault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1AdminVaultsResponse parses an HTTP response from a GetV1AdminVaultsWithResponse call
func ParseGetV1AdminVaultsResponse(rsp *http.Response) (*GetV1AdminVaultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdminVaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListExpandedAdminVaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1DripOrcawhirlpoolconfigsResponse parses an HTTP response from a GetV1DripOrcawhirlpoolconfigsWithResponse call
func ParseGetV1DripOrcawhirlpoolconfigsResponse(rsp *http.Response) (*GetV1DripOrcawhirlpoolconfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DripOrcawhirlpoolconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListOrcaWhirlpoolConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1DripPositionPubkeyPathMetadataResponse parses an HTTP response from a GetV1DripPositionPubkeyPathMetadataWithResponse call
func ParseGetV1DripPositionPubkeyPathMetadataResponse(rsp *http.Response) (*GetV1DripPositionPubkeyPathMetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DripPositionPubkeyPathMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1DripSpltokenswapconfigsResponse parses an HTTP response from a GetV1DripSpltokenswapconfigsWithResponse call
func ParseGetV1DripSpltokenswapconfigsResponse(rsp *http.Response) (*GetV1DripSpltokenswapconfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DripSpltokenswapconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSplTokenSwapConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1DripPubkeyPathTokenmetadataResponse parses an HTTP response from a GetV1DripPubkeyPathTokenmetadataWithResponse call
func ParseGetV1DripPubkeyPathTokenmetadataResponse(rsp *http.Response) (*GetV1DripPubkeyPathTokenmetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DripPubkeyPathTokenmetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1PositionsResponse parses an HTTP response from a GetV1PositionsWithResponse call
func ParseGetV1PositionsResponse(rsp *http.Response) (*GetV1PositionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPositions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ProtoconfigsResponse parses an HTTP response from a GetV1ProtoconfigsWithResponse call
func ParseGetV1ProtoconfigsResponse(rsp *http.Response) (*GetV1ProtoconfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProtoconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListProtoConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1VaultTokenpairsResponse parses an HTTP response from a GetV1VaultTokenpairsWithResponse call
func ParseGetV1VaultTokenpairsResponse(rsp *http.Response) (*GetV1VaultTokenpairsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VaultTokenpairsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTokenPairs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1VaultTokensResponse parses an HTTP response from a GetV1VaultTokensWithResponse call
func ParseGetV1VaultTokensResponse(rsp *http.Response) (*GetV1VaultTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VaultTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTokens
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1VaultperiodsResponse parses an HTTP response from a GetV1VaultperiodsWithResponse call
func ParseGetV1VaultperiodsResponse(rsp *http.Response) (*GetV1VaultperiodsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VaultperiodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListVaultPeriods
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1VaultsResponse parses an HTTP response from a GetV1VaultsWithResponse call
func ParseGetV1VaultsResponse(rsp *http.Response) (*GetV1VaultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListVaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health Check
	// (GET /)
	Get(ctx echo.Context) error
	// Mint tokens (DEVNET ONLY)
	// (POST /mint)
	PostMint(ctx echo.Context) error
	// Swagger spec
	// (GET /swagger.json)
	GetSwaggerJson(ctx echo.Context) error
	// Get All Positions
	// (GET /v1/admin/positions)
	GetV1AdminPositions(ctx echo.Context, params GetV1AdminPositionsParams) error
	// Get All Active Wallet Addresses
	// (GET /v1/admin/summary/activewallets)
	GetV1AdminSummaryActivewallets(ctx echo.Context, params GetV1AdminSummaryActivewalletsParams) error
	// Toggle the 'enabled' flag on a vault
	// (PUT /v1/admin/vault/{pubkeyPath}/enable)
	PutV1AdminVaultPubkeyPathEnable(ctx echo.Context, pubkeyPath PubkeyPathParam, params PutV1AdminVaultPubkeyPathEnableParams) error
	// Get All Vaults
	// (GET /v1/admin/vaults)
	GetV1AdminVaults(ctx echo.Context, params GetV1AdminVaultsParams) error
	// Get Orca Whirlpool Swap Configs
	// (GET /v1/drip/orcawhirlpoolconfigs)
	GetV1DripOrcawhirlpoolconfigs(ctx echo.Context, params GetV1DripOrcawhirlpoolconfigsParams) error
	// Get Drip Position Metadata
	// (GET /v1/drip/position/{pubkeyPath}/metadata)
	GetV1DripPositionPubkeyPathMetadata(ctx echo.Context, pubkeyPath PubkeyPathParam) error
	// Get Token Swaps Configs
	// (GET /v1/drip/spltokenswapconfigs)
	GetV1DripSpltokenswapconfigs(ctx echo.Context, params GetV1DripSpltokenswapconfigsParams) error
	// Get TokenMetadata for Devnet Mints.
	// (GET /v1/drip/{pubkeyPath}/tokenmetadata)
	GetV1DripPubkeyPathTokenmetadata(ctx echo.Context, pubkeyPath PubkeyPathParam) error
	// Get User Positions
	// (GET /v1/positions)
	GetV1Positions(ctx echo.Context, params GetV1PositionsParams) error
	// Get Proto Configs
	// (GET /v1/protoconfigs)
	GetV1Protoconfigs(ctx echo.Context, params GetV1ProtoconfigsParams) error
	// Get all Supported Token Pairs
	// (GET /v1/vault/tokenpairs)
	GetV1VaultTokenpairs(ctx echo.Context, params GetV1VaultTokenpairsParams) error
	// Get all Supported Tokens
	// (GET /v1/vault/tokens)
	GetV1VaultTokens(ctx echo.Context, params GetV1VaultTokensParams) error
	// Get Vault Periods
	// (GET /v1/vaultperiods)
	GetV1Vaultperiods(ctx echo.Context, params GetV1VaultperiodsParams) error
	// Get Supported Vaults
	// (GET /v1/vaults)
	GetV1Vaults(ctx echo.Context, params GetV1VaultsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx)
	return err
}

// PostMint converts echo context to params.
func (w *ServerInterfaceWrapper) PostMint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMint(ctx)
	return err
}

// GetSwaggerJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwaggerJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwaggerJson(ctx)
	return err
}

// GetV1AdminPositions converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1AdminPositions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AdminPositionsParams
	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Optional query parameter "isClosed" -------------

	err = runtime.BindQueryParameter("form", true, false, "isClosed", ctx.QueryParams(), &params.IsClosed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isClosed: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1AdminPositions(ctx, params)
	return err
}

// GetV1AdminSummaryActivewallets converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1AdminSummaryActivewallets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AdminSummaryActivewalletsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "isClosed" -------------

	err = runtime.BindQueryParameter("form", true, false, "isClosed", ctx.QueryParams(), &params.IsClosed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isClosed: %s", err))
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", ctx.QueryParams(), &params.Owner)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter owner: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1AdminSummaryActivewallets(ctx, params)
	return err
}

// PutV1AdminVaultPubkeyPathEnable converts echo context to params.
func (w *ServerInterfaceWrapper) PutV1AdminVaultPubkeyPathEnable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutV1AdminVaultPubkeyPathEnableParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutV1AdminVaultPubkeyPathEnable(ctx, pubkeyPath, params)
	return err
}

// GetV1AdminVaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1AdminVaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AdminVaultsParams
	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1AdminVaults(ctx, params)
	return err
}

// GetV1DripOrcawhirlpoolconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripOrcawhirlpoolconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1DripOrcawhirlpoolconfigsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripOrcawhirlpoolconfigs(ctx, params)
	return err
}

// GetV1DripPositionPubkeyPathMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripPositionPubkeyPathMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripPositionPubkeyPathMetadata(ctx, pubkeyPath)
	return err
}

// GetV1DripSpltokenswapconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripSpltokenswapconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1DripSpltokenswapconfigsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripSpltokenswapconfigs(ctx, params)
	return err
}

// GetV1DripPubkeyPathTokenmetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripPubkeyPathTokenmetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripPubkeyPathTokenmetadata(ctx, pubkeyPath)
	return err
}

// GetV1Positions converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Positions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1PositionsParams
	// ------------- Required query parameter "wallet" -------------

	err = runtime.BindQueryParameter("form", true, true, "wallet", ctx.QueryParams(), &params.Wallet)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter wallet: %s", err))
	}

	// ------------- Optional query parameter "isClosed" -------------

	err = runtime.BindQueryParameter("form", true, false, "isClosed", ctx.QueryParams(), &params.IsClosed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isClosed: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Positions(ctx, params)
	return err
}

// GetV1Protoconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Protoconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ProtoconfigsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Protoconfigs(ctx, params)
	return err
}

// GetV1VaultTokenpairs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1VaultTokenpairs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1VaultTokenpairsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1VaultTokenpairs(ctx, params)
	return err
}

// GetV1VaultTokens converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1VaultTokens(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1VaultTokensParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1VaultTokens(ctx, params)
	return err
}

// GetV1Vaultperiods converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Vaultperiods(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1VaultperiodsParams
	// ------------- Required query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, true, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "vaultPeriod" -------------

	err = runtime.BindQueryParameter("form", true, false, "vaultPeriod", ctx.QueryParams(), &params.VaultPeriod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vaultPeriod: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Vaultperiods(ctx, params)
	return err
}

// GetV1Vaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Vaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1VaultsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// ------------- Optional query parameter "protoConfig" -------------

	err = runtime.BindQueryParameter("form", true, false, "protoConfig", ctx.QueryParams(), &params.ProtoConfig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protoConfig: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Vaults(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Get)
	router.POST(baseURL+"/mint", wrapper.PostMint)
	router.GET(baseURL+"/swagger.json", wrapper.GetSwaggerJson)
	router.GET(baseURL+"/v1/admin/positions", wrapper.GetV1AdminPositions)
	router.GET(baseURL+"/v1/admin/summary/activewallets", wrapper.GetV1AdminSummaryActivewallets)
	router.PUT(baseURL+"/v1/admin/vault/:pubkeyPath/enable", wrapper.PutV1AdminVaultPubkeyPathEnable)
	router.GET(baseURL+"/v1/admin/vaults", wrapper.GetV1AdminVaults)
	router.GET(baseURL+"/v1/drip/orcawhirlpoolconfigs", wrapper.GetV1DripOrcawhirlpoolconfigs)
	router.GET(baseURL+"/v1/drip/position/:pubkeyPath/metadata", wrapper.GetV1DripPositionPubkeyPathMetadata)
	router.GET(baseURL+"/v1/drip/spltokenswapconfigs", wrapper.GetV1DripSpltokenswapconfigs)
	router.GET(baseURL+"/v1/drip/:pubkeyPath/tokenmetadata", wrapper.GetV1DripPubkeyPathTokenmetadata)
	router.GET(baseURL+"/v1/positions", wrapper.GetV1Positions)
	router.GET(baseURL+"/v1/protoconfigs", wrapper.GetV1Protoconfigs)
	router.GET(baseURL+"/v1/vault/tokenpairs", wrapper.GetV1VaultTokenpairs)
	router.GET(baseURL+"/v1/vault/tokens", wrapper.GetV1VaultTokens)
	router.GET(baseURL+"/v1/vaultperiods", wrapper.GetV1Vaultperiods)
	router.GET(baseURL+"/v1/vaults", wrapper.GetV1Vaults)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
