// Package apispec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package apispec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ActiveWallet defines model for activeWallet.
type ActiveWallet struct {
	Owner         string `json:"owner"`
	PositionCount int    `json:"positionCount"`
}

// DripCommon defines model for dripCommon.
type DripCommon struct {
	TokenAMint         string `json:"tokenAMint"`
	TokenBMint         string `json:"tokenBMint"`
	Vault              string `json:"vault"`
	VaultProtoConfig   string `json:"vaultProtoConfig"`
	VaultTokenAAccount string `json:"vaultTokenAAccount"`
	VaultTokenBAccount string `json:"vaultTokenBAccount"`
}

// ErrorResponse defines model for errorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// ExpandedAdminPosition defines model for expandedAdminPosition.
type ExpandedAdminPosition struct {
	// Embedded struct due to allOf(#/components/schemas/position)
	Position `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ProtoConfig *ProtoConfig `json:"protoConfig,omitempty"`
	TokenA      *Token       `json:"tokenA,omitempty"`
	TokenB      *Token       `json:"tokenB,omitempty"`
	Vault       *Vault       `json:"vault,omitempty"`
}

// ExpandedAdminVault defines model for expandedAdminVault.
type ExpandedAdminVault struct {
	// Embedded struct due to allOf(#/components/schemas/vault)
	Vault `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ProtoConfigValue           *ProtoConfig         `json:"protoConfigValue,omitempty"`
	TokenAAccountValue         *TokenAccountBalance `json:"tokenAAccountValue,omitempty"`
	TokenAMintValue            *Token               `json:"tokenAMintValue,omitempty"`
	TokenBAccountValue         *TokenAccountBalance `json:"tokenBAccountValue,omitempty"`
	TokenBMintValue            *Token               `json:"tokenBMintValue,omitempty"`
	TreasuryTokenBAccountValue *TokenAccountBalance `json:"treasuryTokenBAccountValue,omitempty"`
}

// ListActiveWallets defines model for listActiveWallets.
type ListActiveWallets []ActiveWallet

// ListAdminPositions defines model for listAdminPositions.
type ListAdminPositions []ExpandedAdminPosition

// ListExpandedAdminVaults defines model for listExpandedAdminVaults.
type ListExpandedAdminVaults []ExpandedAdminVault

// ListOrcaWhirlpoolConfigs defines model for listOrcaWhirlpoolConfigs.
type ListOrcaWhirlpoolConfigs []OrcaWhirlpoolConfig

// ListPositions defines model for listPositions.
type ListPositions []Position

// ListProtoConfigs defines model for listProtoConfigs.
type ListProtoConfigs []ProtoConfig

// ListSplTokenSwapConfigs defines model for listSplTokenSwapConfigs.
type ListSplTokenSwapConfigs []SplTokenSwapConfig

// ListTokenPairs defines model for listTokenPairs.
type ListTokenPairs []TokenPair

// ListTokens defines model for listTokens.
type ListTokens []Token

// ListVaultPeriods defines model for listVaultPeriods.
type ListVaultPeriods []VaultPeriod

// ListVaults defines model for listVaults.
type ListVaults []Vault

// MintRequest defines model for mintRequest.
type MintRequest struct {
	Amount string `json:"amount"`
	Mint   string `json:"mint"`
	Wallet string `json:"wallet"`
}

// MintResponse defines model for mintResponse.
type MintResponse struct {
	TxHash string `json:"txHash"`
}

// OrcaWhirlpoolConfig defines model for orcaWhirlpoolConfig.
type OrcaWhirlpoolConfig struct {
	// Embedded struct due to allOf(#/components/schemas/dripCommon)
	DripCommon `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Oracle      string `json:"oracle"`
	TokenVaultA string `json:"tokenVaultA"`
	TokenVaultB string `json:"tokenVaultB"`
	Whirlpool   string `json:"whirlpool"`
}

// PingResponse defines model for pingResponse.
type PingResponse struct {
	Message string `json:"message"`
}

// Position defines model for position.
type Position struct {
	Authority                string `json:"authority"`
	DcaPeriodIdBeforeDeposit string `json:"dcaPeriodIdBeforeDeposit"`
	DepositTimestamp         string `json:"depositTimestamp"`
	DepositedTokenAAmount    string `json:"depositedTokenAAmount"`
	IsClosed                 bool   `json:"isClosed"`
	NumberOfSwaps            string `json:"numberOfSwaps"`
	PeriodicDripAmount       string `json:"periodicDripAmount"`
	Pubkey                   string `json:"pubkey"`
	Vault                    string `json:"vault"`
	WithdrawnTokenBAmount    string `json:"withdrawnTokenBAmount"`
}

// ProtoConfig defines model for protoConfig.
type ProtoConfig struct {
	Admin                   string `json:"admin"`
	Granularity             string `json:"granularity"`
	Pubkey                  string `json:"pubkey"`
	TokenADripTriggerSpread int    `json:"tokenADripTriggerSpread"`
	TokenBReferralSpread    int    `json:"tokenBReferralSpread"`
	TokenBWithdrawalSpread  int    `json:"tokenBWithdrawalSpread"`
}

// SplTokenSwapConfig defines model for splTokenSwapConfig.
type SplTokenSwapConfig struct {
	// Embedded struct due to allOf(#/components/schemas/dripCommon)
	DripCommon `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Swap              string `json:"swap"`
	SwapAuthority     string `json:"swapAuthority"`
	SwapFeeAccount    string `json:"swapFeeAccount"`
	SwapTokenAAccount string `json:"swapTokenAAccount"`
	SwapTokenBAccount string `json:"swapTokenBAccount"`
	SwapTokenMint     string `json:"swapTokenMint"`
}

// Token defines model for token.
type Token struct {
	Decimals int     `json:"decimals"`
	Pubkey   string  `json:"pubkey"`
	Symbol   *string `json:"symbol,omitempty"`
}

// TokenAccountBalance defines model for tokenAccountBalance.
type TokenAccountBalance struct {
	Amount string `json:"amount"`
	Mint   string `json:"mint"`
	Owner  string `json:"owner"`
	Pubkey string `json:"pubkey"`
	State  string `json:"state"`
}

// TokenMetadata defines model for tokenMetadata.
type TokenMetadata struct {
	Collection struct {
		Family string `json:"family"`
		Name   string `json:"name"`
	} `json:"collection"`
	Description string `json:"description"`
	ExternalUrl string `json:"external_url"`
	Image       string `json:"image"`
	Name        string `json:"name"`
	Symbol      string `json:"symbol"`
}

// TokenPair defines model for tokenPair.
type TokenPair struct {
	Id     string `json:"id"`
	TokenA string `json:"tokenA"`
	TokenB string `json:"tokenB"`
}

// Vault defines model for vault.
type Vault struct {
	// unix timestamp
	DcaActivationTimestamp string `json:"dcaActivationTimestamp"`
	DripAmount             string `json:"dripAmount"`
	Enabled                bool   `json:"enabled"`
	LastDcaPeriod          string `json:"lastDcaPeriod"`
	ProtoConfig            string `json:"protoConfig"`
	Pubkey                 string `json:"pubkey"`
	TokenAAccount          string `json:"tokenAAccount"`
	TokenAMint             string `json:"tokenAMint"`
	TokenBAccount          string `json:"tokenBAccount"`
	TokenBMint             string `json:"tokenBMint"`
	TreasuryTokenBAccount  string `json:"treasuryTokenBAccount"`
}

// VaultPeriod defines model for vaultPeriod.
type VaultPeriod struct {
	Dar      string `json:"dar"`
	PeriodId string `json:"periodId"`
	Pubkey   string `json:"pubkey"`
	Twap     string `json:"twap"`
	Vault    string `json:"vault"`
}

// EnabledQueryParam defines model for enabledQueryParam.
type EnabledQueryParam bool

// ExpandAdminPositionsQueryParam defines model for expandAdminPositionsQueryParam.
type ExpandAdminPositionsQueryParam []string

// ExpandAdminVaultsQueryParam defines model for expandAdminVaultsQueryParam.
type ExpandAdminVaultsQueryParam []string

// GoogleTokenIdHeaderParam defines model for googleTokenIdHeaderParam.
type GoogleTokenIdHeaderParam string

// IsClosedQueryParam defines model for isClosedQueryParam.
type IsClosedQueryParam bool

// LikeTokenAQueryParam defines model for likeTokenAQueryParam.
type LikeTokenAQueryParam string

// LikeTokenBQueryParam defines model for likeTokenBQueryParam.
type LikeTokenBQueryParam string

// LikeVaultQueryParam defines model for likeVaultQueryParam.
type LikeVaultQueryParam string

// LimitQueryParam defines model for limitQueryParam.
type LimitQueryParam int

// OffsetQueryParam defines model for offsetQueryParam.
type OffsetQueryParam int

// OwnerQueryParam defines model for ownerQueryParam.
type OwnerQueryParam string

// ProtoConfigQueryParam defines model for protoConfigQueryParam.
type ProtoConfigQueryParam string

// PubkeyPathParam defines model for pubkeyPathParam.
type PubkeyPathParam string

// RequiredVaultQueryParam defines model for requiredVaultQueryParam.
type RequiredVaultQueryParam string

// RequiredWalletQueryParam defines model for requiredWalletQueryParam.
type RequiredWalletQueryParam string

// TokenAQueryParam defines model for tokenAQueryParam.
type TokenAQueryParam string

// TokenBQueryParam defines model for tokenBQueryParam.
type TokenBQueryParam string

// VaultPeriodQueryParam defines model for vaultPeriodQueryParam.
type VaultPeriodQueryParam string

// VaultQueryParam defines model for vaultQueryParam.
type VaultQueryParam string

// PostMintJSONBody defines parameters for PostMint.
type PostMintJSONBody MintRequest

// GetTokenpairsParams defines parameters for GetTokenpairs.
type GetTokenpairsParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`
}

// GetTokensParams defines parameters for GetTokens.
type GetTokensParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`
}

// GetV1AdminPositionsParams defines parameters for GetV1AdminPositions.
type GetV1AdminPositionsParams struct {
	Expand   *ExpandAdminPositionsQueryParam `json:"expand,omitempty"`
	Enabled  *EnabledQueryParam              `json:"enabled,omitempty"`
	IsClosed *IsClosedQueryParam             `json:"isClosed,omitempty"`
	Offset   *OffsetQueryParam               `json:"offset,omitempty"`
	Limit    *LimitQueryParam                `json:"limit,omitempty"`
	TokenId  GoogleTokenIdHeaderParam        `json:"token-id"`
}

// GetV1AdminPositionsParamsExpand defines parameters for GetV1AdminPositions.
type GetV1AdminPositionsParamsExpand string

// GetV1AdminSummaryActivewalletsParams defines parameters for GetV1AdminSummaryActivewallets.
type GetV1AdminSummaryActivewalletsParams struct {
	Vault    *VaultQueryParam         `json:"vault,omitempty"`
	IsClosed *IsClosedQueryParam      `json:"isClosed,omitempty"`
	Owner    *OwnerQueryParam         `json:"owner,omitempty"`
	TokenId  GoogleTokenIdHeaderParam `json:"token-id"`
}

// PutV1AdminVaultPubkeyPathEnableParams defines parameters for PutV1AdminVaultPubkeyPathEnable.
type PutV1AdminVaultPubkeyPathEnableParams struct {
	TokenId GoogleTokenIdHeaderParam `json:"token-id"`
}

// GetV1AdminVaultsParams defines parameters for GetV1AdminVaults.
type GetV1AdminVaultsParams struct {
	Expand  *ExpandAdminVaultsQueryParam `json:"expand,omitempty"`
	Vault   *LikeVaultQueryParam         `json:"vault,omitempty"`
	TokenA  *LikeTokenAQueryParam        `json:"tokenA,omitempty"`
	TokenB  *LikeTokenBQueryParam        `json:"tokenB,omitempty"`
	Enabled *EnabledQueryParam           `json:"enabled,omitempty"`
	Offset  *OffsetQueryParam            `json:"offset,omitempty"`
	Limit   *LimitQueryParam             `json:"limit,omitempty"`
	TokenId GoogleTokenIdHeaderParam     `json:"token-id"`
}

// GetV1AdminVaultsParamsExpand defines parameters for GetV1AdminVaults.
type GetV1AdminVaultsParamsExpand string

// GetV1DripOrcawhirlpoolconfigsParams defines parameters for GetV1DripOrcawhirlpoolconfigs.
type GetV1DripOrcawhirlpoolconfigsParams struct {
	Vault *VaultQueryParam `json:"vault,omitempty"`
}

// GetV1DripSpltokenswapconfigsParams defines parameters for GetV1DripSpltokenswapconfigs.
type GetV1DripSpltokenswapconfigsParams struct {
	Vault *VaultQueryParam `json:"vault,omitempty"`
}

// GetV1PositionsParams defines parameters for GetV1Positions.
type GetV1PositionsParams struct {
	Wallet   RequiredWalletQueryParam `json:"wallet"`
	IsClosed *IsClosedQueryParam      `json:"isClosed,omitempty"`
	Offset   *OffsetQueryParam        `json:"offset,omitempty"`
	Limit    *LimitQueryParam         `json:"limit,omitempty"`
}

// GetV1VaultperiodsParams defines parameters for GetV1Vaultperiods.
type GetV1VaultperiodsParams struct {
	Vault       RequiredVaultQueryParam `json:"vault"`
	VaultPeriod *VaultPeriodQueryParam  `json:"vaultPeriod,omitempty"`
	Offset      *OffsetQueryParam       `json:"offset,omitempty"`
	Limit       *LimitQueryParam        `json:"limit,omitempty"`
}

// GetV1VaultsParams defines parameters for GetV1Vaults.
type GetV1VaultsParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`

	// Vault proto config public key.
	ProtoConfig *ProtoConfigQueryParam `json:"protoConfig,omitempty"`
}

// PostMintJSONRequestBody defines body for PostMint for application/json ContentType.
type PostMintJSONRequestBody PostMintJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMint request with any body
	PostMintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMint(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwaggerJson request
	GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokenpairs request
	GetTokenpairs(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokens request
	GetTokens(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdminPositions request
	GetV1AdminPositions(ctx context.Context, params *GetV1AdminPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdminSummaryActivewallets request
	GetV1AdminSummaryActivewallets(ctx context.Context, params *GetV1AdminSummaryActivewalletsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1AdminVaultPubkeyPathEnable request
	PutV1AdminVaultPubkeyPathEnable(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutV1AdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdminVaults request
	GetV1AdminVaults(ctx context.Context, params *GetV1AdminVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DripOrcawhirlpoolconfigs request
	GetV1DripOrcawhirlpoolconfigs(ctx context.Context, params *GetV1DripOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DripPositionPubkeyPathMetadata request
	GetV1DripPositionPubkeyPathMetadata(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DripSpltokenswapconfigs request
	GetV1DripSpltokenswapconfigs(ctx context.Context, params *GetV1DripSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DripPubkeyPathTokenmetadata request
	GetV1DripPubkeyPathTokenmetadata(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Positions request
	GetV1Positions(ctx context.Context, params *GetV1PositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Protoconfigs request
	GetV1Protoconfigs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Vaultperiods request
	GetV1Vaultperiods(ctx context.Context, params *GetV1VaultperiodsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Vaults request
	GetV1Vaults(ctx context.Context, params *GetV1VaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMintRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMint(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMintRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwaggerJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokenpairs(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenpairsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokens(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdminPositions(ctx context.Context, params *GetV1AdminPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdminPositionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdminSummaryActivewallets(ctx context.Context, params *GetV1AdminSummaryActivewalletsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdminSummaryActivewalletsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AdminVaultPubkeyPathEnable(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutV1AdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AdminVaultPubkeyPathEnableRequest(c.Server, pubkeyPath, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdminVaults(ctx context.Context, params *GetV1AdminVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdminVaultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DripOrcawhirlpoolconfigs(ctx context.Context, params *GetV1DripOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DripOrcawhirlpoolconfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DripPositionPubkeyPathMetadata(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DripPositionPubkeyPathMetadataRequest(c.Server, pubkeyPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DripSpltokenswapconfigs(ctx context.Context, params *GetV1DripSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DripSpltokenswapconfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DripPubkeyPathTokenmetadata(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DripPubkeyPathTokenmetadataRequest(c.Server, pubkeyPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Positions(ctx context.Context, params *GetV1PositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PositionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Protoconfigs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProtoconfigsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Vaultperiods(ctx context.Context, params *GetV1VaultperiodsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VaultperiodsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Vaults(ctx context.Context, params *GetV1VaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VaultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMintRequest calls the generic PostMint builder with application/json body
func NewPostMintRequest(server string, body PostMintJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMintRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMintRequestWithBody generates requests for PostMint with any type of body
func NewPostMintRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwaggerJsonRequest generates requests for GetSwaggerJson
func NewGetSwaggerJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swagger.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokenpairsRequest generates requests for GetTokenpairs
func NewGetTokenpairsRequest(server string, params *GetTokenpairsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokenpairs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokensRequest generates requests for GetTokens
func NewGetTokensRequest(server string, params *GetTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AdminPositionsRequest generates requests for GetV1AdminPositions
func NewGetV1AdminPositionsRequest(server string, params *GetV1AdminPositionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/positions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsClosed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isClosed", runtime.ParamLocationQuery, *params.IsClosed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewGetV1AdminSummaryActivewalletsRequest generates requests for GetV1AdminSummaryActivewallets
func NewGetV1AdminSummaryActivewalletsRequest(server string, params *GetV1AdminSummaryActivewalletsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/summary/activewallets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Vault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsClosed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isClosed", runtime.ParamLocationQuery, *params.IsClosed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Owner != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewPutV1AdminVaultPubkeyPathEnableRequest generates requests for PutV1AdminVaultPubkeyPathEnable
func NewPutV1AdminVaultPubkeyPathEnableRequest(server string, pubkeyPath PubkeyPathParam, params *PutV1AdminVaultPubkeyPathEnableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, pubkeyPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/vault/%s/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewGetV1AdminVaultsRequest generates requests for GetV1AdminVaults
func NewGetV1AdminVaultsRequest(server string, params *GetV1AdminVaultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/vaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Vault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewGetV1DripOrcawhirlpoolconfigsRequest generates requests for GetV1DripOrcawhirlpoolconfigs
func NewGetV1DripOrcawhirlpoolconfigsRequest(server string, params *GetV1DripOrcawhirlpoolconfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drip/orcawhirlpoolconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Vault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DripPositionPubkeyPathMetadataRequest generates requests for GetV1DripPositionPubkeyPathMetadata
func NewGetV1DripPositionPubkeyPathMetadataRequest(server string, pubkeyPath PubkeyPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, pubkeyPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drip/position/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DripSpltokenswapconfigsRequest generates requests for GetV1DripSpltokenswapconfigs
func NewGetV1DripSpltokenswapconfigsRequest(server string, params *GetV1DripSpltokenswapconfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drip/spltokenswapconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Vault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DripPubkeyPathTokenmetadataRequest generates requests for GetV1DripPubkeyPathTokenmetadata
func NewGetV1DripPubkeyPathTokenmetadataRequest(server string, pubkeyPath PubkeyPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, pubkeyPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drip/%s/tokenmetadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PositionsRequest generates requests for GetV1Positions
func NewGetV1PositionsRequest(server string, params *GetV1PositionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/positions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wallet", runtime.ParamLocationQuery, params.Wallet); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.IsClosed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isClosed", runtime.ParamLocationQuery, *params.IsClosed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProtoconfigsRequest generates requests for GetV1Protoconfigs
func NewGetV1ProtoconfigsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/protoconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1VaultperiodsRequest generates requests for GetV1Vaultperiods
func NewGetV1VaultperiodsRequest(server string, params *GetV1VaultperiodsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/vaultperiods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, params.Vault); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.VaultPeriod != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vaultPeriod", runtime.ParamLocationQuery, *params.VaultPeriod); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1VaultsRequest generates requests for GetV1Vaults
func NewGetV1VaultsRequest(server string, params *GetV1VaultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/vaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProtoConfig != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protoConfig", runtime.ParamLocationQuery, *params.ProtoConfig); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Get request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// PostMint request with any body
	PostMintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMintResponse, error)

	PostMintWithResponse(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMintResponse, error)

	// GetSwaggerJson request
	GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error)

	// GetTokenpairs request
	GetTokenpairsWithResponse(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*GetTokenpairsResponse, error)

	// GetTokens request
	GetTokensWithResponse(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*GetTokensResponse, error)

	// GetV1AdminPositions request
	GetV1AdminPositionsWithResponse(ctx context.Context, params *GetV1AdminPositionsParams, reqEditors ...RequestEditorFn) (*GetV1AdminPositionsResponse, error)

	// GetV1AdminSummaryActivewallets request
	GetV1AdminSummaryActivewalletsWithResponse(ctx context.Context, params *GetV1AdminSummaryActivewalletsParams, reqEditors ...RequestEditorFn) (*GetV1AdminSummaryActivewalletsResponse, error)

	// PutV1AdminVaultPubkeyPathEnable request
	PutV1AdminVaultPubkeyPathEnableWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutV1AdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*PutV1AdminVaultPubkeyPathEnableResponse, error)

	// GetV1AdminVaults request
	GetV1AdminVaultsWithResponse(ctx context.Context, params *GetV1AdminVaultsParams, reqEditors ...RequestEditorFn) (*GetV1AdminVaultsResponse, error)

	// GetV1DripOrcawhirlpoolconfigs request
	GetV1DripOrcawhirlpoolconfigsWithResponse(ctx context.Context, params *GetV1DripOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*GetV1DripOrcawhirlpoolconfigsResponse, error)

	// GetV1DripPositionPubkeyPathMetadata request
	GetV1DripPositionPubkeyPathMetadataWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*GetV1DripPositionPubkeyPathMetadataResponse, error)

	// GetV1DripSpltokenswapconfigs request
	GetV1DripSpltokenswapconfigsWithResponse(ctx context.Context, params *GetV1DripSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*GetV1DripSpltokenswapconfigsResponse, error)

	// GetV1DripPubkeyPathTokenmetadata request
	GetV1DripPubkeyPathTokenmetadataWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*GetV1DripPubkeyPathTokenmetadataResponse, error)

	// GetV1Positions request
	GetV1PositionsWithResponse(ctx context.Context, params *GetV1PositionsParams, reqEditors ...RequestEditorFn) (*GetV1PositionsResponse, error)

	// GetV1Protoconfigs request
	GetV1ProtoconfigsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ProtoconfigsResponse, error)

	// GetV1Vaultperiods request
	GetV1VaultperiodsWithResponse(ctx context.Context, params *GetV1VaultperiodsParams, reqEditors ...RequestEditorFn) (*GetV1VaultperiodsResponse, error)

	// GetV1Vaults request
	GetV1VaultsWithResponse(ctx context.Context, params *GetV1VaultsParams, reqEditors ...RequestEditorFn) (*GetV1VaultsResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingResponse
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MintResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostMintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwaggerJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSwaggerJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwaggerJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenpairsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTokenPairs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTokenpairsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenpairsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTokens
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdminPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAdminPositions
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1AdminPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdminPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdminSummaryActivewalletsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListActiveWallets
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1AdminSummaryActivewalletsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdminSummaryActivewalletsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1AdminVaultPubkeyPathEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Vault
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutV1AdminVaultPubkeyPathEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1AdminVaultPubkeyPathEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdminVaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListExpandedAdminVaults
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1AdminVaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdminVaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DripOrcawhirlpoolconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListOrcaWhirlpoolConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1DripOrcawhirlpoolconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DripOrcawhirlpoolconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DripPositionPubkeyPathMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenMetadata
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1DripPositionPubkeyPathMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DripPositionPubkeyPathMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DripSpltokenswapconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSplTokenSwapConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1DripSpltokenswapconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DripSpltokenswapconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DripPubkeyPathTokenmetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenMetadata
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1DripPubkeyPathTokenmetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DripPubkeyPathTokenmetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPositions
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1PositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProtoconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListProtoConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1ProtoconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProtoconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VaultperiodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListVaultPeriods
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1VaultperiodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VaultperiodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListVaults
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1VaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// PostMintWithBodyWithResponse request with arbitrary body returning *PostMintResponse
func (c *ClientWithResponses) PostMintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMintResponse, error) {
	rsp, err := c.PostMintWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMintResponse(rsp)
}

func (c *ClientWithResponses) PostMintWithResponse(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMintResponse, error) {
	rsp, err := c.PostMint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMintResponse(rsp)
}

// GetSwaggerJsonWithResponse request returning *GetSwaggerJsonResponse
func (c *ClientWithResponses) GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error) {
	rsp, err := c.GetSwaggerJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwaggerJsonResponse(rsp)
}

// GetTokenpairsWithResponse request returning *GetTokenpairsResponse
func (c *ClientWithResponses) GetTokenpairsWithResponse(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*GetTokenpairsResponse, error) {
	rsp, err := c.GetTokenpairs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenpairsResponse(rsp)
}

// GetTokensWithResponse request returning *GetTokensResponse
func (c *ClientWithResponses) GetTokensWithResponse(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*GetTokensResponse, error) {
	rsp, err := c.GetTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokensResponse(rsp)
}

// GetV1AdminPositionsWithResponse request returning *GetV1AdminPositionsResponse
func (c *ClientWithResponses) GetV1AdminPositionsWithResponse(ctx context.Context, params *GetV1AdminPositionsParams, reqEditors ...RequestEditorFn) (*GetV1AdminPositionsResponse, error) {
	rsp, err := c.GetV1AdminPositions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdminPositionsResponse(rsp)
}

// GetV1AdminSummaryActivewalletsWithResponse request returning *GetV1AdminSummaryActivewalletsResponse
func (c *ClientWithResponses) GetV1AdminSummaryActivewalletsWithResponse(ctx context.Context, params *GetV1AdminSummaryActivewalletsParams, reqEditors ...RequestEditorFn) (*GetV1AdminSummaryActivewalletsResponse, error) {
	rsp, err := c.GetV1AdminSummaryActivewallets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdminSummaryActivewalletsResponse(rsp)
}

// PutV1AdminVaultPubkeyPathEnableWithResponse request returning *PutV1AdminVaultPubkeyPathEnableResponse
func (c *ClientWithResponses) PutV1AdminVaultPubkeyPathEnableWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutV1AdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*PutV1AdminVaultPubkeyPathEnableResponse, error) {
	rsp, err := c.PutV1AdminVaultPubkeyPathEnable(ctx, pubkeyPath, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AdminVaultPubkeyPathEnableResponse(rsp)
}

// GetV1AdminVaultsWithResponse request returning *GetV1AdminVaultsResponse
func (c *ClientWithResponses) GetV1AdminVaultsWithResponse(ctx context.Context, params *GetV1AdminVaultsParams, reqEditors ...RequestEditorFn) (*GetV1AdminVaultsResponse, error) {
	rsp, err := c.GetV1AdminVaults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdminVaultsResponse(rsp)
}

// GetV1DripOrcawhirlpoolconfigsWithResponse request returning *GetV1DripOrcawhirlpoolconfigsResponse
func (c *ClientWithResponses) GetV1DripOrcawhirlpoolconfigsWithResponse(ctx context.Context, params *GetV1DripOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*GetV1DripOrcawhirlpoolconfigsResponse, error) {
	rsp, err := c.GetV1DripOrcawhirlpoolconfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DripOrcawhirlpoolconfigsResponse(rsp)
}

// GetV1DripPositionPubkeyPathMetadataWithResponse request returning *GetV1DripPositionPubkeyPathMetadataResponse
func (c *ClientWithResponses) GetV1DripPositionPubkeyPathMetadataWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*GetV1DripPositionPubkeyPathMetadataResponse, error) {
	rsp, err := c.GetV1DripPositionPubkeyPathMetadata(ctx, pubkeyPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DripPositionPubkeyPathMetadataResponse(rsp)
}

// GetV1DripSpltokenswapconfigsWithResponse request returning *GetV1DripSpltokenswapconfigsResponse
func (c *ClientWithResponses) GetV1DripSpltokenswapconfigsWithResponse(ctx context.Context, params *GetV1DripSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*GetV1DripSpltokenswapconfigsResponse, error) {
	rsp, err := c.GetV1DripSpltokenswapconfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DripSpltokenswapconfigsResponse(rsp)
}

// GetV1DripPubkeyPathTokenmetadataWithResponse request returning *GetV1DripPubkeyPathTokenmetadataResponse
func (c *ClientWithResponses) GetV1DripPubkeyPathTokenmetadataWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, reqEditors ...RequestEditorFn) (*GetV1DripPubkeyPathTokenmetadataResponse, error) {
	rsp, err := c.GetV1DripPubkeyPathTokenmetadata(ctx, pubkeyPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DripPubkeyPathTokenmetadataResponse(rsp)
}

// GetV1PositionsWithResponse request returning *GetV1PositionsResponse
func (c *ClientWithResponses) GetV1PositionsWithResponse(ctx context.Context, params *GetV1PositionsParams, reqEditors ...RequestEditorFn) (*GetV1PositionsResponse, error) {
	rsp, err := c.GetV1Positions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PositionsResponse(rsp)
}

// GetV1ProtoconfigsWithResponse request returning *GetV1ProtoconfigsResponse
func (c *ClientWithResponses) GetV1ProtoconfigsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ProtoconfigsResponse, error) {
	rsp, err := c.GetV1Protoconfigs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProtoconfigsResponse(rsp)
}

// GetV1VaultperiodsWithResponse request returning *GetV1VaultperiodsResponse
func (c *ClientWithResponses) GetV1VaultperiodsWithResponse(ctx context.Context, params *GetV1VaultperiodsParams, reqEditors ...RequestEditorFn) (*GetV1VaultperiodsResponse, error) {
	rsp, err := c.GetV1Vaultperiods(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VaultperiodsResponse(rsp)
}

// GetV1VaultsWithResponse request returning *GetV1VaultsResponse
func (c *ClientWithResponses) GetV1VaultsWithResponse(ctx context.Context, params *GetV1VaultsParams, reqEditors ...RequestEditorFn) (*GetV1VaultsResponse, error) {
	rsp, err := c.GetV1Vaults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VaultsResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMintResponse parses an HTTP response from a PostMintWithResponse call
func ParsePostMintResponse(rsp *http.Response) (*PostMintResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MintResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSwaggerJsonResponse parses an HTTP response from a GetSwaggerJsonWithResponse call
func ParseGetSwaggerJsonResponse(rsp *http.Response) (*GetSwaggerJsonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwaggerJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTokenpairsResponse parses an HTTP response from a GetTokenpairsWithResponse call
func ParseGetTokenpairsResponse(rsp *http.Response) (*GetTokenpairsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenpairsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTokenPairs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTokensResponse parses an HTTP response from a GetTokensWithResponse call
func ParseGetTokensResponse(rsp *http.Response) (*GetTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTokens
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1AdminPositionsResponse parses an HTTP response from a GetV1AdminPositionsWithResponse call
func ParseGetV1AdminPositionsResponse(rsp *http.Response) (*GetV1AdminPositionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdminPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAdminPositions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1AdminSummaryActivewalletsResponse parses an HTTP response from a GetV1AdminSummaryActivewalletsWithResponse call
func ParseGetV1AdminSummaryActivewalletsResponse(rsp *http.Response) (*GetV1AdminSummaryActivewalletsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdminSummaryActivewalletsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListActiveWallets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutV1AdminVaultPubkeyPathEnableResponse parses an HTTP response from a PutV1AdminVaultPubkeyPathEnableWithResponse call
func ParsePutV1AdminVaultPubkeyPathEnableResponse(rsp *http.Response) (*PutV1AdminVaultPubkeyPathEnableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1AdminVaultPubkeyPathEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Vault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1AdminVaultsResponse parses an HTTP response from a GetV1AdminVaultsWithResponse call
func ParseGetV1AdminVaultsResponse(rsp *http.Response) (*GetV1AdminVaultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdminVaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListExpandedAdminVaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1DripOrcawhirlpoolconfigsResponse parses an HTTP response from a GetV1DripOrcawhirlpoolconfigsWithResponse call
func ParseGetV1DripOrcawhirlpoolconfigsResponse(rsp *http.Response) (*GetV1DripOrcawhirlpoolconfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DripOrcawhirlpoolconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListOrcaWhirlpoolConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1DripPositionPubkeyPathMetadataResponse parses an HTTP response from a GetV1DripPositionPubkeyPathMetadataWithResponse call
func ParseGetV1DripPositionPubkeyPathMetadataResponse(rsp *http.Response) (*GetV1DripPositionPubkeyPathMetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DripPositionPubkeyPathMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1DripSpltokenswapconfigsResponse parses an HTTP response from a GetV1DripSpltokenswapconfigsWithResponse call
func ParseGetV1DripSpltokenswapconfigsResponse(rsp *http.Response) (*GetV1DripSpltokenswapconfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DripSpltokenswapconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSplTokenSwapConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1DripPubkeyPathTokenmetadataResponse parses an HTTP response from a GetV1DripPubkeyPathTokenmetadataWithResponse call
func ParseGetV1DripPubkeyPathTokenmetadataResponse(rsp *http.Response) (*GetV1DripPubkeyPathTokenmetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DripPubkeyPathTokenmetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1PositionsResponse parses an HTTP response from a GetV1PositionsWithResponse call
func ParseGetV1PositionsResponse(rsp *http.Response) (*GetV1PositionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPositions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ProtoconfigsResponse parses an HTTP response from a GetV1ProtoconfigsWithResponse call
func ParseGetV1ProtoconfigsResponse(rsp *http.Response) (*GetV1ProtoconfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProtoconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListProtoConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1VaultperiodsResponse parses an HTTP response from a GetV1VaultperiodsWithResponse call
func ParseGetV1VaultperiodsResponse(rsp *http.Response) (*GetV1VaultperiodsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VaultperiodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListVaultPeriods
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1VaultsResponse parses an HTTP response from a GetV1VaultsWithResponse call
func ParseGetV1VaultsResponse(rsp *http.Response) (*GetV1VaultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListVaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health Check
	// (GET /)
	Get(ctx echo.Context) error
	// Mint tokens (DEVNET ONLY)
	// (POST /mint)
	PostMint(ctx echo.Context) error
	// Swagger spec
	// (GET /swagger.json)
	GetSwaggerJson(ctx echo.Context) error
	// Get Token Pairs
	// (GET /tokenpairs)
	GetTokenpairs(ctx echo.Context, params GetTokenpairsParams) error
	// Get Tokens
	// (GET /tokens)
	GetTokens(ctx echo.Context, params GetTokensParams) error
	// Get All Positions
	// (GET /v1/admin/positions)
	GetV1AdminPositions(ctx echo.Context, params GetV1AdminPositionsParams) error
	// Get All Active Wallet Addresses
	// (GET /v1/admin/summary/activewallets)
	GetV1AdminSummaryActivewallets(ctx echo.Context, params GetV1AdminSummaryActivewalletsParams) error
	// Toggle the 'enabled' flag on a vault
	// (PUT /v1/admin/vault/{pubkeyPath}/enable)
	PutV1AdminVaultPubkeyPathEnable(ctx echo.Context, pubkeyPath PubkeyPathParam, params PutV1AdminVaultPubkeyPathEnableParams) error
	// Get All Vaults
	// (GET /v1/admin/vaults)
	GetV1AdminVaults(ctx echo.Context, params GetV1AdminVaultsParams) error
	// Get Orca Whirlpool Swap Configs
	// (GET /v1/drip/orcawhirlpoolconfigs)
	GetV1DripOrcawhirlpoolconfigs(ctx echo.Context, params GetV1DripOrcawhirlpoolconfigsParams) error
	// Get Drip Position Metadata
	// (GET /v1/drip/position/{pubkeyPath}/metadata)
	GetV1DripPositionPubkeyPathMetadata(ctx echo.Context, pubkeyPath PubkeyPathParam) error
	// Get Token Swaps Configs
	// (GET /v1/drip/spltokenswapconfigs)
	GetV1DripSpltokenswapconfigs(ctx echo.Context, params GetV1DripSpltokenswapconfigsParams) error
	// Get TokenMetadata for Devnet Mints.
	// (GET /v1/drip/{pubkeyPath}/tokenmetadata)
	GetV1DripPubkeyPathTokenmetadata(ctx echo.Context, pubkeyPath PubkeyPathParam) error
	// Get User Positions
	// (GET /v1/positions)
	GetV1Positions(ctx echo.Context, params GetV1PositionsParams) error
	// Get Proto Configs
	// (GET /v1/protoconfigs)
	GetV1Protoconfigs(ctx echo.Context) error
	// Get Vault Periods
	// (GET /v1/vaultperiods)
	GetV1Vaultperiods(ctx echo.Context, params GetV1VaultperiodsParams) error
	// Get Supported Vaults
	// (GET /v1/vaults)
	GetV1Vaults(ctx echo.Context, params GetV1VaultsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx)
	return err
}

// PostMint converts echo context to params.
func (w *ServerInterfaceWrapper) PostMint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMint(ctx)
	return err
}

// GetSwaggerJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwaggerJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwaggerJson(ctx)
	return err
}

// GetTokenpairs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTokenpairs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTokenpairsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTokenpairs(ctx, params)
	return err
}

// GetTokens converts echo context to params.
func (w *ServerInterfaceWrapper) GetTokens(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTokensParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTokens(ctx, params)
	return err
}

// GetV1AdminPositions converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1AdminPositions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AdminPositionsParams
	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Optional query parameter "isClosed" -------------

	err = runtime.BindQueryParameter("form", true, false, "isClosed", ctx.QueryParams(), &params.IsClosed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isClosed: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1AdminPositions(ctx, params)
	return err
}

// GetV1AdminSummaryActivewallets converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1AdminSummaryActivewallets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AdminSummaryActivewalletsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "isClosed" -------------

	err = runtime.BindQueryParameter("form", true, false, "isClosed", ctx.QueryParams(), &params.IsClosed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isClosed: %s", err))
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", ctx.QueryParams(), &params.Owner)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter owner: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1AdminSummaryActivewallets(ctx, params)
	return err
}

// PutV1AdminVaultPubkeyPathEnable converts echo context to params.
func (w *ServerInterfaceWrapper) PutV1AdminVaultPubkeyPathEnable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutV1AdminVaultPubkeyPathEnableParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutV1AdminVaultPubkeyPathEnable(ctx, pubkeyPath, params)
	return err
}

// GetV1AdminVaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1AdminVaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1AdminVaultsParams
	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1AdminVaults(ctx, params)
	return err
}

// GetV1DripOrcawhirlpoolconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripOrcawhirlpoolconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1DripOrcawhirlpoolconfigsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripOrcawhirlpoolconfigs(ctx, params)
	return err
}

// GetV1DripPositionPubkeyPathMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripPositionPubkeyPathMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripPositionPubkeyPathMetadata(ctx, pubkeyPath)
	return err
}

// GetV1DripSpltokenswapconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripSpltokenswapconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1DripSpltokenswapconfigsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripSpltokenswapconfigs(ctx, params)
	return err
}

// GetV1DripPubkeyPathTokenmetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripPubkeyPathTokenmetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripPubkeyPathTokenmetadata(ctx, pubkeyPath)
	return err
}

// GetV1Positions converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Positions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1PositionsParams
	// ------------- Required query parameter "wallet" -------------

	err = runtime.BindQueryParameter("form", true, true, "wallet", ctx.QueryParams(), &params.Wallet)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter wallet: %s", err))
	}

	// ------------- Optional query parameter "isClosed" -------------

	err = runtime.BindQueryParameter("form", true, false, "isClosed", ctx.QueryParams(), &params.IsClosed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isClosed: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Positions(ctx, params)
	return err
}

// GetV1Protoconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Protoconfigs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Protoconfigs(ctx)
	return err
}

// GetV1Vaultperiods converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Vaultperiods(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1VaultperiodsParams
	// ------------- Required query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, true, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "vaultPeriod" -------------

	err = runtime.BindQueryParameter("form", true, false, "vaultPeriod", ctx.QueryParams(), &params.VaultPeriod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vaultPeriod: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Vaultperiods(ctx, params)
	return err
}

// GetV1Vaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Vaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1VaultsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// ------------- Optional query parameter "protoConfig" -------------

	err = runtime.BindQueryParameter("form", true, false, "protoConfig", ctx.QueryParams(), &params.ProtoConfig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protoConfig: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Vaults(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Get)
	router.POST(baseURL+"/mint", wrapper.PostMint)
	router.GET(baseURL+"/swagger.json", wrapper.GetSwaggerJson)
	router.GET(baseURL+"/tokenpairs", wrapper.GetTokenpairs)
	router.GET(baseURL+"/tokens", wrapper.GetTokens)
	router.GET(baseURL+"/v1/admin/positions", wrapper.GetV1AdminPositions)
	router.GET(baseURL+"/v1/admin/summary/activewallets", wrapper.GetV1AdminSummaryActivewallets)
	router.PUT(baseURL+"/v1/admin/vault/:pubkeyPath/enable", wrapper.PutV1AdminVaultPubkeyPathEnable)
	router.GET(baseURL+"/v1/admin/vaults", wrapper.GetV1AdminVaults)
	router.GET(baseURL+"/v1/drip/orcawhirlpoolconfigs", wrapper.GetV1DripOrcawhirlpoolconfigs)
	router.GET(baseURL+"/v1/drip/position/:pubkeyPath/metadata", wrapper.GetV1DripPositionPubkeyPathMetadata)
	router.GET(baseURL+"/v1/drip/spltokenswapconfigs", wrapper.GetV1DripSpltokenswapconfigs)
	router.GET(baseURL+"/v1/drip/:pubkeyPath/tokenmetadata", wrapper.GetV1DripPubkeyPathTokenmetadata)
	router.GET(baseURL+"/v1/positions", wrapper.GetV1Positions)
	router.GET(baseURL+"/v1/protoconfigs", wrapper.GetV1Protoconfigs)
	router.GET(baseURL+"/v1/vaultperiods", wrapper.GetV1Vaultperiods)
	router.GET(baseURL+"/v1/vaults", wrapper.GetV1Vaults)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xceXPiupb/Ki7PVN2ZKjoJO/RfA4Slw9JsIQn3dU0JWwaBNySZrSvffcryArZlMOmk",
	"75378s97t/HRT9LR7xydcyTlpygZmmnoUKdE/PpTNAEGGqQQs39BHcxUKA8siPd9+4v9I9LFr+La/klM",
	"iTrQoPjVExRTIpEWUAO2HN2b9qeZYagQ6OLra0qEOxPockXWkN43CKLI0EkCcNYqgI0o1NwRWpr49U8R",
	"qKqYEjfAUqmYEk1sUKNm6AqaiymRGiuoV7z/qIo/Ut7YCMVIn4uv/g8AY7APD3Vio77rOE/GNwGqBf1B",
	"dpFOA79UI79UKpJkWGGx8I8YAmLh/Tj6MdHs54YxVyFr/U1uQSBDHJz6gv12nDsbxRdkzx7DtYUwlMWv",
	"FFuQwwiv39eUiEhNNUgShnmSlyimopUz7splTJ8Y54boA1YTAlYTADJKXcbz+HweTkMJoJgYDwrpFM4h",
	"ZliGohCYAMyRu4i21SFOAGaLXZjkicEEAWVIJIxM25OIX0WmVoEJCxKTFkxrpiJJWMH9jZji9h90FmdH",
	"Yc1WcN8HdBGckAno4gTPl7rSGDzZK8nxli6egKomWegtk7uyE/qe5kff0/SYyvoQI0NOqF9HOAnse1jz",
	"q/eR7RlAomgDnaViezM2TIgpguyrYzZRkJRoultrzXb6MbZ5XM8/fQMMtjvuE8ZsCSVqI8sYmTVD02xj",
	"C4/nuIGx/W4HNFO1W1fH0152gR8yoxLJVfKoUlce63UIhnr38blUJ1YzrW/GYJFZaM8ib2/yt8Egbh5n",
	"ska7u5d2ur6sPOSken21SM9mNWMrTbeHTqH1oi066yE4DAAP11mNAGRmldX3u96gW7amL+vlvDzoTp8L",
	"s/meyM/Z7LqSaadH2UyzgfeVfCxk/8SdBNDL6xYubl+MYXtVaQzqD9ti9b6aq61LZJyrNZWKZGSlXqu4",
	"wtX+Uyz6+DQECOI369NmBTc28rq7b+QWaGdYZa2A6/UBbSsjq7hrz1EZteFykH85j1/l4pfTW0p2KF3G",
	"9yNrkRlbg/Zuunnao/RofD+omy9IqzSM7j5fmu2j+CHOebYQURl3ntzBncZMgXCJS12IsYGHkJiGTmCU",
	"vezzeZ9pD9sR++HHhzAYzDKrVdXvivj1z5/if2KoiF/F/7g9hti3rnnferYmvqbCQzGDBDqLciLqO95L",
	"jZjU0bISi/sGc07aEXp9jazAj1Ror25CKnh6E7aILoS6q1LhHlAghnU88bpPpmB3IOe068TDb1FxIKBO",
	"oj+3QRWoQJfgEegY3V+3aO81gOobBhCfWrxlIAmY8k2nEOtAFdiaCg7cjchiX0IrJ7skCeRc58YS2Fsj",
	"GZCLHMhTE0PzPUNMH/UIxd/Y0cTlO7eX71gCTwuEVdMwVIfMybsxoo3j+rleWeYF/ZxsDVeAhmyWgzsy",
	"VUbg0RaY18KTSNu4XphYHyCcHJx6Tc5iXokXhzU5hrjJEU/j4nO4VyLysDSk0yFcW5BwAmCgheLbYyij",
	"oZgPWz+YPr/Pa05M4ac/bl8//DHFxRF01wJkcbkDV84G5NlX4m3uJCKP7nUGBpIKg1Fciz6vytLmJY8I",
	"gBOwRWDceMTdQqWVTc8zzzO8Lq8ng+HmYSJ3YsNxtr6VIHCj318M+91S3thss+Zja1UarPurTGm8LGZy",
	"Uu9Zye4OcFmbzBot/TxwNRSVb7uDcb1Tn9eldnGSnW+n1Va+9LRpSsMp2YOnngln633DmjfbkAe89XQb",
	"hC1s0+WXfHGS1laZWiFfz68b2WLh+VC1Jmm03Oxyi0x72uu11uvJ4mI4e+wjqKHgtFLeivzgbXqRkNVE",
	"+jyeaRokBMxhAi67gj9OUkOONVl0YWBE90EtaUPpIVM80HGtodPZ42ZTnGT6o926U1YelHm63coph+no",
	"ZdLPcdkiS8DxFN/kKlQMDO8hG0Kwk/Qdt60jOkYaJBRoZqhNIZ8p5orl0rm2UHbzCC2azqTv7u64bf1K",
	"I6fAmBJ1S5tB/F2xnT8JZaS5LA/PZApA0j1GJm8gOe4onCrSuy4GJ+P9RUQ7bJcx2OpuMJhczSGOurM9",
	"VvCPdIxbzLjeOcQ5w8PwgnKX64QTXDsNJmwhu7KDs3dV+hwD3VJBxFYLd7+HRk4Yb6tnjNF8DvHIxBDI",
	"gT7yx7H4VScv5RhCBWIM1CubPbmrnbhhHMWcFQnqMX5Wsd3HTIdHEE7A+D4bPNmCkFtclTs9fUfmByoB",
	"vBkP9o3nQueQrzVLZndSLg9NOD2UrWWdHnK8tbUBK/yd4FcDBxu6ASG3tPQwG0w6+qAnrdKr5gw/PjSW",
	"9fFu1lCG9wtiWeX6GimNrvw42rfioM8Uxkpt2ig1n6papl/eypVdb7rQ0HQ9TOfHbb06qdbLz0R5KG3R",
	"bmqehefXxbL5deFxk11kjVGhaUmFwaDU2g3up4fDbPJCd500HT49FReNNMp3zsJHa5ylYVmrNhq4kEkP",
	"2/fTHlil2x0w6xD6WM9V4HJW6lSV+0WvT0D2oo8N9sPTGm+qkYULk8T5d8KQxslGIk5ShhLSgBrcT9Nc",
	"Z/ABDo3stVk4Ohx97yTftPzhp0QkGfojVsXYyYfqH2eymgShihZhzC+qwj9UeDfEj1gvCmgoq0E6ogio",
	"6MAOiBMum5vkeccfwNvsHfzYFexCCmRAQXTtJENVocSPrxWgIXXPTUqd46FLYTyTSnk43NOZ06oZpx+4",
	"c+po/2thlSuANH5CETvEU9tJNHpXPDhWr+PQCFOn+oxdDVYqiWgbyaGzi8KsNLuD8pdiGZS/5MrFzJeZ",
	"kodfckAqgVkZFhUZxMc67x8+hVLcLDoU9OlkiZpTKtcVpfJ4jyeLXCVf1be9wtRoLbN6vz+l7QdlcpHf",
	"SD575+WoPz8fCDljCbCaKrAVH8i+gmVZS0c7gZ4E2YmTs5hEKJ3h5k/e3SJuOqYCQu+94D4RnBl3PvcB",
	"ju7X1jV02hAqX/Q1Se4cZvVOZwf6UraxLjSWaLQsbumykuvWafqxNq3qrUWBbuOhOce1yroyfpn1pw8N",
	"uS6/PK3qs8awqi826U61sKUdPVMut5ZdrZ6z1vH05g45vy62OnNls9NW60q7MAD1xgvuaZv25jCYLp8e",
	"Dsvt0MpRA5VH22tOgisja73dbWq5xvPuoTkuP6+n3edZrX0/qILhuGLWF72M0ctOOtlKiYvLO9EIdlHD",
	"E3nd1V5qsyopHZoZrG3lp7lGRhXcHs+6j5vsejM+lB4KL0+15BsQ75pa9DQzTIOwjuMmEDaOgOGl4sz8",
	"aG+xLuNobCHHAXAyC3Qz8WTCH5DARrKmmL45BZN39dSRqoevGXeQKabT6EKwq3O6YjhBh06B5AxTA0i1",
	"9WNIC/A/sgSUG2Ic75907Z8jgYJo57zCDEgrqMsCgXiDJHjzL72iqkKl/+0PIizABgpA+NYXMKBQYDfJ",
	"BEMR0ncCdorzRDAhFgiUDF2++Rcr7yLK9MXAqw64PVGIidNr+ubu5o6FnCbUgYls3bKfUuw6FSPUrf0/",
	"c6deHxxzH+lzAZjoRmQAmJHYZpTYdK8rOWVTBpO5u/MUBR3DBqapIok1ul0SJ1w63so5e7R0WpNl6xAc",
	"2Pc2W2ViaRrAeztthkClC6G2gNKKfbr1gnbTIJyZ2V8FCgkVmJUTgRoCEGRIbNIIgBBDQoBC2fksAMfY",
	"U4KBBRMQAmUB6cFvERX1DUJdz+KuX9WQ9++motNDG46G+pCyOcn2FAS6gAKhBoaRO2avH7iKgTOcmFVM",
	"ibl37DF4/YTTZRXIgq+1lJj/nX37B+wjiDcQC3V2yyXI4y7jpUPJ/7qvT3r1sfC913n5b4fUZAvmc4hv",
	"vJG5VhuxzZEj90BY3P9LC8zxiRds0e1cICaUnGGzCZneAS3X1TShO2+ByTlXVRSkUogJ1/2Mj5ipwH36",
	"mErfUeQ2cnPyNZWszekFydcfH2g5oVPtT9tJYjs2hZjSBE9rHvUS0C4p4/7RbPtk2pVMc0m2Sd+y4w7/",
	"ns15wgFVFXxJh3cmmCOdzYdLvUk6dEvqWhLGvjRJQMYLz4mSIEQeOCVoxHm0kqBV5G1Fgjbhtx0fbmyh",
	"xfw0uqRGZ2dLp0ZAwZyw917ssPFH0Bjdpu4lxO3x6uJZw3Tk7MAZQ0Kga592+nS02XM2OnJ6rQQ6/Z3m",
	"Gn4m8XGmFnp49PFmE7iD+mk111iNozvBUZ5Q8dh9yYYYmW5/Hh9bvbrOnKXWFseO6uzzrYyI/f9O5mlC",
	"CSkIyoJXgQllypZnPM5NSb8zB+tq6wk/IEvA5XiD+0hSe9f4/4ZEzt2lf1/fj7p7EekA5b+lFY2N+dwl",
	"8x9uMPOHoKhgLhi6AHxaXzaly/uPIxbIRgSgy4J3DV04VoPPbUPu3eC/KE6MvOVOFIVFH+wmbDZ+Q4rF",
	"fXD8UbHs/4uolPdI4nOTvWaT9Y0uxhHIGJnsoYd/kVk6PoqI9Qq+sPvYmgiKgQUbK/DgJMYb3LtykS6v",
	"dQ2RuPKj+ch9TvNJyKSEtNUn+PoTRltgCkctnhDSS2uCYZ52cv8mrszssMtLyI5xm39355cjt4/kWPCa",
	"0SexkhKLHTb6b0pPFHjCKWKqTll1C8wkPs4p/dvSASdndzXqd/xrvWd83IjT49/exfHex30S8bpiP3tR",
	"wPdsAYfG2HGFV/ObjgMNP13aP5VJnt4czwM3OqRCF+mU3PisSl7ftwjEFwuGb6/nx/6FmX/vwvpnTf16",
	"7j/aTD1VnEt1bFAjydbNTrNO/hZULNlPAT+aB6fv2T+pkJQKTG2RrZRFRebx+XosE5w/HOFKhs81WRHr",
	"3PH6JD057eitHvENJST+36v6p/jEwF8f+LSFpLbg/JG7o95ObOFNRdxznP+rLpVcbsP/i4C/h7OfbE3O",
	"1pFlmgamUBaOqnv9vwAAAP//blkhQXZWAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
