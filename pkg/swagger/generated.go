// Package Swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package Swagger

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ErrorResponse defines model for errorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// ListProtoConfigs defines model for listProtoConfigs.
type ListProtoConfigs []struct {
	BaseWithdrawalSpread float32 `json:"baseWithdrawalSpread"`
	Granularity          float32 `json:"granularity"`
	Pubkey               string  `json:"pubkey"`
	TriggerDcaSpread     float32 `json:"triggerDcaSpread"`
}

// ListVaultPeriods defines model for listVaultPeriods.
type ListVaultPeriods []struct {
	Dar      string `json:"dar"`
	PeriodId string `json:"periodId"`
	Pubkey   string `json:"pubkey"`
	Twap     string `json:"twap"`
	Vault    string `json:"vault"`
}

// ListVaults defines model for listVaults.
type ListVaults []struct {
	// unix timestamp
	DcaActivationTimestamp string `json:"dcaActivationTimestamp"`
	DripAmount             string `json:"dripAmount"`
	LastDcaPeriod          string `json:"lastDcaPeriod"`
	ProtoConfig            string `json:"protoConfig"`
	Pubkey                 string `json:"pubkey"`
	TokenAAccount          string `json:"tokenAAccount"`
	TokenAMint             string `json:"tokenAMint"`
	TokenBAccount          string `json:"tokenBAccount"`
	TokenBMint             string `json:"tokenBMint"`
	TreasuryTokenBAccount  string `json:"treasuryTokenBAccount"`
}

// MintRequest defines model for mintRequest.
type MintRequest struct {
	Amount string `json:"amount"`
	Mint   string `json:"mint"`
	Wallet string `json:"wallet"`
}

// MintResponse defines model for mintResponse.
type MintResponse struct {
	TxHash string `json:"txHash"`
}

// PingResponse defines model for pingResponse.
type PingResponse struct {
	Message string `json:"message"`
}

// Limit defines model for limit.
type Limit float32

// Offset defines model for offset.
type Offset float32

// ProtoConfig defines model for protoConfig.
type ProtoConfig string

// RequiredVault defines model for requiredVault.
type RequiredVault string

// TokenA defines model for tokenA.
type TokenA string

// TokenB defines model for tokenB.
type TokenB string

// VaultPeriod defines model for vaultPeriod.
type VaultPeriod string

// PostMintJSONBody defines parameters for PostMint.
type PostMintJSONBody MintRequest

// GetProtoconfigsParams defines parameters for GetProtoconfigs.
type GetProtoconfigsParams struct {
	TokenA *TokenA `json:"tokenA,omitempty"`
	TokenB *TokenB `json:"tokenB,omitempty"`
}

// GetVaultperiodsParams defines parameters for GetVaultperiods.
type GetVaultperiodsParams struct {
	Vault       RequiredVault `json:"vault"`
	VaultPeriod *VaultPeriod  `json:"vaultPeriod,omitempty"`
	Offset      *Offset       `json:"offset,omitempty"`
	Limit       *Limit        `json:"limit,omitempty"`
}

// GetVaultsParams defines parameters for GetVaults.
type GetVaultsParams struct {
	TokenA *TokenA `json:"tokenA,omitempty"`
	TokenB *TokenB `json:"tokenB,omitempty"`

	// Vault proto config public key.
	ProtoConfig *ProtoConfig `json:"protoConfig,omitempty"`
}

// PostMintJSONRequestBody defines body for PostMint for application/json ContentType.
type PostMintJSONRequestBody PostMintJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMint request with any body
	PostMintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMint(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProtoconfigs request
	GetProtoconfigs(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwaggerJson request
	GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVaultperiods request
	GetVaultperiods(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVaults request
	GetVaults(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMintRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMint(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMintRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProtoconfigs(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProtoconfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwaggerJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVaultperiods(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVaultperiodsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVaults(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVaultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMintRequest calls the generic PostMint builder with application/json body
func NewPostMintRequest(server string, body PostMintJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMintRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMintRequestWithBody generates requests for PostMint with any type of body
func NewPostMintRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProtoconfigsRequest generates requests for GetProtoconfigs
func NewGetProtoconfigsRequest(server string, params *GetProtoconfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/protoconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwaggerJsonRequest generates requests for GetSwaggerJson
func NewGetSwaggerJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swagger.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVaultperiodsRequest generates requests for GetVaultperiods
func NewGetVaultperiodsRequest(server string, params *GetVaultperiodsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vaultperiods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, params.Vault); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.VaultPeriod != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vaultPeriod", runtime.ParamLocationQuery, *params.VaultPeriod); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVaultsRequest generates requests for GetVaults
func NewGetVaultsRequest(server string, params *GetVaultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProtoConfig != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protoConfig", runtime.ParamLocationQuery, *params.ProtoConfig); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Get request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// PostMint request with any body
	PostMintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMintResponse, error)

	PostMintWithResponse(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMintResponse, error)

	// GetProtoconfigs request
	GetProtoconfigsWithResponse(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*GetProtoconfigsResponse, error)

	// GetSwaggerJson request
	GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error)

	// GetVaultperiods request
	GetVaultperiodsWithResponse(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*GetVaultperiodsResponse, error)

	// GetVaults request
	GetVaultsWithResponse(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*GetVaultsResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingResponse
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MintResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostMintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProtoconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListProtoConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProtoconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProtoconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwaggerJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSwaggerJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwaggerJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVaultperiodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListVaultPeriods
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVaultperiodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVaultperiodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListVaults
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// PostMintWithBodyWithResponse request with arbitrary body returning *PostMintResponse
func (c *ClientWithResponses) PostMintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMintResponse, error) {
	rsp, err := c.PostMintWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMintResponse(rsp)
}

func (c *ClientWithResponses) PostMintWithResponse(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMintResponse, error) {
	rsp, err := c.PostMint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMintResponse(rsp)
}

// GetProtoconfigsWithResponse request returning *GetProtoconfigsResponse
func (c *ClientWithResponses) GetProtoconfigsWithResponse(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*GetProtoconfigsResponse, error) {
	rsp, err := c.GetProtoconfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProtoconfigsResponse(rsp)
}

// GetSwaggerJsonWithResponse request returning *GetSwaggerJsonResponse
func (c *ClientWithResponses) GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error) {
	rsp, err := c.GetSwaggerJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwaggerJsonResponse(rsp)
}

// GetVaultperiodsWithResponse request returning *GetVaultperiodsResponse
func (c *ClientWithResponses) GetVaultperiodsWithResponse(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*GetVaultperiodsResponse, error) {
	rsp, err := c.GetVaultperiods(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVaultperiodsResponse(rsp)
}

// GetVaultsWithResponse request returning *GetVaultsResponse
func (c *ClientWithResponses) GetVaultsWithResponse(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*GetVaultsResponse, error) {
	rsp, err := c.GetVaults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVaultsResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMintResponse parses an HTTP response from a PostMintWithResponse call
func ParsePostMintResponse(rsp *http.Response) (*PostMintResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MintResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProtoconfigsResponse parses an HTTP response from a GetProtoconfigsWithResponse call
func ParseGetProtoconfigsResponse(rsp *http.Response) (*GetProtoconfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProtoconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListProtoConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSwaggerJsonResponse parses an HTTP response from a GetSwaggerJsonWithResponse call
func ParseGetSwaggerJsonResponse(rsp *http.Response) (*GetSwaggerJsonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwaggerJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVaultperiodsResponse parses an HTTP response from a GetVaultperiodsWithResponse call
func ParseGetVaultperiodsResponse(rsp *http.Response) (*GetVaultperiodsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVaultperiodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListVaultPeriods
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetVaultsResponse parses an HTTP response from a GetVaultsWithResponse call
func ParseGetVaultsResponse(rsp *http.Response) (*GetVaultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListVaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health Check
	// (GET /)
	Get(ctx echo.Context) error
	// Mint tokens (DEVNET ONLY)
	// (POST /mint)
	PostMint(ctx echo.Context) error
	// Get Proto Configs
	// (GET /protoconfigs)
	GetProtoconfigs(ctx echo.Context, params GetProtoconfigsParams) error
	// Swagger spec
	// (GET /swagger.json)
	GetSwaggerJson(ctx echo.Context) error
	// Get Vault Periods
	// (GET /vaultperiods)
	GetVaultperiods(ctx echo.Context, params GetVaultperiodsParams) error
	// Get Supported Vaults
	// (GET /vaults)
	GetVaults(ctx echo.Context, params GetVaultsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx)
	return err
}

// PostMint converts echo context to params.
func (w *ServerInterfaceWrapper) PostMint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMint(ctx)
	return err
}

// GetProtoconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetProtoconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProtoconfigsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProtoconfigs(ctx, params)
	return err
}

// GetSwaggerJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwaggerJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwaggerJson(ctx)
	return err
}

// GetVaultperiods converts echo context to params.
func (w *ServerInterfaceWrapper) GetVaultperiods(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVaultperiodsParams
	// ------------- Required query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, true, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "vaultPeriod" -------------

	err = runtime.BindQueryParameter("form", true, false, "vaultPeriod", ctx.QueryParams(), &params.VaultPeriod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vaultPeriod: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVaultperiods(ctx, params)
	return err
}

// GetVaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetVaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVaultsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// ------------- Optional query parameter "protoConfig" -------------

	err = runtime.BindQueryParameter("form", true, false, "protoConfig", ctx.QueryParams(), &params.ProtoConfig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protoConfig: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVaults(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Get)
	router.POST(baseURL+"/mint", wrapper.PostMint)
	router.GET(baseURL+"/protoconfigs", wrapper.GetProtoconfigs)
	router.GET(baseURL+"/swagger.json", wrapper.GetSwaggerJson)
	router.GET(baseURL+"/vaultperiods", wrapper.GetVaultperiods)
	router.GET(baseURL+"/vaults", wrapper.GetVaults)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"uvg3AAD//+q4gRROGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
