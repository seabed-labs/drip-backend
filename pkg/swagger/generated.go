// Package Swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package Swagger

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ErrorResponse defines model for errorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// ExpandedAdminVault defines model for expandedAdminVault.
type ExpandedAdminVault struct {
	// Embedded struct due to allOf(#/components/schemas/vault)
	Vault `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ProtoConfigValue           *ProtoConfig         `json:"protoConfigValue,omitempty"`
	TokenAAccountValue         *TokenAccountBalance `json:"tokenAAccountValue,omitempty"`
	TokenAMintValue            *Token               `json:"tokenAMintValue,omitempty"`
	TokenBAccountValue         *TokenAccountBalance `json:"tokenBAccountValue,omitempty"`
	TokenBMintValue            *Token               `json:"tokenBMintValue,omitempty"`
	TreasuryTokenBAccountValue *TokenAccountBalance `json:"treasuryTokenBAccountValue,omitempty"`
}

// ListExpandedAdminVaults defines model for listExpandedAdminVaults.
type ListExpandedAdminVaults []ExpandedAdminVault

// ListPositions defines model for listPositions.
type ListPositions []Position

// ListProtoConfigs defines model for listProtoConfigs.
type ListProtoConfigs []ProtoConfig

// ListSwapConfigs defines model for listSwapConfigs.
type ListSwapConfigs []SwapConfig

// ListTokenPairs defines model for listTokenPairs.
type ListTokenPairs []TokenPair

// ListTokenSwaps defines model for listTokenSwaps.
type ListTokenSwaps []TokenSwap

// ListTokens defines model for listTokens.
type ListTokens []Token

// ListVaultPeriods defines model for listVaultPeriods.
type ListVaultPeriods []VaultPeriod

// ListVaults defines model for listVaults.
type ListVaults []Vault

// MintRequest defines model for mintRequest.
type MintRequest struct {
	Amount string `json:"amount"`
	Mint   string `json:"mint"`
	Wallet string `json:"wallet"`
}

// MintResponse defines model for mintResponse.
type MintResponse struct {
	TxHash string `json:"txHash"`
}

// PingResponse defines model for pingResponse.
type PingResponse struct {
	Message string `json:"message"`
}

// Position defines model for position.
type Position struct {
	Authority                string `json:"authority"`
	DcaPeriodIdBeforeDeposit int    `json:"dcaPeriodIdBeforeDeposit"`
	DepositTimestamp         string `json:"depositTimestamp"`
	DepositedTokenAAmount    int    `json:"depositedTokenAAmount"`
	IsClosed                 bool   `json:"isClosed"`
	NumberOfSwaps            int    `json:"numberOfSwaps"`
	PeriodicDripAmount       int    `json:"periodicDripAmount"`
	Pubkey                   string `json:"pubkey"`
	Vault                    string `json:"vault"`
	WithdrawnTokenBAmount    int    `json:"withdrawnTokenBAmount"`
}

// ProtoConfig defines model for protoConfig.
type ProtoConfig struct {
	BaseWithdrawalSpread int    `json:"baseWithdrawalSpread"`
	Granularity          string `json:"granularity"`
	Pubkey               string `json:"pubkey"`
	TriggerDcaSpread     int    `json:"triggerDcaSpread"`
}

// SwapConfig defines model for swapConfig.
type SwapConfig struct {
	Swap               string `json:"swap"`
	SwapAuthority      string `json:"swapAuthority"`
	SwapFeeAccount     string `json:"swapFeeAccount"`
	SwapTokenAAccount  string `json:"swapTokenAAccount"`
	SwapTokenBAccount  string `json:"swapTokenBAccount"`
	SwapTokenMint      string `json:"swapTokenMint"`
	TokenAMint         string `json:"tokenAMint"`
	TokenBMint         string `json:"tokenBMint"`
	Vault              string `json:"vault"`
	VaultProtoConfig   string `json:"vaultProtoConfig"`
	VaultTokenAAccount string `json:"vaultTokenAAccount"`
	VaultTokenBAccount string `json:"vaultTokenBAccount"`
}

// Token defines model for token.
type Token struct {
	Decimals int     `json:"decimals"`
	Pubkey   string  `json:"pubkey"`
	Symbol   *string `json:"symbol,omitempty"`
}

// TokenAccountBalance defines model for tokenAccountBalance.
type TokenAccountBalance struct {
	Amount string `json:"amount"`
	Mint   string `json:"mint"`
	Owner  string `json:"owner"`
	Pubkey string `json:"pubkey"`
	State  string `json:"state"`
}

// TokenPair defines model for tokenPair.
type TokenPair struct {
	Id     string `json:"id"`
	TokenA string `json:"tokenA"`
	TokenB string `json:"tokenB"`
}

// TokenSwap defines model for tokenSwap.
type TokenSwap struct {
	Authority  string `json:"authority"`
	FeeAccount string `json:"feeAccount"`
	Mint       string `json:"mint"`

	// token pair reference identifier
	Pair          string `json:"pair"`
	Pubkey        string `json:"pubkey"`
	TokenAAccount string `json:"tokenAAccount"`
	TokenBAccount string `json:"tokenBAccount"`
}

// Vault defines model for vault.
type Vault struct {
	// unix timestamp
	DcaActivationTimestamp string `json:"dcaActivationTimestamp"`
	DripAmount             string `json:"dripAmount"`
	Enabled                bool   `json:"enabled"`
	LastDcaPeriod          string `json:"lastDcaPeriod"`
	ProtoConfig            string `json:"protoConfig"`
	Pubkey                 string `json:"pubkey"`
	TokenAAccount          string `json:"tokenAAccount"`
	TokenAMint             string `json:"tokenAMint"`
	TokenBAccount          string `json:"tokenBAccount"`
	TokenBMint             string `json:"tokenBMint"`
	TreasuryTokenBAccount  string `json:"treasuryTokenBAccount"`
}

// VaultPeriod defines model for vaultPeriod.
type VaultPeriod struct {
	Dar      string `json:"dar"`
	PeriodId string `json:"periodId"`
	Pubkey   string `json:"pubkey"`
	Twap     string `json:"twap"`
	Vault    string `json:"vault"`
}

// EnabledQueryParam defines model for enabledQueryParam.
type EnabledQueryParam bool

// ExpandAdminVaultsQueryParam defines model for expandAdminVaultsQueryParam.
type ExpandAdminVaultsQueryParam []string

// GoogleTokenIdHeaderParam defines model for googleTokenIdHeaderParam.
type GoogleTokenIdHeaderParam string

// LimitQueryParam defines model for limitQueryParam.
type LimitQueryParam int

// OffsetQueryParam defines model for offsetQueryParam.
type OffsetQueryParam int

// ProtoConfigQueryParam defines model for protoConfigQueryParam.
type ProtoConfigQueryParam string

// PubkeyPathParam defines model for pubkeyPathParam.
type PubkeyPathParam string

// RequiredVaultQueryParam defines model for requiredVaultQueryParam.
type RequiredVaultQueryParam string

// RequiredWalletQueryParam defines model for requiredWalletQueryParam.
type RequiredWalletQueryParam string

// TokenAQueryParam defines model for tokenAQueryParam.
type TokenAQueryParam string

// TokenBQueryParam defines model for tokenBQueryParam.
type TokenBQueryParam string

// Token pair identifier.
type TokenPairQueryParam string

// VaultPeriodQueryParam defines model for vaultPeriodQueryParam.
type VaultPeriodQueryParam string

// VaultQueryParam defines model for vaultQueryParam.
type VaultQueryParam string

// PutAdminVaultPubkeyPathEnableParams defines parameters for PutAdminVaultPubkeyPathEnable.
type PutAdminVaultPubkeyPathEnableParams struct {
	TokenId GoogleTokenIdHeaderParam `json:"token-id"`
}

// GetAdminVaultsParams defines parameters for GetAdminVaults.
type GetAdminVaultsParams struct {
	Expand  *ExpandAdminVaultsQueryParam `json:"expand,omitempty"`
	Enabled *EnabledQueryParam           `json:"enabled,omitempty"`
	Offset  *OffsetQueryParam            `json:"offset,omitempty"`
	Limit   *LimitQueryParam             `json:"limit,omitempty"`
	TokenId GoogleTokenIdHeaderParam     `json:"token-id"`
}

// GetAdminVaultsParamsExpand defines parameters for GetAdminVaults.
type GetAdminVaultsParamsExpand string

// PostMintJSONBody defines parameters for PostMint.
type PostMintJSONBody MintRequest

// GetPositionsParams defines parameters for GetPositions.
type GetPositionsParams struct {
	Wallet RequiredWalletQueryParam `json:"Wallet"`
}

// GetProtoconfigsParams defines parameters for GetProtoconfigs.
type GetProtoconfigsParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`
}

// GetSwapConfigsParams defines parameters for GetSwapConfigs.
type GetSwapConfigsParams struct {
	Vault *VaultQueryParam `json:"vault,omitempty"`
}

// GetSwapsParams defines parameters for GetSwaps.
type GetSwapsParams struct {
	TokenPair *TokenPairQueryParam `json:"tokenPair,omitempty"`
}

// GetTokenpairsParams defines parameters for GetTokenpairs.
type GetTokenpairsParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`
}

// GetTokensParams defines parameters for GetTokens.
type GetTokensParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`
}

// GetVaultperiodsParams defines parameters for GetVaultperiods.
type GetVaultperiodsParams struct {
	Vault       RequiredVaultQueryParam `json:"vault"`
	VaultPeriod *VaultPeriodQueryParam  `json:"vaultPeriod,omitempty"`
	Offset      *OffsetQueryParam       `json:"offset,omitempty"`
	Limit       *LimitQueryParam        `json:"limit,omitempty"`
}

// GetVaultsParams defines parameters for GetVaults.
type GetVaultsParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`

	// Vault proto config public key.
	ProtoConfig *ProtoConfigQueryParam `json:"protoConfig,omitempty"`
}

// PostMintJSONRequestBody defines body for PostMint for application/json ContentType.
type PostMintJSONRequestBody PostMintJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminVaultPubkeyPathEnable request
	PutAdminVaultPubkeyPathEnable(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutAdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminVaults request
	GetAdminVaults(ctx context.Context, params *GetAdminVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMint request with any body
	PostMintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMint(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPositions request
	GetPositions(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProtoconfigs request
	GetProtoconfigs(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwaggerJson request
	GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwapConfigs request
	GetSwapConfigs(ctx context.Context, params *GetSwapConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwaps request
	GetSwaps(ctx context.Context, params *GetSwapsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokenpairs request
	GetTokenpairs(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokens request
	GetTokens(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVaultperiods request
	GetVaultperiods(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVaults request
	GetVaults(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminVaultPubkeyPathEnable(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutAdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminVaultPubkeyPathEnableRequest(c.Server, pubkeyPath, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminVaults(ctx context.Context, params *GetAdminVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminVaultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMintRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMint(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMintRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPositions(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPositionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProtoconfigs(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProtoconfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwaggerJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwapConfigs(ctx context.Context, params *GetSwapConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapConfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwaps(ctx context.Context, params *GetSwapsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokenpairs(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenpairsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokens(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVaultperiods(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVaultperiodsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVaults(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVaultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminVaultPubkeyPathEnableRequest generates requests for PutAdminVaultPubkeyPathEnable
func NewPutAdminVaultPubkeyPathEnableRequest(server string, pubkeyPath PubkeyPathParam, params *PutAdminVaultPubkeyPathEnableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, pubkeyPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/vault/%s/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewGetAdminVaultsRequest generates requests for GetAdminVaults
func NewGetAdminVaultsRequest(server string, params *GetAdminVaultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/vaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewPostMintRequest calls the generic PostMint builder with application/json body
func NewPostMintRequest(server string, body PostMintJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMintRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMintRequestWithBody generates requests for PostMint with any type of body
func NewPostMintRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPositionsRequest generates requests for GetPositions
func NewGetPositionsRequest(server string, params *GetPositionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/positions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Wallet", runtime.ParamLocationQuery, params.Wallet); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProtoconfigsRequest generates requests for GetProtoconfigs
func NewGetProtoconfigsRequest(server string, params *GetProtoconfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/protoconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwaggerJsonRequest generates requests for GetSwaggerJson
func NewGetSwaggerJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swagger.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwapConfigsRequest generates requests for GetSwapConfigs
func NewGetSwapConfigsRequest(server string, params *GetSwapConfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swapConfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Vault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwapsRequest generates requests for GetSwaps
func NewGetSwapsRequest(server string, params *GetSwapsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swaps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenPair != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenPair", runtime.ParamLocationQuery, *params.TokenPair); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokenpairsRequest generates requests for GetTokenpairs
func NewGetTokenpairsRequest(server string, params *GetTokenpairsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokenpairs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokensRequest generates requests for GetTokens
func NewGetTokensRequest(server string, params *GetTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVaultperiodsRequest generates requests for GetVaultperiods
func NewGetVaultperiodsRequest(server string, params *GetVaultperiodsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vaultperiods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, params.Vault); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.VaultPeriod != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vaultPeriod", runtime.ParamLocationQuery, *params.VaultPeriod); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVaultsRequest generates requests for GetVaults
func NewGetVaultsRequest(server string, params *GetVaultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProtoConfig != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protoConfig", runtime.ParamLocationQuery, *params.ProtoConfig); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Get request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// PutAdminVaultPubkeyPathEnable request
	PutAdminVaultPubkeyPathEnableWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutAdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*PutAdminVaultPubkeyPathEnableResponse, error)

	// GetAdminVaults request
	GetAdminVaultsWithResponse(ctx context.Context, params *GetAdminVaultsParams, reqEditors ...RequestEditorFn) (*GetAdminVaultsResponse, error)

	// PostMint request with any body
	PostMintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMintResponse, error)

	PostMintWithResponse(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMintResponse, error)

	// GetPositions request
	GetPositionsWithResponse(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*GetPositionsResponse, error)

	// GetProtoconfigs request
	GetProtoconfigsWithResponse(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*GetProtoconfigsResponse, error)

	// GetSwaggerJson request
	GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error)

	// GetSwapConfigs request
	GetSwapConfigsWithResponse(ctx context.Context, params *GetSwapConfigsParams, reqEditors ...RequestEditorFn) (*GetSwapConfigsResponse, error)

	// GetSwaps request
	GetSwapsWithResponse(ctx context.Context, params *GetSwapsParams, reqEditors ...RequestEditorFn) (*GetSwapsResponse, error)

	// GetTokenpairs request
	GetTokenpairsWithResponse(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*GetTokenpairsResponse, error)

	// GetTokens request
	GetTokensWithResponse(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*GetTokensResponse, error)

	// GetVaultperiods request
	GetVaultperiodsWithResponse(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*GetVaultperiodsResponse, error)

	// GetVaults request
	GetVaultsWithResponse(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*GetVaultsResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingResponse
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminVaultPubkeyPathEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Vault
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutAdminVaultPubkeyPathEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminVaultPubkeyPathEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminVaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListExpandedAdminVaults
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAdminVaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminVaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MintResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostMintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPositions
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProtoconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListProtoConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProtoconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProtoconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwaggerJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSwaggerJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwaggerJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSwapConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTokenSwaps
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenpairsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTokenPairs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTokenpairsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenpairsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTokens
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVaultperiodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListVaultPeriods
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVaultperiodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVaultperiodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListVaults
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// PutAdminVaultPubkeyPathEnableWithResponse request returning *PutAdminVaultPubkeyPathEnableResponse
func (c *ClientWithResponses) PutAdminVaultPubkeyPathEnableWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutAdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*PutAdminVaultPubkeyPathEnableResponse, error) {
	rsp, err := c.PutAdminVaultPubkeyPathEnable(ctx, pubkeyPath, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminVaultPubkeyPathEnableResponse(rsp)
}

// GetAdminVaultsWithResponse request returning *GetAdminVaultsResponse
func (c *ClientWithResponses) GetAdminVaultsWithResponse(ctx context.Context, params *GetAdminVaultsParams, reqEditors ...RequestEditorFn) (*GetAdminVaultsResponse, error) {
	rsp, err := c.GetAdminVaults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminVaultsResponse(rsp)
}

// PostMintWithBodyWithResponse request with arbitrary body returning *PostMintResponse
func (c *ClientWithResponses) PostMintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMintResponse, error) {
	rsp, err := c.PostMintWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMintResponse(rsp)
}

func (c *ClientWithResponses) PostMintWithResponse(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMintResponse, error) {
	rsp, err := c.PostMint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMintResponse(rsp)
}

// GetPositionsWithResponse request returning *GetPositionsResponse
func (c *ClientWithResponses) GetPositionsWithResponse(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*GetPositionsResponse, error) {
	rsp, err := c.GetPositions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPositionsResponse(rsp)
}

// GetProtoconfigsWithResponse request returning *GetProtoconfigsResponse
func (c *ClientWithResponses) GetProtoconfigsWithResponse(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*GetProtoconfigsResponse, error) {
	rsp, err := c.GetProtoconfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProtoconfigsResponse(rsp)
}

// GetSwaggerJsonWithResponse request returning *GetSwaggerJsonResponse
func (c *ClientWithResponses) GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error) {
	rsp, err := c.GetSwaggerJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwaggerJsonResponse(rsp)
}

// GetSwapConfigsWithResponse request returning *GetSwapConfigsResponse
func (c *ClientWithResponses) GetSwapConfigsWithResponse(ctx context.Context, params *GetSwapConfigsParams, reqEditors ...RequestEditorFn) (*GetSwapConfigsResponse, error) {
	rsp, err := c.GetSwapConfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapConfigsResponse(rsp)
}

// GetSwapsWithResponse request returning *GetSwapsResponse
func (c *ClientWithResponses) GetSwapsWithResponse(ctx context.Context, params *GetSwapsParams, reqEditors ...RequestEditorFn) (*GetSwapsResponse, error) {
	rsp, err := c.GetSwaps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapsResponse(rsp)
}

// GetTokenpairsWithResponse request returning *GetTokenpairsResponse
func (c *ClientWithResponses) GetTokenpairsWithResponse(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*GetTokenpairsResponse, error) {
	rsp, err := c.GetTokenpairs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenpairsResponse(rsp)
}

// GetTokensWithResponse request returning *GetTokensResponse
func (c *ClientWithResponses) GetTokensWithResponse(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*GetTokensResponse, error) {
	rsp, err := c.GetTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokensResponse(rsp)
}

// GetVaultperiodsWithResponse request returning *GetVaultperiodsResponse
func (c *ClientWithResponses) GetVaultperiodsWithResponse(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*GetVaultperiodsResponse, error) {
	rsp, err := c.GetVaultperiods(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVaultperiodsResponse(rsp)
}

// GetVaultsWithResponse request returning *GetVaultsResponse
func (c *ClientWithResponses) GetVaultsWithResponse(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*GetVaultsResponse, error) {
	rsp, err := c.GetVaults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVaultsResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminVaultPubkeyPathEnableResponse parses an HTTP response from a PutAdminVaultPubkeyPathEnableWithResponse call
func ParsePutAdminVaultPubkeyPathEnableResponse(rsp *http.Response) (*PutAdminVaultPubkeyPathEnableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminVaultPubkeyPathEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Vault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAdminVaultsResponse parses an HTTP response from a GetAdminVaultsWithResponse call
func ParseGetAdminVaultsResponse(rsp *http.Response) (*GetAdminVaultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminVaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListExpandedAdminVaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostMintResponse parses an HTTP response from a PostMintWithResponse call
func ParsePostMintResponse(rsp *http.Response) (*PostMintResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MintResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPositionsResponse parses an HTTP response from a GetPositionsWithResponse call
func ParseGetPositionsResponse(rsp *http.Response) (*GetPositionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPositions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProtoconfigsResponse parses an HTTP response from a GetProtoconfigsWithResponse call
func ParseGetProtoconfigsResponse(rsp *http.Response) (*GetProtoconfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProtoconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListProtoConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSwaggerJsonResponse parses an HTTP response from a GetSwaggerJsonWithResponse call
func ParseGetSwaggerJsonResponse(rsp *http.Response) (*GetSwaggerJsonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwaggerJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSwapConfigsResponse parses an HTTP response from a GetSwapConfigsWithResponse call
func ParseGetSwapConfigsResponse(rsp *http.Response) (*GetSwapConfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSwapConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSwapsResponse parses an HTTP response from a GetSwapsWithResponse call
func ParseGetSwapsResponse(rsp *http.Response) (*GetSwapsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTokenSwaps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTokenpairsResponse parses an HTTP response from a GetTokenpairsWithResponse call
func ParseGetTokenpairsResponse(rsp *http.Response) (*GetTokenpairsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenpairsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTokenPairs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTokensResponse parses an HTTP response from a GetTokensWithResponse call
func ParseGetTokensResponse(rsp *http.Response) (*GetTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTokens
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetVaultperiodsResponse parses an HTTP response from a GetVaultperiodsWithResponse call
func ParseGetVaultperiodsResponse(rsp *http.Response) (*GetVaultperiodsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVaultperiodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListVaultPeriods
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetVaultsResponse parses an HTTP response from a GetVaultsWithResponse call
func ParseGetVaultsResponse(rsp *http.Response) (*GetVaultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListVaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health Check
	// (GET /)
	Get(ctx echo.Context) error
	// Enable a vault
	// (PUT /admin/vault/{pubkeyPath}/enable)
	PutAdminVaultPubkeyPathEnable(ctx echo.Context, pubkeyPath PubkeyPathParam, params PutAdminVaultPubkeyPathEnableParams) error
	// Get All Vaults
	// (GET /admin/vaults)
	GetAdminVaults(ctx echo.Context, params GetAdminVaultsParams) error
	// Mint tokens (DEVNET ONLY)
	// (POST /mint)
	PostMint(ctx echo.Context) error
	// Get User Positions
	// (GET /positions)
	GetPositions(ctx echo.Context, params GetPositionsParams) error
	// Get Proto Configs
	// (GET /protoconfigs)
	GetProtoconfigs(ctx echo.Context, params GetProtoconfigsParams) error
	// Swagger spec
	// (GET /swagger.json)
	GetSwaggerJson(ctx echo.Context) error
	// Get Token Swaps Configs
	// (GET /swapConfigs)
	GetSwapConfigs(ctx echo.Context, params GetSwapConfigsParams) error
	// Get Token Swaps
	// (GET /swaps)
	GetSwaps(ctx echo.Context, params GetSwapsParams) error
	// Get Token Pairs
	// (GET /tokenpairs)
	GetTokenpairs(ctx echo.Context, params GetTokenpairsParams) error
	// Get Tokens
	// (GET /tokens)
	GetTokens(ctx echo.Context, params GetTokensParams) error
	// Get Vault Periods
	// (GET /vaultperiods)
	GetVaultperiods(ctx echo.Context, params GetVaultperiodsParams) error
	// Get Supported Vaults
	// (GET /vaults)
	GetVaults(ctx echo.Context, params GetVaultsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx)
	return err
}

// PutAdminVaultPubkeyPathEnable converts echo context to params.
func (w *ServerInterfaceWrapper) PutAdminVaultPubkeyPathEnable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutAdminVaultPubkeyPathEnableParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAdminVaultPubkeyPathEnable(ctx, pubkeyPath, params)
	return err
}

// GetAdminVaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdminVaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAdminVaultsParams
	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdminVaults(ctx, params)
	return err
}

// PostMint converts echo context to params.
func (w *ServerInterfaceWrapper) PostMint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMint(ctx)
	return err
}

// GetPositions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPositions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPositionsParams
	// ------------- Required query parameter "Wallet" -------------

	err = runtime.BindQueryParameter("form", true, true, "Wallet", ctx.QueryParams(), &params.Wallet)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Wallet: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPositions(ctx, params)
	return err
}

// GetProtoconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetProtoconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProtoconfigsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProtoconfigs(ctx, params)
	return err
}

// GetSwaggerJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwaggerJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwaggerJson(ctx)
	return err
}

// GetSwapConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwapConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSwapConfigsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwapConfigs(ctx, params)
	return err
}

// GetSwaps converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwaps(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSwapsParams
	// ------------- Optional query parameter "tokenPair" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenPair", ctx.QueryParams(), &params.TokenPair)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenPair: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwaps(ctx, params)
	return err
}

// GetTokenpairs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTokenpairs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTokenpairsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTokenpairs(ctx, params)
	return err
}

// GetTokens converts echo context to params.
func (w *ServerInterfaceWrapper) GetTokens(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTokensParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTokens(ctx, params)
	return err
}

// GetVaultperiods converts echo context to params.
func (w *ServerInterfaceWrapper) GetVaultperiods(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVaultperiodsParams
	// ------------- Required query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, true, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "vaultPeriod" -------------

	err = runtime.BindQueryParameter("form", true, false, "vaultPeriod", ctx.QueryParams(), &params.VaultPeriod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vaultPeriod: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVaultperiods(ctx, params)
	return err
}

// GetVaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetVaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVaultsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// ------------- Optional query parameter "protoConfig" -------------

	err = runtime.BindQueryParameter("form", true, false, "protoConfig", ctx.QueryParams(), &params.ProtoConfig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protoConfig: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVaults(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Get)
	router.PUT(baseURL+"/admin/vault/:pubkeyPath/enable", wrapper.PutAdminVaultPubkeyPathEnable)
	router.GET(baseURL+"/admin/vaults", wrapper.GetAdminVaults)
	router.POST(baseURL+"/mint", wrapper.PostMint)
	router.GET(baseURL+"/positions", wrapper.GetPositions)
	router.GET(baseURL+"/protoconfigs", wrapper.GetProtoconfigs)
	router.GET(baseURL+"/swagger.json", wrapper.GetSwaggerJson)
	router.GET(baseURL+"/swapConfigs", wrapper.GetSwapConfigs)
	router.GET(baseURL+"/swaps", wrapper.GetSwaps)
	router.GET(baseURL+"/tokenpairs", wrapper.GetTokenpairs)
	router.GET(baseURL+"/tokens", wrapper.GetTokens)
	router.GET(baseURL+"/vaultperiods", wrapper.GetVaultperiods)
	router.GET(baseURL+"/vaults", wrapper.GetVaults)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wUAAP//6w+Eg+dCAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
