// Package Swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package Swagger

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// DripCommon defines model for dripCommon.
type DripCommon struct {
	TokenAMint         string `json:"tokenAMint"`
	TokenBMint         string `json:"tokenBMint"`
	Vault              string `json:"vault"`
	VaultProtoConfig   string `json:"vaultProtoConfig"`
	VaultTokenAAccount string `json:"vaultTokenAAccount"`
	VaultTokenBAccount string `json:"vaultTokenBAccount"`
}

// ErrorResponse defines model for errorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// ExpandedAdminVault defines model for expandedAdminVault.
type ExpandedAdminVault struct {
	// Embedded struct due to allOf(#/components/schemas/vault)
	Vault `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ProtoConfigValue           *ProtoConfig         `json:"protoConfigValue,omitempty"`
	TokenAAccountValue         *TokenAccountBalance `json:"tokenAAccountValue,omitempty"`
	TokenAMintValue            *Token               `json:"tokenAMintValue,omitempty"`
	TokenBAccountValue         *TokenAccountBalance `json:"tokenBAccountValue,omitempty"`
	TokenBMintValue            *Token               `json:"tokenBMintValue,omitempty"`
	TreasuryTokenBAccountValue *TokenAccountBalance `json:"treasuryTokenBAccountValue,omitempty"`
}

// ListExpandedAdminVaults defines model for listExpandedAdminVaults.
type ListExpandedAdminVaults []ExpandedAdminVault

// ListOrcaWhirlpoolConfigs defines model for listOrcaWhirlpoolConfigs.
type ListOrcaWhirlpoolConfigs []OrcaWhirlpoolConfig

// ListPositions defines model for listPositions.
type ListPositions []Position

// ListProtoConfigs defines model for listProtoConfigs.
type ListProtoConfigs []ProtoConfig

// ListSplTokenSwapConfigs defines model for listSplTokenSwapConfigs.
type ListSplTokenSwapConfigs []SplTokenSwapConfig

// ListTokenPairs defines model for listTokenPairs.
type ListTokenPairs []TokenPair

// ListTokenSwaps defines model for listTokenSwaps.
type ListTokenSwaps []TokenSwap

// ListTokens defines model for listTokens.
type ListTokens []Token

// ListVaultPeriods defines model for listVaultPeriods.
type ListVaultPeriods []VaultPeriod

// ListVaults defines model for listVaults.
type ListVaults []Vault

// MintRequest defines model for mintRequest.
type MintRequest struct {
	Amount string `json:"amount"`
	Mint   string `json:"mint"`
	Wallet string `json:"wallet"`
}

// MintResponse defines model for mintResponse.
type MintResponse struct {
	TxHash string `json:"txHash"`
}

// OrcaWhirlpoolConfig defines model for orcaWhirlpoolConfig.
type OrcaWhirlpoolConfig struct {
	// Embedded struct due to allOf(#/components/schemas/dripCommon)
	DripCommon `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Oracle      string `json:"oracle"`
	TokenVaultA string `json:"tokenVaultA"`
	TokenVaultB string `json:"tokenVaultB"`
	Whirlpool   string `json:"whirlpool"`
}

// PingResponse defines model for pingResponse.
type PingResponse struct {
	Message string `json:"message"`
}

// Position defines model for position.
type Position struct {
	Authority                string `json:"authority"`
	DcaPeriodIdBeforeDeposit int    `json:"dcaPeriodIdBeforeDeposit"`
	DepositTimestamp         string `json:"depositTimestamp"`
	DepositedTokenAAmount    int    `json:"depositedTokenAAmount"`
	IsClosed                 bool   `json:"isClosed"`
	NumberOfSwaps            int    `json:"numberOfSwaps"`
	PeriodicDripAmount       int    `json:"periodicDripAmount"`
	Pubkey                   string `json:"pubkey"`
	Vault                    string `json:"vault"`
	WithdrawnTokenBAmount    int    `json:"withdrawnTokenBAmount"`
}

// PositionMetadata defines model for positionMetadata.
type PositionMetadata struct {
	Collection struct {
		Family string `json:"family"`
		Name   string `json:"name"`
	} `json:"collection"`
	Description string `json:"description"`
	ExternalUrl string `json:"external_url"`
	Image       string `json:"image"`
	Name        string `json:"name"`
	Symbol      string `json:"symbol"`
}

// ProtoConfig defines model for protoConfig.
type ProtoConfig struct {
	BaseWithdrawalSpread int    `json:"baseWithdrawalSpread"`
	Granularity          string `json:"granularity"`
	Pubkey               string `json:"pubkey"`
	TriggerDcaSpread     int    `json:"triggerDcaSpread"`
}

// SplTokenSwapConfig defines model for splTokenSwapConfig.
type SplTokenSwapConfig struct {
	// Embedded struct due to allOf(#/components/schemas/dripCommon)
	DripCommon `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Swap              string `json:"swap"`
	SwapAuthority     string `json:"swapAuthority"`
	SwapFeeAccount    string `json:"swapFeeAccount"`
	SwapTokenAAccount string `json:"swapTokenAAccount"`
	SwapTokenBAccount string `json:"swapTokenBAccount"`
	SwapTokenMint     string `json:"swapTokenMint"`
}

// Token defines model for token.
type Token struct {
	Decimals int     `json:"decimals"`
	Pubkey   string  `json:"pubkey"`
	Symbol   *string `json:"symbol,omitempty"`
}

// TokenAccountBalance defines model for tokenAccountBalance.
type TokenAccountBalance struct {
	Amount string `json:"amount"`
	Mint   string `json:"mint"`
	Owner  string `json:"owner"`
	Pubkey string `json:"pubkey"`
	State  string `json:"state"`
}

// TokenPair defines model for tokenPair.
type TokenPair struct {
	Id     string `json:"id"`
	TokenA string `json:"tokenA"`
	TokenB string `json:"tokenB"`
}

// TokenSwap defines model for tokenSwap.
type TokenSwap struct {
	Authority  string `json:"authority"`
	FeeAccount string `json:"feeAccount"`
	Mint       string `json:"mint"`

	// token pair reference identifier
	Pair          string `json:"pair"`
	Pubkey        string `json:"pubkey"`
	TokenAAccount string `json:"tokenAAccount"`
	TokenBAccount string `json:"tokenBAccount"`
}

// Vault defines model for vault.
type Vault struct {
	// unix timestamp
	DcaActivationTimestamp string `json:"dcaActivationTimestamp"`
	DripAmount             string `json:"dripAmount"`
	Enabled                bool   `json:"enabled"`
	LastDcaPeriod          string `json:"lastDcaPeriod"`
	ProtoConfig            string `json:"protoConfig"`
	Pubkey                 string `json:"pubkey"`
	TokenAAccount          string `json:"tokenAAccount"`
	TokenAMint             string `json:"tokenAMint"`
	TokenBAccount          string `json:"tokenBAccount"`
	TokenBMint             string `json:"tokenBMint"`
	TreasuryTokenBAccount  string `json:"treasuryTokenBAccount"`
}

// VaultPeriod defines model for vaultPeriod.
type VaultPeriod struct {
	Dar      string `json:"dar"`
	PeriodId string `json:"periodId"`
	Pubkey   string `json:"pubkey"`
	Twap     string `json:"twap"`
	Vault    string `json:"vault"`
}

// EnabledQueryParam defines model for enabledQueryParam.
type EnabledQueryParam bool

// ExpandAdminVaultsQueryParam defines model for expandAdminVaultsQueryParam.
type ExpandAdminVaultsQueryParam []string

// GoogleTokenIdHeaderParam defines model for googleTokenIdHeaderParam.
type GoogleTokenIdHeaderParam string

// LimitQueryParam defines model for limitQueryParam.
type LimitQueryParam int

// OffsetQueryParam defines model for offsetQueryParam.
type OffsetQueryParam int

// ProtoConfigQueryParam defines model for protoConfigQueryParam.
type ProtoConfigQueryParam string

// PubkeyPathParam defines model for pubkeyPathParam.
type PubkeyPathParam string

// RequiredVaultQueryParam defines model for requiredVaultQueryParam.
type RequiredVaultQueryParam string

// RequiredWalletQueryParam defines model for requiredWalletQueryParam.
type RequiredWalletQueryParam string

// TokenAQueryParam defines model for tokenAQueryParam.
type TokenAQueryParam string

// TokenBQueryParam defines model for tokenBQueryParam.
type TokenBQueryParam string

// Token pair identifier.
type TokenPairQueryParam string

// VaultPeriodQueryParam defines model for vaultPeriodQueryParam.
type VaultPeriodQueryParam string

// VaultQueryParam defines model for vaultQueryParam.
type VaultQueryParam string

// PutAdminVaultPubkeyPathEnableParams defines parameters for PutAdminVaultPubkeyPathEnable.
type PutAdminVaultPubkeyPathEnableParams struct {
	TokenId GoogleTokenIdHeaderParam `json:"token-id"`
}

// GetAdminVaultsParams defines parameters for GetAdminVaults.
type GetAdminVaultsParams struct {
	Expand  *ExpandAdminVaultsQueryParam `json:"expand,omitempty"`
	Enabled *EnabledQueryParam           `json:"enabled,omitempty"`
	Offset  *OffsetQueryParam            `json:"offset,omitempty"`
	Limit   *LimitQueryParam             `json:"limit,omitempty"`
	TokenId GoogleTokenIdHeaderParam     `json:"token-id"`
}

// GetAdminVaultsParamsExpand defines parameters for GetAdminVaults.
type GetAdminVaultsParamsExpand string

// PostMintJSONBody defines parameters for PostMint.
type PostMintJSONBody MintRequest

// GetOrcawhirlpoolconfigsParams defines parameters for GetOrcawhirlpoolconfigs.
type GetOrcawhirlpoolconfigsParams struct {
	Vault *VaultQueryParam `json:"vault,omitempty"`
}

// GetPositionsParams defines parameters for GetPositions.
type GetPositionsParams struct {
	Wallet RequiredWalletQueryParam `json:"Wallet"`
}

// GetProtoconfigsParams defines parameters for GetProtoconfigs.
type GetProtoconfigsParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`
}

// GetSpltokenswapconfigsParams defines parameters for GetSpltokenswapconfigs.
type GetSpltokenswapconfigsParams struct {
	Vault *VaultQueryParam `json:"vault,omitempty"`
}

// GetSwapsParams defines parameters for GetSwaps.
type GetSwapsParams struct {
	TokenPair *TokenPairQueryParam `json:"tokenPair,omitempty"`
}

// GetTokenpairsParams defines parameters for GetTokenpairs.
type GetTokenpairsParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`
}

// GetTokensParams defines parameters for GetTokens.
type GetTokensParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`
}

// GetVaultperiodsParams defines parameters for GetVaultperiods.
type GetVaultperiodsParams struct {
	Vault       RequiredVaultQueryParam `json:"vault"`
	VaultPeriod *VaultPeriodQueryParam  `json:"vaultPeriod,omitempty"`
	Offset      *OffsetQueryParam       `json:"offset,omitempty"`
	Limit       *LimitQueryParam        `json:"limit,omitempty"`
}

// GetVaultsParams defines parameters for GetVaults.
type GetVaultsParams struct {
	TokenA *TokenAQueryParam `json:"tokenA,omitempty"`
	TokenB *TokenBQueryParam `json:"tokenB,omitempty"`

	// Vault proto config public key.
	ProtoConfig *ProtoConfigQueryParam `json:"protoConfig,omitempty"`
}

// PostMintJSONRequestBody defines body for PostMint for application/json ContentType.
type PostMintJSONRequestBody PostMintJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminVaultPubkeyPathEnable request
	PutAdminVaultPubkeyPathEnable(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutAdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminVaults request
	GetAdminVaults(ctx context.Context, params *GetAdminVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMint request with any body
	PostMintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMint(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrcawhirlpoolconfigs request
	GetOrcawhirlpoolconfigs(ctx context.Context, params *GetOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPositions request
	GetPositions(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProtoconfigs request
	GetProtoconfigs(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpltokenswapconfigs request
	GetSpltokenswapconfigs(ctx context.Context, params *GetSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwaggerJson request
	GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwaps request
	GetSwaps(ctx context.Context, params *GetSwapsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokenpairs request
	GetTokenpairs(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokens request
	GetTokens(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DripPositionmetadata request
	GetV1DripPositionmetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVaultperiods request
	GetVaultperiods(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVaults request
	GetVaults(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminVaultPubkeyPathEnable(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutAdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminVaultPubkeyPathEnableRequest(c.Server, pubkeyPath, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminVaults(ctx context.Context, params *GetAdminVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminVaultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMintRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMint(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMintRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrcawhirlpoolconfigs(ctx context.Context, params *GetOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrcawhirlpoolconfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPositions(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPositionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProtoconfigs(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProtoconfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpltokenswapconfigs(ctx context.Context, params *GetSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpltokenswapconfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwaggerJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwaggerJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwaps(ctx context.Context, params *GetSwapsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwapsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokenpairs(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenpairsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokens(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DripPositionmetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DripPositionmetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVaultperiods(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVaultperiodsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVaults(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVaultsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminVaultPubkeyPathEnableRequest generates requests for PutAdminVaultPubkeyPathEnable
func NewPutAdminVaultPubkeyPathEnableRequest(server string, pubkeyPath PubkeyPathParam, params *PutAdminVaultPubkeyPathEnableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, pubkeyPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/vault/%s/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewGetAdminVaultsRequest generates requests for GetAdminVaults
func NewGetAdminVaultsRequest(server string, params *GetAdminVaultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/vaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Expand != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, params.TokenId)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token-id", headerParam0)

	return req, nil
}

// NewPostMintRequest calls the generic PostMint builder with application/json body
func NewPostMintRequest(server string, body PostMintJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMintRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMintRequestWithBody generates requests for PostMint with any type of body
func NewPostMintRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrcawhirlpoolconfigsRequest generates requests for GetOrcawhirlpoolconfigs
func NewGetOrcawhirlpoolconfigsRequest(server string, params *GetOrcawhirlpoolconfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orcawhirlpoolconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Vault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPositionsRequest generates requests for GetPositions
func NewGetPositionsRequest(server string, params *GetPositionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/positions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Wallet", runtime.ParamLocationQuery, params.Wallet); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProtoconfigsRequest generates requests for GetProtoconfigs
func NewGetProtoconfigsRequest(server string, params *GetProtoconfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/protoconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpltokenswapconfigsRequest generates requests for GetSpltokenswapconfigs
func NewGetSpltokenswapconfigsRequest(server string, params *GetSpltokenswapconfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spltokenswapconfigs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Vault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, *params.Vault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwaggerJsonRequest generates requests for GetSwaggerJson
func NewGetSwaggerJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swagger.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwapsRequest generates requests for GetSwaps
func NewGetSwapsRequest(server string, params *GetSwapsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swaps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenPair != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenPair", runtime.ParamLocationQuery, *params.TokenPair); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokenpairsRequest generates requests for GetTokenpairs
func NewGetTokenpairsRequest(server string, params *GetTokenpairsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokenpairs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokensRequest generates requests for GetTokens
func NewGetTokensRequest(server string, params *GetTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DripPositionmetadataRequest generates requests for GetV1DripPositionmetadata
func NewGetV1DripPositionmetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/drip/positionmetadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVaultperiodsRequest generates requests for GetVaultperiods
func NewGetVaultperiodsRequest(server string, params *GetVaultperiodsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vaultperiods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vault", runtime.ParamLocationQuery, params.Vault); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.VaultPeriod != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vaultPeriod", runtime.ParamLocationQuery, *params.VaultPeriod); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVaultsRequest generates requests for GetVaults
func NewGetVaultsRequest(server string, params *GetVaultsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vaults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenA != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenA", runtime.ParamLocationQuery, *params.TokenA); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TokenB != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenB", runtime.ParamLocationQuery, *params.TokenB); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProtoConfig != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protoConfig", runtime.ParamLocationQuery, *params.ProtoConfig); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Get request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// PutAdminVaultPubkeyPathEnable request
	PutAdminVaultPubkeyPathEnableWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutAdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*PutAdminVaultPubkeyPathEnableResponse, error)

	// GetAdminVaults request
	GetAdminVaultsWithResponse(ctx context.Context, params *GetAdminVaultsParams, reqEditors ...RequestEditorFn) (*GetAdminVaultsResponse, error)

	// PostMint request with any body
	PostMintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMintResponse, error)

	PostMintWithResponse(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMintResponse, error)

	// GetOrcawhirlpoolconfigs request
	GetOrcawhirlpoolconfigsWithResponse(ctx context.Context, params *GetOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*GetOrcawhirlpoolconfigsResponse, error)

	// GetPositions request
	GetPositionsWithResponse(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*GetPositionsResponse, error)

	// GetProtoconfigs request
	GetProtoconfigsWithResponse(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*GetProtoconfigsResponse, error)

	// GetSpltokenswapconfigs request
	GetSpltokenswapconfigsWithResponse(ctx context.Context, params *GetSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*GetSpltokenswapconfigsResponse, error)

	// GetSwaggerJson request
	GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error)

	// GetSwaps request
	GetSwapsWithResponse(ctx context.Context, params *GetSwapsParams, reqEditors ...RequestEditorFn) (*GetSwapsResponse, error)

	// GetTokenpairs request
	GetTokenpairsWithResponse(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*GetTokenpairsResponse, error)

	// GetTokens request
	GetTokensWithResponse(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*GetTokensResponse, error)

	// GetV1DripPositionmetadata request
	GetV1DripPositionmetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DripPositionmetadataResponse, error)

	// GetVaultperiods request
	GetVaultperiodsWithResponse(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*GetVaultperiodsResponse, error)

	// GetVaults request
	GetVaultsWithResponse(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*GetVaultsResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PingResponse
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminVaultPubkeyPathEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Vault
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutAdminVaultPubkeyPathEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminVaultPubkeyPathEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminVaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListExpandedAdminVaults
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAdminVaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminVaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MintResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostMintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrcawhirlpoolconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListOrcaWhirlpoolConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrcawhirlpoolconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrcawhirlpoolconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPositions
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProtoconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListProtoConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProtoconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProtoconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpltokenswapconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSplTokenSwapConfigs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSpltokenswapconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpltokenswapconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwaggerJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSwaggerJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwaggerJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwapsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTokenSwaps
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwapsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwapsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenpairsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTokenPairs
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTokenpairsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenpairsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTokens
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DripPositionmetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PositionMetadata
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetV1DripPositionmetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DripPositionmetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVaultperiodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListVaultPeriods
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVaultperiodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVaultperiodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVaultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListVaults
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVaultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVaultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// PutAdminVaultPubkeyPathEnableWithResponse request returning *PutAdminVaultPubkeyPathEnableResponse
func (c *ClientWithResponses) PutAdminVaultPubkeyPathEnableWithResponse(ctx context.Context, pubkeyPath PubkeyPathParam, params *PutAdminVaultPubkeyPathEnableParams, reqEditors ...RequestEditorFn) (*PutAdminVaultPubkeyPathEnableResponse, error) {
	rsp, err := c.PutAdminVaultPubkeyPathEnable(ctx, pubkeyPath, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminVaultPubkeyPathEnableResponse(rsp)
}

// GetAdminVaultsWithResponse request returning *GetAdminVaultsResponse
func (c *ClientWithResponses) GetAdminVaultsWithResponse(ctx context.Context, params *GetAdminVaultsParams, reqEditors ...RequestEditorFn) (*GetAdminVaultsResponse, error) {
	rsp, err := c.GetAdminVaults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminVaultsResponse(rsp)
}

// PostMintWithBodyWithResponse request with arbitrary body returning *PostMintResponse
func (c *ClientWithResponses) PostMintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMintResponse, error) {
	rsp, err := c.PostMintWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMintResponse(rsp)
}

func (c *ClientWithResponses) PostMintWithResponse(ctx context.Context, body PostMintJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMintResponse, error) {
	rsp, err := c.PostMint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMintResponse(rsp)
}

// GetOrcawhirlpoolconfigsWithResponse request returning *GetOrcawhirlpoolconfigsResponse
func (c *ClientWithResponses) GetOrcawhirlpoolconfigsWithResponse(ctx context.Context, params *GetOrcawhirlpoolconfigsParams, reqEditors ...RequestEditorFn) (*GetOrcawhirlpoolconfigsResponse, error) {
	rsp, err := c.GetOrcawhirlpoolconfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrcawhirlpoolconfigsResponse(rsp)
}

// GetPositionsWithResponse request returning *GetPositionsResponse
func (c *ClientWithResponses) GetPositionsWithResponse(ctx context.Context, params *GetPositionsParams, reqEditors ...RequestEditorFn) (*GetPositionsResponse, error) {
	rsp, err := c.GetPositions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPositionsResponse(rsp)
}

// GetProtoconfigsWithResponse request returning *GetProtoconfigsResponse
func (c *ClientWithResponses) GetProtoconfigsWithResponse(ctx context.Context, params *GetProtoconfigsParams, reqEditors ...RequestEditorFn) (*GetProtoconfigsResponse, error) {
	rsp, err := c.GetProtoconfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProtoconfigsResponse(rsp)
}

// GetSpltokenswapconfigsWithResponse request returning *GetSpltokenswapconfigsResponse
func (c *ClientWithResponses) GetSpltokenswapconfigsWithResponse(ctx context.Context, params *GetSpltokenswapconfigsParams, reqEditors ...RequestEditorFn) (*GetSpltokenswapconfigsResponse, error) {
	rsp, err := c.GetSpltokenswapconfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpltokenswapconfigsResponse(rsp)
}

// GetSwaggerJsonWithResponse request returning *GetSwaggerJsonResponse
func (c *ClientWithResponses) GetSwaggerJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerJsonResponse, error) {
	rsp, err := c.GetSwaggerJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwaggerJsonResponse(rsp)
}

// GetSwapsWithResponse request returning *GetSwapsResponse
func (c *ClientWithResponses) GetSwapsWithResponse(ctx context.Context, params *GetSwapsParams, reqEditors ...RequestEditorFn) (*GetSwapsResponse, error) {
	rsp, err := c.GetSwaps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwapsResponse(rsp)
}

// GetTokenpairsWithResponse request returning *GetTokenpairsResponse
func (c *ClientWithResponses) GetTokenpairsWithResponse(ctx context.Context, params *GetTokenpairsParams, reqEditors ...RequestEditorFn) (*GetTokenpairsResponse, error) {
	rsp, err := c.GetTokenpairs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenpairsResponse(rsp)
}

// GetTokensWithResponse request returning *GetTokensResponse
func (c *ClientWithResponses) GetTokensWithResponse(ctx context.Context, params *GetTokensParams, reqEditors ...RequestEditorFn) (*GetTokensResponse, error) {
	rsp, err := c.GetTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokensResponse(rsp)
}

// GetV1DripPositionmetadataWithResponse request returning *GetV1DripPositionmetadataResponse
func (c *ClientWithResponses) GetV1DripPositionmetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DripPositionmetadataResponse, error) {
	rsp, err := c.GetV1DripPositionmetadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DripPositionmetadataResponse(rsp)
}

// GetVaultperiodsWithResponse request returning *GetVaultperiodsResponse
func (c *ClientWithResponses) GetVaultperiodsWithResponse(ctx context.Context, params *GetVaultperiodsParams, reqEditors ...RequestEditorFn) (*GetVaultperiodsResponse, error) {
	rsp, err := c.GetVaultperiods(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVaultperiodsResponse(rsp)
}

// GetVaultsWithResponse request returning *GetVaultsResponse
func (c *ClientWithResponses) GetVaultsWithResponse(ctx context.Context, params *GetVaultsParams, reqEditors ...RequestEditorFn) (*GetVaultsResponse, error) {
	rsp, err := c.GetVaults(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVaultsResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminVaultPubkeyPathEnableResponse parses an HTTP response from a PutAdminVaultPubkeyPathEnableWithResponse call
func ParsePutAdminVaultPubkeyPathEnableResponse(rsp *http.Response) (*PutAdminVaultPubkeyPathEnableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminVaultPubkeyPathEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Vault
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAdminVaultsResponse parses an HTTP response from a GetAdminVaultsWithResponse call
func ParseGetAdminVaultsResponse(rsp *http.Response) (*GetAdminVaultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminVaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListExpandedAdminVaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostMintResponse parses an HTTP response from a PostMintWithResponse call
func ParsePostMintResponse(rsp *http.Response) (*PostMintResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MintResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrcawhirlpoolconfigsResponse parses an HTTP response from a GetOrcawhirlpoolconfigsWithResponse call
func ParseGetOrcawhirlpoolconfigsResponse(rsp *http.Response) (*GetOrcawhirlpoolconfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrcawhirlpoolconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListOrcaWhirlpoolConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPositionsResponse parses an HTTP response from a GetPositionsWithResponse call
func ParseGetPositionsResponse(rsp *http.Response) (*GetPositionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPositions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProtoconfigsResponse parses an HTTP response from a GetProtoconfigsWithResponse call
func ParseGetProtoconfigsResponse(rsp *http.Response) (*GetProtoconfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProtoconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListProtoConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSpltokenswapconfigsResponse parses an HTTP response from a GetSpltokenswapconfigsWithResponse call
func ParseGetSpltokenswapconfigsResponse(rsp *http.Response) (*GetSpltokenswapconfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpltokenswapconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSplTokenSwapConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSwaggerJsonResponse parses an HTTP response from a GetSwaggerJsonWithResponse call
func ParseGetSwaggerJsonResponse(rsp *http.Response) (*GetSwaggerJsonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwaggerJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSwapsResponse parses an HTTP response from a GetSwapsWithResponse call
func ParseGetSwapsResponse(rsp *http.Response) (*GetSwapsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwapsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTokenSwaps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTokenpairsResponse parses an HTTP response from a GetTokenpairsWithResponse call
func ParseGetTokenpairsResponse(rsp *http.Response) (*GetTokenpairsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenpairsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTokenPairs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTokensResponse parses an HTTP response from a GetTokensWithResponse call
func ParseGetTokensResponse(rsp *http.Response) (*GetTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTokens
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1DripPositionmetadataResponse parses an HTTP response from a GetV1DripPositionmetadataWithResponse call
func ParseGetV1DripPositionmetadataResponse(rsp *http.Response) (*GetV1DripPositionmetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DripPositionmetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PositionMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetVaultperiodsResponse parses an HTTP response from a GetVaultperiodsWithResponse call
func ParseGetVaultperiodsResponse(rsp *http.Response) (*GetVaultperiodsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVaultperiodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListVaultPeriods
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetVaultsResponse parses an HTTP response from a GetVaultsWithResponse call
func ParseGetVaultsResponse(rsp *http.Response) (*GetVaultsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVaultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListVaults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health Check
	// (GET /)
	Get(ctx echo.Context) error
	// Enable a vault
	// (PUT /admin/vault/{pubkeyPath}/enable)
	PutAdminVaultPubkeyPathEnable(ctx echo.Context, pubkeyPath PubkeyPathParam, params PutAdminVaultPubkeyPathEnableParams) error
	// Get All Vaults
	// (GET /admin/vaults)
	GetAdminVaults(ctx echo.Context, params GetAdminVaultsParams) error
	// Mint tokens (DEVNET ONLY)
	// (POST /mint)
	PostMint(ctx echo.Context) error
	// Get Orca Whirlpool Swap Configs
	// (GET /orcawhirlpoolconfigs)
	GetOrcawhirlpoolconfigs(ctx echo.Context, params GetOrcawhirlpoolconfigsParams) error
	// Get User Positions
	// (GET /positions)
	GetPositions(ctx echo.Context, params GetPositionsParams) error
	// Get Proto Configs
	// (GET /protoconfigs)
	GetProtoconfigs(ctx echo.Context, params GetProtoconfigsParams) error
	// Get Token Swaps Configs
	// (GET /spltokenswapconfigs)
	GetSpltokenswapconfigs(ctx echo.Context, params GetSpltokenswapconfigsParams) error
	// Swagger spec
	// (GET /swagger.json)
	GetSwaggerJson(ctx echo.Context) error
	// Get Token Swaps
	// (GET /swaps)
	GetSwaps(ctx echo.Context, params GetSwapsParams) error
	// Get Token Pairs
	// (GET /tokenpairs)
	GetTokenpairs(ctx echo.Context, params GetTokenpairsParams) error
	// Get Tokens
	// (GET /tokens)
	GetTokens(ctx echo.Context, params GetTokensParams) error
	// Get Drip V1 Position Metadata
	// (GET /v1/drip/positionmetadata)
	GetV1DripPositionmetadata(ctx echo.Context) error
	// Get Vault Periods
	// (GET /vaultperiods)
	GetVaultperiods(ctx echo.Context, params GetVaultperiodsParams) error
	// Get Supported Vaults
	// (GET /vaults)
	GetVaults(ctx echo.Context, params GetVaultsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx)
	return err
}

// PutAdminVaultPubkeyPathEnable converts echo context to params.
func (w *ServerInterfaceWrapper) PutAdminVaultPubkeyPathEnable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pubkeyPath" -------------
	var pubkeyPath PubkeyPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "pubkeyPath", runtime.ParamLocationPath, ctx.Param("pubkeyPath"), &pubkeyPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkeyPath: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutAdminVaultPubkeyPathEnableParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAdminVaultPubkeyPathEnable(ctx, pubkeyPath, params)
	return err
}

// GetAdminVaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdminVaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAdminVaultsParams
	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "token-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token-id")]; found {
		var TokenId GoogleTokenIdHeaderParam
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "token-id", runtime.ParamLocationHeader, valueList[0], &TokenId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token-id: %s", err))
		}

		params.TokenId = TokenId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter token-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdminVaults(ctx, params)
	return err
}

// PostMint converts echo context to params.
func (w *ServerInterfaceWrapper) PostMint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMint(ctx)
	return err
}

// GetOrcawhirlpoolconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrcawhirlpoolconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrcawhirlpoolconfigsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrcawhirlpoolconfigs(ctx, params)
	return err
}

// GetPositions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPositions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPositionsParams
	// ------------- Required query parameter "Wallet" -------------

	err = runtime.BindQueryParameter("form", true, true, "Wallet", ctx.QueryParams(), &params.Wallet)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Wallet: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPositions(ctx, params)
	return err
}

// GetProtoconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetProtoconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProtoconfigsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProtoconfigs(ctx, params)
	return err
}

// GetSpltokenswapconfigs converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpltokenswapconfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSpltokenswapconfigsParams
	// ------------- Optional query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, false, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpltokenswapconfigs(ctx, params)
	return err
}

// GetSwaggerJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwaggerJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwaggerJson(ctx)
	return err
}

// GetSwaps converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwaps(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSwapsParams
	// ------------- Optional query parameter "tokenPair" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenPair", ctx.QueryParams(), &params.TokenPair)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenPair: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwaps(ctx, params)
	return err
}

// GetTokenpairs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTokenpairs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTokenpairsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTokenpairs(ctx, params)
	return err
}

// GetTokens converts echo context to params.
func (w *ServerInterfaceWrapper) GetTokens(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTokensParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTokens(ctx, params)
	return err
}

// GetV1DripPositionmetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1DripPositionmetadata(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1DripPositionmetadata(ctx)
	return err
}

// GetVaultperiods converts echo context to params.
func (w *ServerInterfaceWrapper) GetVaultperiods(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVaultperiodsParams
	// ------------- Required query parameter "vault" -------------

	err = runtime.BindQueryParameter("form", true, true, "vault", ctx.QueryParams(), &params.Vault)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vault: %s", err))
	}

	// ------------- Optional query parameter "vaultPeriod" -------------

	err = runtime.BindQueryParameter("form", true, false, "vaultPeriod", ctx.QueryParams(), &params.VaultPeriod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vaultPeriod: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVaultperiods(ctx, params)
	return err
}

// GetVaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetVaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVaultsParams
	// ------------- Optional query parameter "tokenA" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenA", ctx.QueryParams(), &params.TokenA)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenA: %s", err))
	}

	// ------------- Optional query parameter "tokenB" -------------

	err = runtime.BindQueryParameter("form", true, false, "tokenB", ctx.QueryParams(), &params.TokenB)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tokenB: %s", err))
	}

	// ------------- Optional query parameter "protoConfig" -------------

	err = runtime.BindQueryParameter("form", true, false, "protoConfig", ctx.QueryParams(), &params.ProtoConfig)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protoConfig: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVaults(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Get)
	router.PUT(baseURL+"/admin/vault/:pubkeyPath/enable", wrapper.PutAdminVaultPubkeyPathEnable)
	router.GET(baseURL+"/admin/vaults", wrapper.GetAdminVaults)
	router.POST(baseURL+"/mint", wrapper.PostMint)
	router.GET(baseURL+"/orcawhirlpoolconfigs", wrapper.GetOrcawhirlpoolconfigs)
	router.GET(baseURL+"/positions", wrapper.GetPositions)
	router.GET(baseURL+"/protoconfigs", wrapper.GetProtoconfigs)
	router.GET(baseURL+"/spltokenswapconfigs", wrapper.GetSpltokenswapconfigs)
	router.GET(baseURL+"/swagger.json", wrapper.GetSwaggerJson)
	router.GET(baseURL+"/swaps", wrapper.GetSwaps)
	router.GET(baseURL+"/tokenpairs", wrapper.GetTokenpairs)
	router.GET(baseURL+"/tokens", wrapper.GetTokens)
	router.GET(baseURL+"/v1/drip/positionmetadata", wrapper.GetV1DripPositionmetadata)
	router.GET(baseURL+"/vaultperiods", wrapper.GetVaultperiods)
	router.GET(baseURL+"/vaults", wrapper.GetVaults)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
