// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package orcawhirlpool is a generated GoMock package.
package orcawhirlpool

import (
	context "context"
	reflect "reflect"

	dripextension "github.com/dcaf-labs/drip-client/drip-extension-go"
	gomock "github.com/golang/mock/gomock"
)

// MockOrcaWhirlpoolClient is a mock of OrcaWhirlpoolClient interface.
type MockOrcaWhirlpoolClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrcaWhirlpoolClientMockRecorder
}

// MockOrcaWhirlpoolClientMockRecorder is the mock recorder for MockOrcaWhirlpoolClient.
type MockOrcaWhirlpoolClientMockRecorder struct {
	mock *MockOrcaWhirlpoolClient
}

// NewMockOrcaWhirlpoolClient creates a new mock instance.
func NewMockOrcaWhirlpoolClient(ctrl *gomock.Controller) *MockOrcaWhirlpoolClient {
	mock := &MockOrcaWhirlpoolClient{ctrl: ctrl}
	mock.recorder = &MockOrcaWhirlpoolClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrcaWhirlpoolClient) EXPECT() *MockOrcaWhirlpoolClientMockRecorder {
	return m.recorder
}

// GetOrcaWhirlpoolQuoteEstimate mocks base method.
func (m *MockOrcaWhirlpoolClient) GetOrcaWhirlpoolQuoteEstimate(ctx context.Context, whirlpool, inputTokenMint, inputAmount string) (*dripextension.V1OrcawhirlpoolQuote200Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrcaWhirlpoolQuoteEstimate", ctx, whirlpool, inputTokenMint, inputAmount)
	ret0, _ := ret[0].(*dripextension.V1OrcawhirlpoolQuote200Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrcaWhirlpoolQuoteEstimate indicates an expected call of GetOrcaWhirlpoolQuoteEstimate.
func (mr *MockOrcaWhirlpoolClientMockRecorder) GetOrcaWhirlpoolQuoteEstimate(ctx, whirlpool, inputTokenMint, inputAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrcaWhirlpoolQuoteEstimate", reflect.TypeOf((*MockOrcaWhirlpoolClient)(nil).GetOrcaWhirlpoolQuoteEstimate), ctx, whirlpool, inputTokenMint, inputAmount)
}
