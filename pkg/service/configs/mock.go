// Code generated by MockGen. DO NOT EDIT.
// Source: type.go

// Package configs is a generated GoMock package.
package configs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAppConfig is a mock of AppConfig interface.
type MockAppConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAppConfigMockRecorder
}

// MockAppConfigMockRecorder is the mock recorder for MockAppConfig.
type MockAppConfigMockRecorder struct {
	mock *MockAppConfig
}

// NewMockAppConfig creates a new mock instance.
func NewMockAppConfig(ctrl *gomock.Controller) *MockAppConfig {
	mock := &MockAppConfig{ctrl: ctrl}
	mock.recorder = &MockAppConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppConfig) EXPECT() *MockAppConfigMockRecorder {
	return m.recorder
}

// GetDiscordWebhookAccessToken mocks base method.
func (m *MockAppConfig) GetDiscordWebhookAccessToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscordWebhookAccessToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDiscordWebhookAccessToken indicates an expected call of GetDiscordWebhookAccessToken.
func (mr *MockAppConfigMockRecorder) GetDiscordWebhookAccessToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscordWebhookAccessToken", reflect.TypeOf((*MockAppConfig)(nil).GetDiscordWebhookAccessToken))
}

// GetDiscordWebhookID mocks base method.
func (m *MockAppConfig) GetDiscordWebhookID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscordWebhookID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDiscordWebhookID indicates an expected call of GetDiscordWebhookID.
func (mr *MockAppConfigMockRecorder) GetDiscordWebhookID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscordWebhookID", reflect.TypeOf((*MockAppConfig)(nil).GetDiscordWebhookID))
}

// GetDripProgramID mocks base method.
func (m *MockAppConfig) GetDripProgramID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDripProgramID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDripProgramID indicates an expected call of GetDripProgramID.
func (mr *MockAppConfigMockRecorder) GetDripProgramID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDripProgramID", reflect.TypeOf((*MockAppConfig)(nil).GetDripProgramID))
}

// GetEnvironment mocks base method.
func (m *MockAppConfig) GetEnvironment() Environment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment")
	ret0, _ := ret[0].(Environment)
	return ret0
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockAppConfigMockRecorder) GetEnvironment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockAppConfig)(nil).GetEnvironment))
}

// GetGoogleClientID mocks base method.
func (m *MockAppConfig) GetGoogleClientID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoogleClientID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGoogleClientID indicates an expected call of GetGoogleClientID.
func (mr *MockAppConfigMockRecorder) GetGoogleClientID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoogleClientID", reflect.TypeOf((*MockAppConfig)(nil).GetGoogleClientID))
}

// GetNetwork mocks base method.
func (m *MockAppConfig) GetNetwork() Network {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork")
	ret0, _ := ret[0].(Network)
	return ret0
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockAppConfigMockRecorder) GetNetwork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockAppConfig)(nil).GetNetwork))
}

// GetServerPort mocks base method.
func (m *MockAppConfig) GetServerPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetServerPort indicates an expected call of GetServerPort.
func (mr *MockAppConfigMockRecorder) GetServerPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerPort", reflect.TypeOf((*MockAppConfig)(nil).GetServerPort))
}

// GetShouldByPassAdminAuth mocks base method.
func (m *MockAppConfig) GetShouldByPassAdminAuth() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShouldByPassAdminAuth")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetShouldByPassAdminAuth indicates an expected call of GetShouldByPassAdminAuth.
func (mr *MockAppConfigMockRecorder) GetShouldByPassAdminAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShouldByPassAdminAuth", reflect.TypeOf((*MockAppConfig)(nil).GetShouldByPassAdminAuth))
}

// GetWalletPrivateKey mocks base method.
func (m *MockAppConfig) GetWalletPrivateKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletPrivateKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWalletPrivateKey indicates an expected call of GetWalletPrivateKey.
func (mr *MockAppConfigMockRecorder) GetWalletPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletPrivateKey", reflect.TypeOf((*MockAppConfig)(nil).GetWalletPrivateKey))
}

// MockPSQLConfig is a mock of PSQLConfig interface.
type MockPSQLConfig struct {
	ctrl     *gomock.Controller
	recorder *MockPSQLConfigMockRecorder
}

// MockPSQLConfigMockRecorder is the mock recorder for MockPSQLConfig.
type MockPSQLConfigMockRecorder struct {
	mock *MockPSQLConfig
}

// NewMockPSQLConfig creates a new mock instance.
func NewMockPSQLConfig(ctrl *gomock.Controller) *MockPSQLConfig {
	mock := &MockPSQLConfig{ctrl: ctrl}
	mock.recorder = &MockPSQLConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPSQLConfig) EXPECT() *MockPSQLConfigMockRecorder {
	return m.recorder
}

// GetDBName mocks base method.
func (m *MockPSQLConfig) GetDBName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDBName indicates an expected call of GetDBName.
func (mr *MockPSQLConfigMockRecorder) GetDBName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBName", reflect.TypeOf((*MockPSQLConfig)(nil).GetDBName))
}

// GetHost mocks base method.
func (m *MockPSQLConfig) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockPSQLConfigMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockPSQLConfig)(nil).GetHost))
}

// GetIsTestDB mocks base method.
func (m *MockPSQLConfig) GetIsTestDB() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsTestDB")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsTestDB indicates an expected call of GetIsTestDB.
func (mr *MockPSQLConfigMockRecorder) GetIsTestDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsTestDB", reflect.TypeOf((*MockPSQLConfig)(nil).GetIsTestDB))
}

// GetPassword mocks base method.
func (m *MockPSQLConfig) GetPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockPSQLConfigMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockPSQLConfig)(nil).GetPassword))
}

// GetPort mocks base method.
func (m *MockPSQLConfig) GetPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockPSQLConfigMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockPSQLConfig)(nil).GetPort))
}

// GetURL mocks base method.
func (m *MockPSQLConfig) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockPSQLConfigMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockPSQLConfig)(nil).GetURL))
}

// GetUser mocks base method.
func (m *MockPSQLConfig) GetUser() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockPSQLConfigMockRecorder) GetUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockPSQLConfig)(nil).GetUser))
}

// SetDBName mocks base method.
func (m *MockPSQLConfig) SetDBName(newDBName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDBName", newDBName)
	ret0, _ := ret[0].(string)
	return ret0
}

// SetDBName indicates an expected call of SetDBName.
func (mr *MockPSQLConfigMockRecorder) SetDBName(newDBName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDBName", reflect.TypeOf((*MockPSQLConfig)(nil).SetDBName), newDBName)
}
