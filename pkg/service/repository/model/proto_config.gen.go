// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import "reflect"

const TableNameProtoConfig = "proto_config"

// ProtoConfig mapped from table <proto_config>
type ProtoConfig struct {
	Pubkey                  string `gorm:"column:pubkey;type:varchar;primaryKey" json:"pubkey" db:"pubkey"`
	Granularity             uint64 `gorm:"column:granularity;type:numeric;not null" json:"granularity" db:"granularity"`
	TokenADripTriggerSpread uint16 `gorm:"column:token_a_drip_trigger_spread;type:int2;not null" json:"tokenADripTriggerSpread" db:"token_a_drip_trigger_spread"`
	TokenBWithdrawalSpread  uint16 `gorm:"column:token_b_withdrawal_spread;type:int2;not null" json:"tokenBWithdrawalSpread" db:"token_b_withdrawal_spread"`
	Admin                   string `gorm:"column:admin;type:varchar;not null" json:"admin" db:"admin"`
	TokenBReferralSpread    uint16 `gorm:"column:token_b_referral_spread;type:int4;not null" json:"tokenBReferralSpread" db:"token_b_referral_spread"`
}

// TableName ProtoConfig's table name
func (*ProtoConfig) TableName() string {
	return TableNameProtoConfig
}

func (t ProtoConfig) GetAllColumns() []string {
	var res []string
	numFields := reflect.TypeOf(t).NumField()
	i := 0
	for i < numFields {
		field := reflect.TypeOf(t).Field(i)
		res = append(res, field.Tag.Get("db"))
		i++
	}
	return res
}
