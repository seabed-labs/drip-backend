// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dcaf-labs/drip/pkg/service/repository/model"
)

func newDripMetric(db *gorm.DB) dripMetric {
	_dripMetric := dripMetric{}

	_dripMetric.dripMetricDo.UseDB(db)
	_dripMetric.dripMetricDo.UseModel(&model.DripMetric{})

	tableName := _dripMetric.dripMetricDo.TableName()
	_dripMetric.ALL = field.NewField(tableName, "*")
	_dripMetric.Signature = field.NewString(tableName, "signature")
	_dripMetric.IxIndex = field.NewInt32(tableName, "ix_index")
	_dripMetric.IxName = field.NewString(tableName, "ix_name")
	_dripMetric.IxVersion = field.NewInt32(tableName, "ix_version")
	_dripMetric.Slot = field.NewInt32(tableName, "slot")
	_dripMetric.Time = field.NewTime(tableName, "time")
	_dripMetric.Vault = field.NewString(tableName, "vault")
	_dripMetric.TokenAMint = field.NewString(tableName, "token_a_mint")
	_dripMetric.TokenBMint = field.NewString(tableName, "token_b_mint")
	_dripMetric.VaultTokenASwappedAmount = field.NewUint64(tableName, "vault_token_a_swapped_amount")
	_dripMetric.VaultTokenBReceivedAmount = field.NewUint64(tableName, "vault_token_b_received_amount")
	_dripMetric.KeeperTokenAReceivedAmount = field.NewUint64(tableName, "keeper_token_a_received_amount")
	_dripMetric.TokenAUsdPriceDay = field.NewUint64(tableName, "token_a_usd_price_day")
	_dripMetric.TokenBUsdPriceDay = field.NewUint64(tableName, "token_b_usd_price_day")

	_dripMetric.fillFieldMap()

	return _dripMetric
}

type dripMetric struct {
	dripMetricDo dripMetricDo

	ALL                        field.Field
	Signature                  field.String
	IxIndex                    field.Int32
	IxName                     field.String
	IxVersion                  field.Int32
	Slot                       field.Int32
	Time                       field.Time
	Vault                      field.String
	TokenAMint                 field.String
	TokenBMint                 field.String
	VaultTokenASwappedAmount   field.Uint64
	VaultTokenBReceivedAmount  field.Uint64
	KeeperTokenAReceivedAmount field.Uint64
	TokenAUsdPriceDay          field.Uint64
	TokenBUsdPriceDay          field.Uint64

	fieldMap map[string]field.Expr
}

func (d dripMetric) Table(newTableName string) *dripMetric {
	d.dripMetricDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dripMetric) As(alias string) *dripMetric {
	d.dripMetricDo.DO = *(d.dripMetricDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dripMetric) updateTableName(table string) *dripMetric {
	d.ALL = field.NewField(table, "*")
	d.Signature = field.NewString(table, "signature")
	d.IxIndex = field.NewInt32(table, "ix_index")
	d.IxName = field.NewString(table, "ix_name")
	d.IxVersion = field.NewInt32(table, "ix_version")
	d.Slot = field.NewInt32(table, "slot")
	d.Time = field.NewTime(table, "time")
	d.Vault = field.NewString(table, "vault")
	d.TokenAMint = field.NewString(table, "token_a_mint")
	d.TokenBMint = field.NewString(table, "token_b_mint")
	d.VaultTokenASwappedAmount = field.NewUint64(table, "vault_token_a_swapped_amount")
	d.VaultTokenBReceivedAmount = field.NewUint64(table, "vault_token_b_received_amount")
	d.KeeperTokenAReceivedAmount = field.NewUint64(table, "keeper_token_a_received_amount")
	d.TokenAUsdPriceDay = field.NewUint64(table, "token_a_usd_price_day")
	d.TokenBUsdPriceDay = field.NewUint64(table, "token_b_usd_price_day")

	d.fillFieldMap()

	return d
}

func (d *dripMetric) WithContext(ctx context.Context) *dripMetricDo {
	return d.dripMetricDo.WithContext(ctx)
}

func (d dripMetric) TableName() string { return d.dripMetricDo.TableName() }

func (d dripMetric) Alias() string { return d.dripMetricDo.Alias() }

func (d *dripMetric) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dripMetric) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 14)
	d.fieldMap["signature"] = d.Signature
	d.fieldMap["ix_index"] = d.IxIndex
	d.fieldMap["ix_name"] = d.IxName
	d.fieldMap["ix_version"] = d.IxVersion
	d.fieldMap["slot"] = d.Slot
	d.fieldMap["time"] = d.Time
	d.fieldMap["vault"] = d.Vault
	d.fieldMap["token_a_mint"] = d.TokenAMint
	d.fieldMap["token_b_mint"] = d.TokenBMint
	d.fieldMap["vault_token_a_swapped_amount"] = d.VaultTokenASwappedAmount
	d.fieldMap["vault_token_b_received_amount"] = d.VaultTokenBReceivedAmount
	d.fieldMap["keeper_token_a_received_amount"] = d.KeeperTokenAReceivedAmount
	d.fieldMap["token_a_usd_price_day"] = d.TokenAUsdPriceDay
	d.fieldMap["token_b_usd_price_day"] = d.TokenBUsdPriceDay
}

func (d dripMetric) clone(db *gorm.DB) dripMetric {
	d.dripMetricDo.ReplaceDB(db)
	return d
}

type dripMetricDo struct{ gen.DO }

func (d dripMetricDo) Debug() *dripMetricDo {
	return d.withDO(d.DO.Debug())
}

func (d dripMetricDo) WithContext(ctx context.Context) *dripMetricDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dripMetricDo) ReadDB() *dripMetricDo {
	return d.Clauses(dbresolver.Read)
}

func (d dripMetricDo) WriteDB() *dripMetricDo {
	return d.Clauses(dbresolver.Write)
}

func (d dripMetricDo) Clauses(conds ...clause.Expression) *dripMetricDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dripMetricDo) Returning(value interface{}, columns ...string) *dripMetricDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dripMetricDo) Not(conds ...gen.Condition) *dripMetricDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dripMetricDo) Or(conds ...gen.Condition) *dripMetricDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dripMetricDo) Select(conds ...field.Expr) *dripMetricDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dripMetricDo) Where(conds ...gen.Condition) *dripMetricDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dripMetricDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *dripMetricDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dripMetricDo) Order(conds ...field.Expr) *dripMetricDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dripMetricDo) Distinct(cols ...field.Expr) *dripMetricDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dripMetricDo) Omit(cols ...field.Expr) *dripMetricDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dripMetricDo) Join(table schema.Tabler, on ...field.Expr) *dripMetricDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dripMetricDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dripMetricDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dripMetricDo) RightJoin(table schema.Tabler, on ...field.Expr) *dripMetricDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dripMetricDo) Group(cols ...field.Expr) *dripMetricDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dripMetricDo) Having(conds ...gen.Condition) *dripMetricDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dripMetricDo) Limit(limit int) *dripMetricDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dripMetricDo) Offset(offset int) *dripMetricDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dripMetricDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dripMetricDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dripMetricDo) Unscoped() *dripMetricDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dripMetricDo) Create(values ...*model.DripMetric) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dripMetricDo) CreateInBatches(values []*model.DripMetric, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dripMetricDo) Save(values ...*model.DripMetric) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dripMetricDo) First() (*model.DripMetric, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DripMetric), nil
	}
}

func (d dripMetricDo) Take() (*model.DripMetric, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DripMetric), nil
	}
}

func (d dripMetricDo) Last() (*model.DripMetric, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DripMetric), nil
	}
}

func (d dripMetricDo) Find() ([]*model.DripMetric, error) {
	result, err := d.DO.Find()
	return result.([]*model.DripMetric), err
}

func (d dripMetricDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DripMetric, err error) {
	buf := make([]*model.DripMetric, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dripMetricDo) FindInBatches(result *[]*model.DripMetric, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dripMetricDo) Attrs(attrs ...field.AssignExpr) *dripMetricDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dripMetricDo) Assign(attrs ...field.AssignExpr) *dripMetricDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dripMetricDo) Joins(fields ...field.RelationField) *dripMetricDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dripMetricDo) Preload(fields ...field.RelationField) *dripMetricDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dripMetricDo) FirstOrInit() (*model.DripMetric, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DripMetric), nil
	}
}

func (d dripMetricDo) FirstOrCreate() (*model.DripMetric, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DripMetric), nil
	}
}

func (d dripMetricDo) FindByPage(offset int, limit int) (result []*model.DripMetric, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dripMetricDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dripMetricDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dripMetricDo) Delete(models ...*model.DripMetric) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dripMetricDo) withDO(do gen.Dao) *dripMetricDo {
	d.DO = *do.(*gen.DO)
	return d
}
