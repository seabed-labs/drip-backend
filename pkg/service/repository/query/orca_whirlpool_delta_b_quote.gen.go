// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dcaf-labs/drip/pkg/service/repository/model"
)

func newOrcaWhirlpoolDeltaBQuote(db *gorm.DB) orcaWhirlpoolDeltaBQuote {
	_orcaWhirlpoolDeltaBQuote := orcaWhirlpoolDeltaBQuote{}

	_orcaWhirlpoolDeltaBQuote.orcaWhirlpoolDeltaBQuoteDo.UseDB(db)
	_orcaWhirlpoolDeltaBQuote.orcaWhirlpoolDeltaBQuoteDo.UseModel(&model.OrcaWhirlpoolDeltaBQuote{})

	tableName := _orcaWhirlpoolDeltaBQuote.orcaWhirlpoolDeltaBQuoteDo.TableName()
	_orcaWhirlpoolDeltaBQuote.ALL = field.NewField(tableName, "*")
	_orcaWhirlpoolDeltaBQuote.VaultPubkey = field.NewString(tableName, "vault_pubkey")
	_orcaWhirlpoolDeltaBQuote.WhirlpoolPubkey = field.NewString(tableName, "whirlpool_pubkey")
	_orcaWhirlpoolDeltaBQuote.TokenPairID = field.NewString(tableName, "token_pair_id")
	_orcaWhirlpoolDeltaBQuote.DeltaB = field.NewUint64(tableName, "delta_b")
	_orcaWhirlpoolDeltaBQuote.LastUpdated = field.NewTime(tableName, "last_updated")

	_orcaWhirlpoolDeltaBQuote.fillFieldMap()

	return _orcaWhirlpoolDeltaBQuote
}

type orcaWhirlpoolDeltaBQuote struct {
	orcaWhirlpoolDeltaBQuoteDo orcaWhirlpoolDeltaBQuoteDo

	ALL             field.Field
	VaultPubkey     field.String
	WhirlpoolPubkey field.String
	TokenPairID     field.String
	DeltaB          field.Uint64
	LastUpdated     field.Time

	fieldMap map[string]field.Expr
}

func (o orcaWhirlpoolDeltaBQuote) Table(newTableName string) *orcaWhirlpoolDeltaBQuote {
	o.orcaWhirlpoolDeltaBQuoteDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orcaWhirlpoolDeltaBQuote) As(alias string) *orcaWhirlpoolDeltaBQuote {
	o.orcaWhirlpoolDeltaBQuoteDo.DO = *(o.orcaWhirlpoolDeltaBQuoteDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orcaWhirlpoolDeltaBQuote) updateTableName(table string) *orcaWhirlpoolDeltaBQuote {
	o.ALL = field.NewField(table, "*")
	o.VaultPubkey = field.NewString(table, "vault_pubkey")
	o.WhirlpoolPubkey = field.NewString(table, "whirlpool_pubkey")
	o.TokenPairID = field.NewString(table, "token_pair_id")
	o.DeltaB = field.NewUint64(table, "delta_b")
	o.LastUpdated = field.NewTime(table, "last_updated")

	o.fillFieldMap()

	return o
}

func (o *orcaWhirlpoolDeltaBQuote) WithContext(ctx context.Context) *orcaWhirlpoolDeltaBQuoteDo {
	return o.orcaWhirlpoolDeltaBQuoteDo.WithContext(ctx)
}

func (o orcaWhirlpoolDeltaBQuote) TableName() string { return o.orcaWhirlpoolDeltaBQuoteDo.TableName() }

func (o orcaWhirlpoolDeltaBQuote) Alias() string { return o.orcaWhirlpoolDeltaBQuoteDo.Alias() }

func (o *orcaWhirlpoolDeltaBQuote) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orcaWhirlpoolDeltaBQuote) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["vault_pubkey"] = o.VaultPubkey
	o.fieldMap["whirlpool_pubkey"] = o.WhirlpoolPubkey
	o.fieldMap["token_pair_id"] = o.TokenPairID
	o.fieldMap["delta_b"] = o.DeltaB
	o.fieldMap["last_updated"] = o.LastUpdated
}

func (o orcaWhirlpoolDeltaBQuote) clone(db *gorm.DB) orcaWhirlpoolDeltaBQuote {
	o.orcaWhirlpoolDeltaBQuoteDo.ReplaceDB(db)
	return o
}

type orcaWhirlpoolDeltaBQuoteDo struct{ gen.DO }

func (o orcaWhirlpoolDeltaBQuoteDo) Debug() *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Debug())
}

func (o orcaWhirlpoolDeltaBQuoteDo) WithContext(ctx context.Context) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orcaWhirlpoolDeltaBQuoteDo) ReadDB() *orcaWhirlpoolDeltaBQuoteDo {
	return o.Clauses(dbresolver.Read)
}

func (o orcaWhirlpoolDeltaBQuoteDo) WriteDB() *orcaWhirlpoolDeltaBQuoteDo {
	return o.Clauses(dbresolver.Write)
}

func (o orcaWhirlpoolDeltaBQuoteDo) Clauses(conds ...clause.Expression) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Returning(value interface{}, columns ...string) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Not(conds ...gen.Condition) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Or(conds ...gen.Condition) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Select(conds ...field.Expr) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Where(conds ...gen.Condition) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *orcaWhirlpoolDeltaBQuoteDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Order(conds ...field.Expr) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Distinct(cols ...field.Expr) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Omit(cols ...field.Expr) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Join(table schema.Tabler, on ...field.Expr) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) LeftJoin(table schema.Tabler, on ...field.Expr) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) RightJoin(table schema.Tabler, on ...field.Expr) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Group(cols ...field.Expr) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Having(conds ...gen.Condition) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Limit(limit int) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Offset(offset int) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Unscoped() *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orcaWhirlpoolDeltaBQuoteDo) Create(values ...*model.OrcaWhirlpoolDeltaBQuote) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orcaWhirlpoolDeltaBQuoteDo) CreateInBatches(values []*model.OrcaWhirlpoolDeltaBQuote, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orcaWhirlpoolDeltaBQuoteDo) Save(values ...*model.OrcaWhirlpoolDeltaBQuote) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orcaWhirlpoolDeltaBQuoteDo) First() (*model.OrcaWhirlpoolDeltaBQuote, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrcaWhirlpoolDeltaBQuote), nil
	}
}

func (o orcaWhirlpoolDeltaBQuoteDo) Take() (*model.OrcaWhirlpoolDeltaBQuote, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrcaWhirlpoolDeltaBQuote), nil
	}
}

func (o orcaWhirlpoolDeltaBQuoteDo) Last() (*model.OrcaWhirlpoolDeltaBQuote, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrcaWhirlpoolDeltaBQuote), nil
	}
}

func (o orcaWhirlpoolDeltaBQuoteDo) Find() ([]*model.OrcaWhirlpoolDeltaBQuote, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrcaWhirlpoolDeltaBQuote), err
}

func (o orcaWhirlpoolDeltaBQuoteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrcaWhirlpoolDeltaBQuote, err error) {
	buf := make([]*model.OrcaWhirlpoolDeltaBQuote, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orcaWhirlpoolDeltaBQuoteDo) FindInBatches(result *[]*model.OrcaWhirlpoolDeltaBQuote, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orcaWhirlpoolDeltaBQuoteDo) Attrs(attrs ...field.AssignExpr) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Assign(attrs ...field.AssignExpr) *orcaWhirlpoolDeltaBQuoteDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orcaWhirlpoolDeltaBQuoteDo) Joins(fields ...field.RelationField) *orcaWhirlpoolDeltaBQuoteDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orcaWhirlpoolDeltaBQuoteDo) Preload(fields ...field.RelationField) *orcaWhirlpoolDeltaBQuoteDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orcaWhirlpoolDeltaBQuoteDo) FirstOrInit() (*model.OrcaWhirlpoolDeltaBQuote, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrcaWhirlpoolDeltaBQuote), nil
	}
}

func (o orcaWhirlpoolDeltaBQuoteDo) FirstOrCreate() (*model.OrcaWhirlpoolDeltaBQuote, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrcaWhirlpoolDeltaBQuote), nil
	}
}

func (o orcaWhirlpoolDeltaBQuoteDo) FindByPage(offset int, limit int) (result []*model.OrcaWhirlpoolDeltaBQuote, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orcaWhirlpoolDeltaBQuoteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orcaWhirlpoolDeltaBQuoteDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orcaWhirlpoolDeltaBQuoteDo) Delete(models ...*model.OrcaWhirlpoolDeltaBQuote) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orcaWhirlpoolDeltaBQuoteDo) withDO(do gen.Dao) *orcaWhirlpoolDeltaBQuoteDo {
	o.DO = *do.(*gen.DO)
	return o
}
