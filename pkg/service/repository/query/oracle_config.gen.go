// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dcaf-labs/drip/pkg/service/repository/model"
)

func newOracleConfig(db *gorm.DB) oracleConfig {
	_oracleConfig := oracleConfig{}

	_oracleConfig.oracleConfigDo.UseDB(db)
	_oracleConfig.oracleConfigDo.UseModel(&model.OracleConfig{})

	tableName := _oracleConfig.oracleConfigDo.TableName()
	_oracleConfig.ALL = field.NewField(tableName, "*")
	_oracleConfig.Pubkey = field.NewString(tableName, "pubkey")
	_oracleConfig.Enabled = field.NewBool(tableName, "enabled")
	_oracleConfig.Source = field.NewInt16(tableName, "source")
	_oracleConfig.UpdateAuthority = field.NewString(tableName, "update_authority")
	_oracleConfig.TokenAMint = field.NewString(tableName, "token_a_mint")
	_oracleConfig.TokenAPrice = field.NewString(tableName, "token_a_price")
	_oracleConfig.TokenBMint = field.NewString(tableName, "token_b_mint")
	_oracleConfig.TokenBPrice = field.NewString(tableName, "token_b_price")

	_oracleConfig.fillFieldMap()

	return _oracleConfig
}

type oracleConfig struct {
	oracleConfigDo oracleConfigDo

	ALL             field.Field
	Pubkey          field.String
	Enabled         field.Bool
	Source          field.Int16
	UpdateAuthority field.String
	TokenAMint      field.String
	TokenAPrice     field.String
	TokenBMint      field.String
	TokenBPrice     field.String

	fieldMap map[string]field.Expr
}

func (o oracleConfig) Table(newTableName string) *oracleConfig {
	o.oracleConfigDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oracleConfig) As(alias string) *oracleConfig {
	o.oracleConfigDo.DO = *(o.oracleConfigDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oracleConfig) updateTableName(table string) *oracleConfig {
	o.ALL = field.NewField(table, "*")
	o.Pubkey = field.NewString(table, "pubkey")
	o.Enabled = field.NewBool(table, "enabled")
	o.Source = field.NewInt16(table, "source")
	o.UpdateAuthority = field.NewString(table, "update_authority")
	o.TokenAMint = field.NewString(table, "token_a_mint")
	o.TokenAPrice = field.NewString(table, "token_a_price")
	o.TokenBMint = field.NewString(table, "token_b_mint")
	o.TokenBPrice = field.NewString(table, "token_b_price")

	o.fillFieldMap()

	return o
}

func (o *oracleConfig) WithContext(ctx context.Context) *oracleConfigDo {
	return o.oracleConfigDo.WithContext(ctx)
}

func (o oracleConfig) TableName() string { return o.oracleConfigDo.TableName() }

func (o oracleConfig) Alias() string { return o.oracleConfigDo.Alias() }

func (o *oracleConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oracleConfig) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["pubkey"] = o.Pubkey
	o.fieldMap["enabled"] = o.Enabled
	o.fieldMap["source"] = o.Source
	o.fieldMap["update_authority"] = o.UpdateAuthority
	o.fieldMap["token_a_mint"] = o.TokenAMint
	o.fieldMap["token_a_price"] = o.TokenAPrice
	o.fieldMap["token_b_mint"] = o.TokenBMint
	o.fieldMap["token_b_price"] = o.TokenBPrice
}

func (o oracleConfig) clone(db *gorm.DB) oracleConfig {
	o.oracleConfigDo.ReplaceDB(db)
	return o
}

type oracleConfigDo struct{ gen.DO }

func (o oracleConfigDo) Debug() *oracleConfigDo {
	return o.withDO(o.DO.Debug())
}

func (o oracleConfigDo) WithContext(ctx context.Context) *oracleConfigDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oracleConfigDo) ReadDB() *oracleConfigDo {
	return o.Clauses(dbresolver.Read)
}

func (o oracleConfigDo) WriteDB() *oracleConfigDo {
	return o.Clauses(dbresolver.Write)
}

func (o oracleConfigDo) Clauses(conds ...clause.Expression) *oracleConfigDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oracleConfigDo) Returning(value interface{}, columns ...string) *oracleConfigDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oracleConfigDo) Not(conds ...gen.Condition) *oracleConfigDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oracleConfigDo) Or(conds ...gen.Condition) *oracleConfigDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oracleConfigDo) Select(conds ...field.Expr) *oracleConfigDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oracleConfigDo) Where(conds ...gen.Condition) *oracleConfigDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oracleConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *oracleConfigDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o oracleConfigDo) Order(conds ...field.Expr) *oracleConfigDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oracleConfigDo) Distinct(cols ...field.Expr) *oracleConfigDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oracleConfigDo) Omit(cols ...field.Expr) *oracleConfigDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oracleConfigDo) Join(table schema.Tabler, on ...field.Expr) *oracleConfigDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oracleConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oracleConfigDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oracleConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *oracleConfigDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oracleConfigDo) Group(cols ...field.Expr) *oracleConfigDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oracleConfigDo) Having(conds ...gen.Condition) *oracleConfigDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oracleConfigDo) Limit(limit int) *oracleConfigDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oracleConfigDo) Offset(offset int) *oracleConfigDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oracleConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oracleConfigDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oracleConfigDo) Unscoped() *oracleConfigDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oracleConfigDo) Create(values ...*model.OracleConfig) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oracleConfigDo) CreateInBatches(values []*model.OracleConfig, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oracleConfigDo) Save(values ...*model.OracleConfig) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oracleConfigDo) First() (*model.OracleConfig, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleConfig), nil
	}
}

func (o oracleConfigDo) Take() (*model.OracleConfig, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleConfig), nil
	}
}

func (o oracleConfigDo) Last() (*model.OracleConfig, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleConfig), nil
	}
}

func (o oracleConfigDo) Find() ([]*model.OracleConfig, error) {
	result, err := o.DO.Find()
	return result.([]*model.OracleConfig), err
}

func (o oracleConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OracleConfig, err error) {
	buf := make([]*model.OracleConfig, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oracleConfigDo) FindInBatches(result *[]*model.OracleConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oracleConfigDo) Attrs(attrs ...field.AssignExpr) *oracleConfigDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oracleConfigDo) Assign(attrs ...field.AssignExpr) *oracleConfigDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oracleConfigDo) Joins(fields ...field.RelationField) *oracleConfigDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oracleConfigDo) Preload(fields ...field.RelationField) *oracleConfigDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oracleConfigDo) FirstOrInit() (*model.OracleConfig, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleConfig), nil
	}
}

func (o oracleConfigDo) FirstOrCreate() (*model.OracleConfig, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleConfig), nil
	}
}

func (o oracleConfigDo) FindByPage(offset int, limit int) (result []*model.OracleConfig, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oracleConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oracleConfigDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oracleConfigDo) Delete(models ...*model.OracleConfig) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oracleConfigDo) withDO(do gen.Dao) *oracleConfigDo {
	o.DO = *do.(*gen.DO)
	return o
}
