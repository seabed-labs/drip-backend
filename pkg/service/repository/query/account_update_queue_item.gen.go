// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dcaf-labs/drip/pkg/service/repository/model"
)

func newAccountUpdateQueueItem(db *gorm.DB) accountUpdateQueueItem {
	_accountUpdateQueueItem := accountUpdateQueueItem{}

	_accountUpdateQueueItem.accountUpdateQueueItemDo.UseDB(db)
	_accountUpdateQueueItem.accountUpdateQueueItemDo.UseModel(&model.AccountUpdateQueueItem{})

	tableName := _accountUpdateQueueItem.accountUpdateQueueItemDo.TableName()
	_accountUpdateQueueItem.ALL = field.NewField(tableName, "*")
	_accountUpdateQueueItem.Pubkey = field.NewString(tableName, "pubkey")
	_accountUpdateQueueItem.ProgramID = field.NewString(tableName, "program_id")
	_accountUpdateQueueItem.Time = field.NewTime(tableName, "time")

	_accountUpdateQueueItem.fillFieldMap()

	return _accountUpdateQueueItem
}

type accountUpdateQueueItem struct {
	accountUpdateQueueItemDo accountUpdateQueueItemDo

	ALL       field.Field
	Pubkey    field.String
	ProgramID field.String
	Time      field.Time

	fieldMap map[string]field.Expr
}

func (a accountUpdateQueueItem) Table(newTableName string) *accountUpdateQueueItem {
	a.accountUpdateQueueItemDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUpdateQueueItem) As(alias string) *accountUpdateQueueItem {
	a.accountUpdateQueueItemDo.DO = *(a.accountUpdateQueueItemDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUpdateQueueItem) updateTableName(table string) *accountUpdateQueueItem {
	a.ALL = field.NewField(table, "*")
	a.Pubkey = field.NewString(table, "pubkey")
	a.ProgramID = field.NewString(table, "program_id")
	a.Time = field.NewTime(table, "time")

	a.fillFieldMap()

	return a
}

func (a *accountUpdateQueueItem) WithContext(ctx context.Context) *accountUpdateQueueItemDo {
	return a.accountUpdateQueueItemDo.WithContext(ctx)
}

func (a accountUpdateQueueItem) TableName() string { return a.accountUpdateQueueItemDo.TableName() }

func (a accountUpdateQueueItem) Alias() string { return a.accountUpdateQueueItemDo.Alias() }

func (a *accountUpdateQueueItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUpdateQueueItem) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["pubkey"] = a.Pubkey
	a.fieldMap["program_id"] = a.ProgramID
	a.fieldMap["time"] = a.Time
}

func (a accountUpdateQueueItem) clone(db *gorm.DB) accountUpdateQueueItem {
	a.accountUpdateQueueItemDo.ReplaceDB(db)
	return a
}

type accountUpdateQueueItemDo struct{ gen.DO }

func (a accountUpdateQueueItemDo) Debug() *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUpdateQueueItemDo) WithContext(ctx context.Context) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUpdateQueueItemDo) ReadDB() *accountUpdateQueueItemDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUpdateQueueItemDo) WriteDB() *accountUpdateQueueItemDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUpdateQueueItemDo) Clauses(conds ...clause.Expression) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUpdateQueueItemDo) Returning(value interface{}, columns ...string) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUpdateQueueItemDo) Not(conds ...gen.Condition) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUpdateQueueItemDo) Or(conds ...gen.Condition) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUpdateQueueItemDo) Select(conds ...field.Expr) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUpdateQueueItemDo) Where(conds ...gen.Condition) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUpdateQueueItemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *accountUpdateQueueItemDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a accountUpdateQueueItemDo) Order(conds ...field.Expr) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUpdateQueueItemDo) Distinct(cols ...field.Expr) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUpdateQueueItemDo) Omit(cols ...field.Expr) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUpdateQueueItemDo) Join(table schema.Tabler, on ...field.Expr) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUpdateQueueItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUpdateQueueItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUpdateQueueItemDo) Group(cols ...field.Expr) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUpdateQueueItemDo) Having(conds ...gen.Condition) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUpdateQueueItemDo) Limit(limit int) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUpdateQueueItemDo) Offset(offset int) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUpdateQueueItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUpdateQueueItemDo) Unscoped() *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUpdateQueueItemDo) Create(values ...*model.AccountUpdateQueueItem) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUpdateQueueItemDo) CreateInBatches(values []*model.AccountUpdateQueueItem, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUpdateQueueItemDo) Save(values ...*model.AccountUpdateQueueItem) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUpdateQueueItemDo) First() (*model.AccountUpdateQueueItem, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountUpdateQueueItem), nil
	}
}

func (a accountUpdateQueueItemDo) Take() (*model.AccountUpdateQueueItem, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountUpdateQueueItem), nil
	}
}

func (a accountUpdateQueueItemDo) Last() (*model.AccountUpdateQueueItem, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountUpdateQueueItem), nil
	}
}

func (a accountUpdateQueueItemDo) Find() ([]*model.AccountUpdateQueueItem, error) {
	result, err := a.DO.Find()
	return result.([]*model.AccountUpdateQueueItem), err
}

func (a accountUpdateQueueItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AccountUpdateQueueItem, err error) {
	buf := make([]*model.AccountUpdateQueueItem, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUpdateQueueItemDo) FindInBatches(result *[]*model.AccountUpdateQueueItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUpdateQueueItemDo) Attrs(attrs ...field.AssignExpr) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUpdateQueueItemDo) Assign(attrs ...field.AssignExpr) *accountUpdateQueueItemDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUpdateQueueItemDo) Joins(fields ...field.RelationField) *accountUpdateQueueItemDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUpdateQueueItemDo) Preload(fields ...field.RelationField) *accountUpdateQueueItemDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUpdateQueueItemDo) FirstOrInit() (*model.AccountUpdateQueueItem, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountUpdateQueueItem), nil
	}
}

func (a accountUpdateQueueItemDo) FirstOrCreate() (*model.AccountUpdateQueueItem, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountUpdateQueueItem), nil
	}
}

func (a accountUpdateQueueItemDo) FindByPage(offset int, limit int) (result []*model.AccountUpdateQueueItem, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUpdateQueueItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUpdateQueueItemDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUpdateQueueItemDo) Delete(models ...*model.AccountUpdateQueueItem) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUpdateQueueItemDo) withDO(do gen.Dao) *accountUpdateQueueItemDo {
	a.DO = *do.(*gen.DO)
	return a
}
