// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dcaf-labs/drip/pkg/service/repository/model"
)

func newTransactionProcessingCheckpoint(db *gorm.DB) transactionProcessingCheckpoint {
	_transactionProcessingCheckpoint := transactionProcessingCheckpoint{}

	_transactionProcessingCheckpoint.transactionProcessingCheckpointDo.UseDB(db)
	_transactionProcessingCheckpoint.transactionProcessingCheckpointDo.UseModel(&model.TransactionProcessingCheckpoint{})

	tableName := _transactionProcessingCheckpoint.transactionProcessingCheckpointDo.TableName()
	_transactionProcessingCheckpoint.ALL = field.NewField(tableName, "*")
	_transactionProcessingCheckpoint.ID = field.NewInt32(tableName, "id")
	_transactionProcessingCheckpoint.Signature = field.NewString(tableName, "signature")
	_transactionProcessingCheckpoint.Slot = field.NewUint64(tableName, "slot")

	_transactionProcessingCheckpoint.fillFieldMap()

	return _transactionProcessingCheckpoint
}

type transactionProcessingCheckpoint struct {
	transactionProcessingCheckpointDo transactionProcessingCheckpointDo

	ALL       field.Field
	ID        field.Int32
	Signature field.String
	Slot      field.Uint64

	fieldMap map[string]field.Expr
}

func (t transactionProcessingCheckpoint) Table(newTableName string) *transactionProcessingCheckpoint {
	t.transactionProcessingCheckpointDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionProcessingCheckpoint) As(alias string) *transactionProcessingCheckpoint {
	t.transactionProcessingCheckpointDo.DO = *(t.transactionProcessingCheckpointDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionProcessingCheckpoint) updateTableName(table string) *transactionProcessingCheckpoint {
	t.ALL = field.NewField(table, "*")
	t.ID = field.NewInt32(table, "id")
	t.Signature = field.NewString(table, "signature")
	t.Slot = field.NewUint64(table, "slot")

	t.fillFieldMap()

	return t
}

func (t *transactionProcessingCheckpoint) WithContext(ctx context.Context) *transactionProcessingCheckpointDo {
	return t.transactionProcessingCheckpointDo.WithContext(ctx)
}

func (t transactionProcessingCheckpoint) TableName() string {
	return t.transactionProcessingCheckpointDo.TableName()
}

func (t transactionProcessingCheckpoint) Alias() string {
	return t.transactionProcessingCheckpointDo.Alias()
}

func (t *transactionProcessingCheckpoint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionProcessingCheckpoint) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["signature"] = t.Signature
	t.fieldMap["slot"] = t.Slot
}

func (t transactionProcessingCheckpoint) clone(db *gorm.DB) transactionProcessingCheckpoint {
	t.transactionProcessingCheckpointDo.ReplaceDB(db)
	return t
}

type transactionProcessingCheckpointDo struct{ gen.DO }

func (t transactionProcessingCheckpointDo) Debug() *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Debug())
}

func (t transactionProcessingCheckpointDo) WithContext(ctx context.Context) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionProcessingCheckpointDo) ReadDB() *transactionProcessingCheckpointDo {
	return t.Clauses(dbresolver.Read)
}

func (t transactionProcessingCheckpointDo) WriteDB() *transactionProcessingCheckpointDo {
	return t.Clauses(dbresolver.Write)
}

func (t transactionProcessingCheckpointDo) Clauses(conds ...clause.Expression) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionProcessingCheckpointDo) Returning(value interface{}, columns ...string) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionProcessingCheckpointDo) Not(conds ...gen.Condition) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionProcessingCheckpointDo) Or(conds ...gen.Condition) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionProcessingCheckpointDo) Select(conds ...field.Expr) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionProcessingCheckpointDo) Where(conds ...gen.Condition) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionProcessingCheckpointDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *transactionProcessingCheckpointDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t transactionProcessingCheckpointDo) Order(conds ...field.Expr) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionProcessingCheckpointDo) Distinct(cols ...field.Expr) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionProcessingCheckpointDo) Omit(cols ...field.Expr) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionProcessingCheckpointDo) Join(table schema.Tabler, on ...field.Expr) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionProcessingCheckpointDo) LeftJoin(table schema.Tabler, on ...field.Expr) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionProcessingCheckpointDo) RightJoin(table schema.Tabler, on ...field.Expr) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionProcessingCheckpointDo) Group(cols ...field.Expr) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionProcessingCheckpointDo) Having(conds ...gen.Condition) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionProcessingCheckpointDo) Limit(limit int) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionProcessingCheckpointDo) Offset(offset int) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionProcessingCheckpointDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionProcessingCheckpointDo) Unscoped() *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionProcessingCheckpointDo) Create(values ...*model.TransactionProcessingCheckpoint) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionProcessingCheckpointDo) CreateInBatches(values []*model.TransactionProcessingCheckpoint, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionProcessingCheckpointDo) Save(values ...*model.TransactionProcessingCheckpoint) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionProcessingCheckpointDo) First() (*model.TransactionProcessingCheckpoint, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionProcessingCheckpoint), nil
	}
}

func (t transactionProcessingCheckpointDo) Take() (*model.TransactionProcessingCheckpoint, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionProcessingCheckpoint), nil
	}
}

func (t transactionProcessingCheckpointDo) Last() (*model.TransactionProcessingCheckpoint, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionProcessingCheckpoint), nil
	}
}

func (t transactionProcessingCheckpointDo) Find() ([]*model.TransactionProcessingCheckpoint, error) {
	result, err := t.DO.Find()
	return result.([]*model.TransactionProcessingCheckpoint), err
}

func (t transactionProcessingCheckpointDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionProcessingCheckpoint, err error) {
	buf := make([]*model.TransactionProcessingCheckpoint, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionProcessingCheckpointDo) FindInBatches(result *[]*model.TransactionProcessingCheckpoint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionProcessingCheckpointDo) Attrs(attrs ...field.AssignExpr) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionProcessingCheckpointDo) Assign(attrs ...field.AssignExpr) *transactionProcessingCheckpointDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionProcessingCheckpointDo) Joins(fields ...field.RelationField) *transactionProcessingCheckpointDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionProcessingCheckpointDo) Preload(fields ...field.RelationField) *transactionProcessingCheckpointDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionProcessingCheckpointDo) FirstOrInit() (*model.TransactionProcessingCheckpoint, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionProcessingCheckpoint), nil
	}
}

func (t transactionProcessingCheckpointDo) FirstOrCreate() (*model.TransactionProcessingCheckpoint, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionProcessingCheckpoint), nil
	}
}

func (t transactionProcessingCheckpointDo) FindByPage(offset int, limit int) (result []*model.TransactionProcessingCheckpoint, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionProcessingCheckpointDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionProcessingCheckpointDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionProcessingCheckpointDo) Delete(models ...*model.TransactionProcessingCheckpoint) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionProcessingCheckpointDo) withDO(do gen.Dao) *transactionProcessingCheckpointDo {
	t.DO = *do.(*gen.DO)
	return t
}
