// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/dcaf-labs/drip/pkg/service/repository/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountUpdateQueue is a mock of AccountUpdateQueue interface.
type MockAccountUpdateQueue struct {
	ctrl     *gomock.Controller
	recorder *MockAccountUpdateQueueMockRecorder
}

// MockAccountUpdateQueueMockRecorder is the mock recorder for MockAccountUpdateQueue.
type MockAccountUpdateQueueMockRecorder struct {
	mock *MockAccountUpdateQueue
}

// NewMockAccountUpdateQueue creates a new mock instance.
func NewMockAccountUpdateQueue(ctrl *gomock.Controller) *MockAccountUpdateQueue {
	mock := &MockAccountUpdateQueue{ctrl: ctrl}
	mock.recorder = &MockAccountUpdateQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountUpdateQueue) EXPECT() *MockAccountUpdateQueueMockRecorder {
	return m.recorder
}

// AccountUpdateQueueItemDepth mocks base method.
func (m *MockAccountUpdateQueue) AccountUpdateQueueItemDepth(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountUpdateQueueItemDepth", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountUpdateQueueItemDepth indicates an expected call of AccountUpdateQueueItemDepth.
func (mr *MockAccountUpdateQueueMockRecorder) AccountUpdateQueueItemDepth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountUpdateQueueItemDepth", reflect.TypeOf((*MockAccountUpdateQueue)(nil).AccountUpdateQueueItemDepth), ctx)
}

// AddAccountUpdateQueueItem mocks base method.
func (m *MockAccountUpdateQueue) AddAccountUpdateQueueItem(ctx context.Context, item *model.AccountUpdateQueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountUpdateQueueItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountUpdateQueueItem indicates an expected call of AddAccountUpdateQueueItem.
func (mr *MockAccountUpdateQueueMockRecorder) AddAccountUpdateQueueItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountUpdateQueueItem", reflect.TypeOf((*MockAccountUpdateQueue)(nil).AddAccountUpdateQueueItem), ctx, item)
}

// PopAccountUpdateQueueItem mocks base method.
func (m *MockAccountUpdateQueue) PopAccountUpdateQueueItem(ctx context.Context) (*model.AccountUpdateQueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopAccountUpdateQueueItem", ctx)
	ret0, _ := ret[0].(*model.AccountUpdateQueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PopAccountUpdateQueueItem indicates an expected call of PopAccountUpdateQueueItem.
func (mr *MockAccountUpdateQueueMockRecorder) PopAccountUpdateQueueItem(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopAccountUpdateQueueItem", reflect.TypeOf((*MockAccountUpdateQueue)(nil).PopAccountUpdateQueueItem), ctx)
}

// ReQueueAccountUpdateQueueItem mocks base method.
func (m *MockAccountUpdateQueue) ReQueueAccountUpdateQueueItem(ctx context.Context, item *model.AccountUpdateQueueItem, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReQueueAccountUpdateQueueItem", ctx, item, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReQueueAccountUpdateQueueItem indicates an expected call of ReQueueAccountUpdateQueueItem.
func (mr *MockAccountUpdateQueueMockRecorder) ReQueueAccountUpdateQueueItem(ctx, item, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReQueueAccountUpdateQueueItem", reflect.TypeOf((*MockAccountUpdateQueue)(nil).ReQueueAccountUpdateQueueItem), ctx, item, reason)
}

// MockTransactionUpdateQueue is a mock of TransactionUpdateQueue interface.
type MockTransactionUpdateQueue struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionUpdateQueueMockRecorder
}

// MockTransactionUpdateQueueMockRecorder is the mock recorder for MockTransactionUpdateQueue.
type MockTransactionUpdateQueueMockRecorder struct {
	mock *MockTransactionUpdateQueue
}

// NewMockTransactionUpdateQueue creates a new mock instance.
func NewMockTransactionUpdateQueue(ctrl *gomock.Controller) *MockTransactionUpdateQueue {
	mock := &MockTransactionUpdateQueue{ctrl: ctrl}
	mock.recorder = &MockTransactionUpdateQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionUpdateQueue) EXPECT() *MockTransactionUpdateQueueMockRecorder {
	return m.recorder
}

// AddTransactionUpdateQueueItem mocks base method.
func (m *MockTransactionUpdateQueue) AddTransactionUpdateQueueItem(ctx context.Context, item *model.TransactionUpdateQueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransactionUpdateQueueItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransactionUpdateQueueItem indicates an expected call of AddTransactionUpdateQueueItem.
func (mr *MockTransactionUpdateQueueMockRecorder) AddTransactionUpdateQueueItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransactionUpdateQueueItem", reflect.TypeOf((*MockTransactionUpdateQueue)(nil).AddTransactionUpdateQueueItem), ctx, item)
}

// PopTransactionUpdateQueueItem mocks base method.
func (m *MockTransactionUpdateQueue) PopTransactionUpdateQueueItem(ctx context.Context) (*model.TransactionUpdateQueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopTransactionUpdateQueueItem", ctx)
	ret0, _ := ret[0].(*model.TransactionUpdateQueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PopTransactionUpdateQueueItem indicates an expected call of PopTransactionUpdateQueueItem.
func (mr *MockTransactionUpdateQueueMockRecorder) PopTransactionUpdateQueueItem(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopTransactionUpdateQueueItem", reflect.TypeOf((*MockTransactionUpdateQueue)(nil).PopTransactionUpdateQueueItem), ctx)
}

// ReQueueTransactionUpdateItem mocks base method.
func (m *MockTransactionUpdateQueue) ReQueueTransactionUpdateItem(ctx context.Context, item *model.TransactionUpdateQueueItem, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReQueueTransactionUpdateItem", ctx, item, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReQueueTransactionUpdateItem indicates an expected call of ReQueueTransactionUpdateItem.
func (mr *MockTransactionUpdateQueueMockRecorder) ReQueueTransactionUpdateItem(ctx, item, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReQueueTransactionUpdateItem", reflect.TypeOf((*MockTransactionUpdateQueue)(nil).ReQueueTransactionUpdateItem), ctx, item, reason)
}

// TransactionUpdateQueueItemDepth mocks base method.
func (m *MockTransactionUpdateQueue) TransactionUpdateQueueItemDepth(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionUpdateQueueItemDepth", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionUpdateQueueItemDepth indicates an expected call of TransactionUpdateQueueItemDepth.
func (mr *MockTransactionUpdateQueueMockRecorder) TransactionUpdateQueueItemDepth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionUpdateQueueItemDepth", reflect.TypeOf((*MockTransactionUpdateQueue)(nil).TransactionUpdateQueueItemDepth), ctx)
}
