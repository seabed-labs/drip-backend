// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/dcaf-labs/drip/pkg/service/repository/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionProcessingCheckpointRepository is a mock of TransactionProcessingCheckpointRepository interface.
type MockTransactionProcessingCheckpointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionProcessingCheckpointRepositoryMockRecorder
}

// MockTransactionProcessingCheckpointRepositoryMockRecorder is the mock recorder for MockTransactionProcessingCheckpointRepository.
type MockTransactionProcessingCheckpointRepositoryMockRecorder struct {
	mock *MockTransactionProcessingCheckpointRepository
}

// NewMockTransactionProcessingCheckpointRepository creates a new mock instance.
func NewMockTransactionProcessingCheckpointRepository(ctrl *gomock.Controller) *MockTransactionProcessingCheckpointRepository {
	mock := &MockTransactionProcessingCheckpointRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionProcessingCheckpointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionProcessingCheckpointRepository) EXPECT() *MockTransactionProcessingCheckpointRepositoryMockRecorder {
	return m.recorder
}

// GetLatestTransactionCheckpoint mocks base method.
func (m *MockTransactionProcessingCheckpointRepository) GetLatestTransactionCheckpoint(ctx context.Context) *model.TransactionProcessingCheckpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTransactionCheckpoint", ctx)
	ret0, _ := ret[0].(*model.TransactionProcessingCheckpoint)
	return ret0
}

// GetLatestTransactionCheckpoint indicates an expected call of GetLatestTransactionCheckpoint.
func (mr *MockTransactionProcessingCheckpointRepositoryMockRecorder) GetLatestTransactionCheckpoint(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTransactionCheckpoint", reflect.TypeOf((*MockTransactionProcessingCheckpointRepository)(nil).GetLatestTransactionCheckpoint), ctx)
}

// UpsertTransactionProcessingCheckpoint mocks base method.
func (m *MockTransactionProcessingCheckpointRepository) UpsertTransactionProcessingCheckpoint(ctx context.Context, slot uint64, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTransactionProcessingCheckpoint", ctx, slot, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTransactionProcessingCheckpoint indicates an expected call of UpsertTransactionProcessingCheckpoint.
func (mr *MockTransactionProcessingCheckpointRepositoryMockRecorder) UpsertTransactionProcessingCheckpoint(ctx, slot, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTransactionProcessingCheckpoint", reflect.TypeOf((*MockTransactionProcessingCheckpointRepository)(nil).UpsertTransactionProcessingCheckpoint), ctx, slot, signature)
}
