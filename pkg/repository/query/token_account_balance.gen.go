// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/dcaf-protocol/drip/pkg/repository/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTokenAccountBalance(db *gorm.DB) tokenAccountBalance {
	_tokenAccountBalance := tokenAccountBalance{}

	_tokenAccountBalance.tokenAccountBalanceDo.UseDB(db)
	_tokenAccountBalance.tokenAccountBalanceDo.UseModel(&model.TokenAccountBalance{})

	tableName := _tokenAccountBalance.tokenAccountBalanceDo.TableName()
	_tokenAccountBalance.ALL = field.NewField(tableName, "*")
	_tokenAccountBalance.Pubkey = field.NewString(tableName, "pubkey")
	_tokenAccountBalance.Mint = field.NewString(tableName, "mint")
	_tokenAccountBalance.Owner = field.NewString(tableName, "owner")
	_tokenAccountBalance.Amount = field.NewUint64(tableName, "amount")
	_tokenAccountBalance.State = field.NewString(tableName, "state")

	_tokenAccountBalance.fillFieldMap()

	return _tokenAccountBalance
}

type tokenAccountBalance struct {
	tokenAccountBalanceDo tokenAccountBalanceDo

	ALL    field.Field
	Pubkey field.String
	Mint   field.String
	Owner  field.String
	Amount field.Uint64
	State  field.String

	fieldMap map[string]field.Expr
}

func (t tokenAccountBalance) Table(newTableName string) *tokenAccountBalance {
	t.tokenAccountBalanceDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tokenAccountBalance) As(alias string) *tokenAccountBalance {
	t.tokenAccountBalanceDo.DO = *(t.tokenAccountBalanceDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tokenAccountBalance) updateTableName(table string) *tokenAccountBalance {
	t.ALL = field.NewField(table, "*")
	t.Pubkey = field.NewString(table, "pubkey")
	t.Mint = field.NewString(table, "mint")
	t.Owner = field.NewString(table, "owner")
	t.Amount = field.NewUint64(table, "amount")
	t.State = field.NewString(table, "state")

	t.fillFieldMap()

	return t
}

func (t *tokenAccountBalance) WithContext(ctx context.Context) *tokenAccountBalanceDo {
	return t.tokenAccountBalanceDo.WithContext(ctx)
}

func (t tokenAccountBalance) TableName() string { return t.tokenAccountBalanceDo.TableName() }

func (t tokenAccountBalance) Alias() string { return t.tokenAccountBalanceDo.Alias() }

func (t *tokenAccountBalance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tokenAccountBalance) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["pubkey"] = t.Pubkey
	t.fieldMap["mint"] = t.Mint
	t.fieldMap["owner"] = t.Owner
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["state"] = t.State
}

func (t tokenAccountBalance) clone(db *gorm.DB) tokenAccountBalance {
	t.tokenAccountBalanceDo.ReplaceDB(db)
	return t
}

type tokenAccountBalanceDo struct{ gen.DO }

func (t tokenAccountBalanceDo) Debug() *tokenAccountBalanceDo {
	return t.withDO(t.DO.Debug())
}

func (t tokenAccountBalanceDo) WithContext(ctx context.Context) *tokenAccountBalanceDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tokenAccountBalanceDo) ReadDB() *tokenAccountBalanceDo {
	return t.Clauses(dbresolver.Read)
}

func (t tokenAccountBalanceDo) WriteDB() *tokenAccountBalanceDo {
	return t.Clauses(dbresolver.Write)
}

func (t tokenAccountBalanceDo) Clauses(conds ...clause.Expression) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tokenAccountBalanceDo) Returning(value interface{}, columns ...string) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tokenAccountBalanceDo) Not(conds ...gen.Condition) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tokenAccountBalanceDo) Or(conds ...gen.Condition) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tokenAccountBalanceDo) Select(conds ...field.Expr) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tokenAccountBalanceDo) Where(conds ...gen.Condition) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tokenAccountBalanceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tokenAccountBalanceDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tokenAccountBalanceDo) Order(conds ...field.Expr) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tokenAccountBalanceDo) Distinct(cols ...field.Expr) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tokenAccountBalanceDo) Omit(cols ...field.Expr) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tokenAccountBalanceDo) Join(table schema.Tabler, on ...field.Expr) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tokenAccountBalanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tokenAccountBalanceDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tokenAccountBalanceDo) RightJoin(table schema.Tabler, on ...field.Expr) *tokenAccountBalanceDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tokenAccountBalanceDo) Group(cols ...field.Expr) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tokenAccountBalanceDo) Having(conds ...gen.Condition) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tokenAccountBalanceDo) Limit(limit int) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tokenAccountBalanceDo) Offset(offset int) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tokenAccountBalanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tokenAccountBalanceDo) Unscoped() *tokenAccountBalanceDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tokenAccountBalanceDo) Create(values ...*model.TokenAccountBalance) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tokenAccountBalanceDo) CreateInBatches(values []*model.TokenAccountBalance, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tokenAccountBalanceDo) Save(values ...*model.TokenAccountBalance) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tokenAccountBalanceDo) First() (*model.TokenAccountBalance, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenAccountBalance), nil
	}
}

func (t tokenAccountBalanceDo) Take() (*model.TokenAccountBalance, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenAccountBalance), nil
	}
}

func (t tokenAccountBalanceDo) Last() (*model.TokenAccountBalance, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenAccountBalance), nil
	}
}

func (t tokenAccountBalanceDo) Find() ([]*model.TokenAccountBalance, error) {
	result, err := t.DO.Find()
	return result.([]*model.TokenAccountBalance), err
}

func (t tokenAccountBalanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TokenAccountBalance, err error) {
	buf := make([]*model.TokenAccountBalance, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tokenAccountBalanceDo) FindInBatches(result *[]*model.TokenAccountBalance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tokenAccountBalanceDo) Attrs(attrs ...field.AssignExpr) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tokenAccountBalanceDo) Assign(attrs ...field.AssignExpr) *tokenAccountBalanceDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tokenAccountBalanceDo) Joins(fields ...field.RelationField) *tokenAccountBalanceDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tokenAccountBalanceDo) Preload(fields ...field.RelationField) *tokenAccountBalanceDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tokenAccountBalanceDo) FirstOrInit() (*model.TokenAccountBalance, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenAccountBalance), nil
	}
}

func (t tokenAccountBalanceDo) FirstOrCreate() (*model.TokenAccountBalance, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TokenAccountBalance), nil
	}
}

func (t tokenAccountBalanceDo) FindByPage(offset int, limit int) (result []*model.TokenAccountBalance, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tokenAccountBalanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tokenAccountBalanceDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t *tokenAccountBalanceDo) withDO(do gen.Dao) *tokenAccountBalanceDo {
	t.DO = *do.(*gen.DO)
	return t
}
