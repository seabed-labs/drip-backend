// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dcaf-labs/drip/pkg/repository/model"
)

func newVaultWhitelist(db *gorm.DB) vaultWhitelist {
	_vaultWhitelist := vaultWhitelist{}

	_vaultWhitelist.vaultWhitelistDo.UseDB(db)
	_vaultWhitelist.vaultWhitelistDo.UseModel(&model.VaultWhitelist{})

	tableName := _vaultWhitelist.vaultWhitelistDo.TableName()
	_vaultWhitelist.ALL = field.NewField(tableName, "*")
	_vaultWhitelist.ID = field.NewString(tableName, "id")
	_vaultWhitelist.VaultPubkey = field.NewString(tableName, "vault_pubkey")
	_vaultWhitelist.TokenSwapPubkey = field.NewString(tableName, "token_swap_pubkey")

	_vaultWhitelist.fillFieldMap()

	return _vaultWhitelist
}

type vaultWhitelist struct {
	vaultWhitelistDo vaultWhitelistDo

	ALL             field.Field
	ID              field.String
	VaultPubkey     field.String
	TokenSwapPubkey field.String

	fieldMap map[string]field.Expr
}

func (v vaultWhitelist) Table(newTableName string) *vaultWhitelist {
	v.vaultWhitelistDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vaultWhitelist) As(alias string) *vaultWhitelist {
	v.vaultWhitelistDo.DO = *(v.vaultWhitelistDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vaultWhitelist) updateTableName(table string) *vaultWhitelist {
	v.ALL = field.NewField(table, "*")
	v.ID = field.NewString(table, "id")
	v.VaultPubkey = field.NewString(table, "vault_pubkey")
	v.TokenSwapPubkey = field.NewString(table, "token_swap_pubkey")

	v.fillFieldMap()

	return v
}

func (v *vaultWhitelist) WithContext(ctx context.Context) *vaultWhitelistDo {
	return v.vaultWhitelistDo.WithContext(ctx)
}

func (v vaultWhitelist) TableName() string { return v.vaultWhitelistDo.TableName() }

func (v vaultWhitelist) Alias() string { return v.vaultWhitelistDo.Alias() }

func (v *vaultWhitelist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vaultWhitelist) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 3)
	v.fieldMap["id"] = v.ID
	v.fieldMap["vault_pubkey"] = v.VaultPubkey
	v.fieldMap["token_swap_pubkey"] = v.TokenSwapPubkey
}

func (v vaultWhitelist) clone(db *gorm.DB) vaultWhitelist {
	v.vaultWhitelistDo.ReplaceDB(db)
	return v
}

type vaultWhitelistDo struct{ gen.DO }

func (v vaultWhitelistDo) Debug() *vaultWhitelistDo {
	return v.withDO(v.DO.Debug())
}

func (v vaultWhitelistDo) WithContext(ctx context.Context) *vaultWhitelistDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vaultWhitelistDo) ReadDB() *vaultWhitelistDo {
	return v.Clauses(dbresolver.Read)
}

func (v vaultWhitelistDo) WriteDB() *vaultWhitelistDo {
	return v.Clauses(dbresolver.Write)
}

func (v vaultWhitelistDo) Clauses(conds ...clause.Expression) *vaultWhitelistDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vaultWhitelistDo) Returning(value interface{}, columns ...string) *vaultWhitelistDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vaultWhitelistDo) Not(conds ...gen.Condition) *vaultWhitelistDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vaultWhitelistDo) Or(conds ...gen.Condition) *vaultWhitelistDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vaultWhitelistDo) Select(conds ...field.Expr) *vaultWhitelistDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vaultWhitelistDo) Where(conds ...gen.Condition) *vaultWhitelistDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vaultWhitelistDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *vaultWhitelistDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v vaultWhitelistDo) Order(conds ...field.Expr) *vaultWhitelistDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vaultWhitelistDo) Distinct(cols ...field.Expr) *vaultWhitelistDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vaultWhitelistDo) Omit(cols ...field.Expr) *vaultWhitelistDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vaultWhitelistDo) Join(table schema.Tabler, on ...field.Expr) *vaultWhitelistDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vaultWhitelistDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vaultWhitelistDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vaultWhitelistDo) RightJoin(table schema.Tabler, on ...field.Expr) *vaultWhitelistDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vaultWhitelistDo) Group(cols ...field.Expr) *vaultWhitelistDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vaultWhitelistDo) Having(conds ...gen.Condition) *vaultWhitelistDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vaultWhitelistDo) Limit(limit int) *vaultWhitelistDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vaultWhitelistDo) Offset(offset int) *vaultWhitelistDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vaultWhitelistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vaultWhitelistDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vaultWhitelistDo) Unscoped() *vaultWhitelistDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vaultWhitelistDo) Create(values ...*model.VaultWhitelist) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vaultWhitelistDo) CreateInBatches(values []*model.VaultWhitelist, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vaultWhitelistDo) Save(values ...*model.VaultWhitelist) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vaultWhitelistDo) First() (*model.VaultWhitelist, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VaultWhitelist), nil
	}
}

func (v vaultWhitelistDo) Take() (*model.VaultWhitelist, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VaultWhitelist), nil
	}
}

func (v vaultWhitelistDo) Last() (*model.VaultWhitelist, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VaultWhitelist), nil
	}
}

func (v vaultWhitelistDo) Find() ([]*model.VaultWhitelist, error) {
	result, err := v.DO.Find()
	return result.([]*model.VaultWhitelist), err
}

func (v vaultWhitelistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VaultWhitelist, err error) {
	buf := make([]*model.VaultWhitelist, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vaultWhitelistDo) FindInBatches(result *[]*model.VaultWhitelist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vaultWhitelistDo) Attrs(attrs ...field.AssignExpr) *vaultWhitelistDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vaultWhitelistDo) Assign(attrs ...field.AssignExpr) *vaultWhitelistDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vaultWhitelistDo) Joins(fields ...field.RelationField) *vaultWhitelistDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vaultWhitelistDo) Preload(fields ...field.RelationField) *vaultWhitelistDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vaultWhitelistDo) FirstOrInit() (*model.VaultWhitelist, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VaultWhitelist), nil
	}
}

func (v vaultWhitelistDo) FirstOrCreate() (*model.VaultWhitelist, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VaultWhitelist), nil
	}
}

func (v vaultWhitelistDo) FindByPage(offset int, limit int) (result []*model.VaultWhitelist, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vaultWhitelistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vaultWhitelistDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vaultWhitelistDo) Delete(models ...*model.VaultWhitelist) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vaultWhitelistDo) withDO(do gen.Dao) *vaultWhitelistDo {
	v.DO = *do.(*gen.DO)
	return v
}
