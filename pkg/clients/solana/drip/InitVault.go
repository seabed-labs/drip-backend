// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drip

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitVault is the `initVault` instruction.
type InitVault struct {
	Params *InitializeVaultParams

	// [0] = [WRITE] vault
	//
	// [1] = [] vaultProtoConfig
	//
	// [2] = [WRITE] tokenAAccount
	//
	// [3] = [WRITE] tokenBAccount
	//
	// [4] = [] treasuryTokenBAccount
	//
	// [5] = [] tokenAMint
	//
	// [6] = [] tokenBMint
	//
	// [7] = [WRITE, SIGNER] creator
	//
	// [8] = [] tokenProgram
	//
	// [9] = [] associatedTokenProgram
	//
	// [10] = [] systemProgram
	//
	// [11] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitVaultInstructionBuilder creates a new `InitVault` instruction builder.
func NewInitVaultInstructionBuilder() *InitVault {
	nd := &InitVault{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *InitVault) SetParams(params InitializeVaultParams) *InitVault {
	inst.Params = &params
	return inst
}

// SetVaultAccount sets the "vault" account.
func (inst *InitVault) SetVaultAccount(vault ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *InitVault) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVaultProtoConfigAccount sets the "vaultProtoConfig" account.
func (inst *InitVault) SetVaultProtoConfigAccount(vaultProtoConfig ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vaultProtoConfig)
	return inst
}

// GetVaultProtoConfigAccount gets the "vaultProtoConfig" account.
func (inst *InitVault) GetVaultProtoConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAAccountAccount sets the "tokenAAccount" account.
func (inst *InitVault) SetTokenAAccountAccount(tokenAAccount ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAAccount).WRITE()
	return inst
}

// GetTokenAAccountAccount gets the "tokenAAccount" account.
func (inst *InitVault) GetTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBAccountAccount sets the "tokenBAccount" account.
func (inst *InitVault) SetTokenBAccountAccount(tokenBAccount ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBAccount).WRITE()
	return inst
}

// GetTokenBAccountAccount gets the "tokenBAccount" account.
func (inst *InitVault) GetTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTreasuryTokenBAccountAccount sets the "treasuryTokenBAccount" account.
func (inst *InitVault) SetTreasuryTokenBAccountAccount(treasuryTokenBAccount ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(treasuryTokenBAccount)
	return inst
}

// GetTreasuryTokenBAccountAccount gets the "treasuryTokenBAccount" account.
func (inst *InitVault) GetTreasuryTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenAMintAccount sets the "tokenAMint" account.
func (inst *InitVault) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "tokenAMint" account.
func (inst *InitVault) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenBMintAccount sets the "tokenBMint" account.
func (inst *InitVault) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "tokenBMint" account.
func (inst *InitVault) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetCreatorAccount sets the "creator" account.
func (inst *InitVault) SetCreatorAccount(creator ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *InitVault) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *InitVault) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *InitVault) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *InitVault) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *InitVault) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitVault) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitVault) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetRentAccount sets the "rent" account.
func (inst *InitVault) SetRentAccount(rent ag_solanago.PublicKey) *InitVault {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitVault) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst InitVault) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitVault,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitVault) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitVault) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.VaultProtoConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TreasuryTokenBAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitVault) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitVault")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 vault", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      vaultProtoConfig", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                tokenA", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                tokenB", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        treasuryTokenB", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("            tokenAMint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            tokenBMint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("               creator", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj InitVault) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitVault) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewInitVaultInstruction declares a new InitVault instruction with the provided parameters and accounts.
func NewInitVaultInstruction(
	// Parameters:
	params InitializeVaultParams,
	// Accounts:
	vault ag_solanago.PublicKey,
	vaultProtoConfig ag_solanago.PublicKey,
	tokenAAccount ag_solanago.PublicKey,
	tokenBAccount ag_solanago.PublicKey,
	treasuryTokenBAccount ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitVault {
	return NewInitVaultInstructionBuilder().
		SetParams(params).
		SetVaultAccount(vault).
		SetVaultProtoConfigAccount(vaultProtoConfig).
		SetTokenAAccountAccount(tokenAAccount).
		SetTokenBAccountAccount(tokenBAccount).
		SetTreasuryTokenBAccountAccount(treasuryTokenBAccount).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetCreatorAccount(creator).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
